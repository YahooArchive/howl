/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.ql.plan.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Stage implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Stage");
  private static final TField STAGE_ID_FIELD_DESC = new TField("stageId", TType.STRING, (short)1);
  private static final TField STAGE_TYPE_FIELD_DESC = new TField("stageType", TType.I32, (short)2);
  private static final TField STAGE_ATTRIBUTES_FIELD_DESC = new TField("stageAttributes", TType.MAP, (short)3);
  private static final TField STAGE_COUNTERS_FIELD_DESC = new TField("stageCounters", TType.MAP, (short)4);
  private static final TField TASK_LIST_FIELD_DESC = new TField("taskList", TType.LIST, (short)5);
  private static final TField DONE_FIELD_DESC = new TField("done", TType.BOOL, (short)6);
  private static final TField STARTED_FIELD_DESC = new TField("started", TType.BOOL, (short)7);

  private String stageId;
  public static final int STAGEID = 1;
  private int stageType;
  public static final int STAGETYPE = 2;
  private Map<String,String> stageAttributes;
  public static final int STAGEATTRIBUTES = 3;
  private Map<String,Long> stageCounters;
  public static final int STAGECOUNTERS = 4;
  private List<Task> taskList;
  public static final int TASKLIST = 5;
  private boolean done;
  public static final int DONE = 6;
  private boolean started;
  public static final int STARTED = 7;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean stageType = false;
    public boolean done = false;
    public boolean started = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(STAGEID, new FieldMetaData("stageId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(STAGETYPE, new FieldMetaData("stageType", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(STAGEATTRIBUTES, new FieldMetaData("stageAttributes", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.STRING))));
    put(STAGECOUNTERS, new FieldMetaData("stageCounters", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.I64))));
    put(TASKLIST, new FieldMetaData("taskList", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Task.class))));
    put(DONE, new FieldMetaData("done", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    put(STARTED, new FieldMetaData("started", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Stage.class, metaDataMap);
  }

  public Stage() {
  }

  public Stage(
    String stageId,
    int stageType,
    Map<String,String> stageAttributes,
    Map<String,Long> stageCounters,
    List<Task> taskList,
    boolean done,
    boolean started)
  {
    this();
    this.stageId = stageId;
    this.stageType = stageType;
    this.__isset.stageType = true;
    this.stageAttributes = stageAttributes;
    this.stageCounters = stageCounters;
    this.taskList = taskList;
    this.done = done;
    this.__isset.done = true;
    this.started = started;
    this.__isset.started = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Stage(Stage other) {
    if (other.isSetStageId()) {
      this.stageId = other.stageId;
    }
    __isset.stageType = other.__isset.stageType;
    this.stageType = other.stageType;
    if (other.isSetStageAttributes()) {
      Map<String,String> __this__stageAttributes = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.stageAttributes.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__stageAttributes_copy_key = other_element_key;

        String __this__stageAttributes_copy_value = other_element_value;

        __this__stageAttributes.put(__this__stageAttributes_copy_key, __this__stageAttributes_copy_value);
      }
      this.stageAttributes = __this__stageAttributes;
    }
    if (other.isSetStageCounters()) {
      Map<String,Long> __this__stageCounters = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.stageCounters.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__stageCounters_copy_key = other_element_key;

        Long __this__stageCounters_copy_value = other_element_value;

        __this__stageCounters.put(__this__stageCounters_copy_key, __this__stageCounters_copy_value);
      }
      this.stageCounters = __this__stageCounters;
    }
    if (other.isSetTaskList()) {
      List<Task> __this__taskList = new ArrayList<Task>();
      for (Task other_element : other.taskList) {
        __this__taskList.add(new Task(other_element));
      }
      this.taskList = __this__taskList;
    }
    __isset.done = other.__isset.done;
    this.done = other.done;
    __isset.started = other.__isset.started;
    this.started = other.started;
  }

  @Override
  public Stage clone() {
    return new Stage(this);
  }

  public String getStageId() {
    return this.stageId;
  }

  public void setStageId(String stageId) {
    this.stageId = stageId;
  }

  public void unsetStageId() {
    this.stageId = null;
  }

  // Returns true if field stageId is set (has been asigned a value) and false otherwise
  public boolean isSetStageId() {
    return this.stageId != null;
  }

  public int getStageType() {
    return this.stageType;
  }

  public void setStageType(int stageType) {
    this.stageType = stageType;
    this.__isset.stageType = true;
  }

  public void unsetStageType() {
    this.__isset.stageType = false;
  }

  // Returns true if field stageType is set (has been asigned a value) and false otherwise
  public boolean isSetStageType() {
    return this.__isset.stageType;
  }

  public int getStageAttributesSize() {
    return (this.stageAttributes == null) ? 0 : this.stageAttributes.size();
  }

  public void putToStageAttributes(String key, String val) {
    if (this.stageAttributes == null) {
      this.stageAttributes = new HashMap<String,String>();
    }
    this.stageAttributes.put(key, val);
  }

  public Map<String,String> getStageAttributes() {
    return this.stageAttributes;
  }

  public void setStageAttributes(Map<String,String> stageAttributes) {
    this.stageAttributes = stageAttributes;
  }

  public void unsetStageAttributes() {
    this.stageAttributes = null;
  }

  // Returns true if field stageAttributes is set (has been asigned a value) and false otherwise
  public boolean isSetStageAttributes() {
    return this.stageAttributes != null;
  }

  public int getStageCountersSize() {
    return (this.stageCounters == null) ? 0 : this.stageCounters.size();
  }

  public void putToStageCounters(String key, long val) {
    if (this.stageCounters == null) {
      this.stageCounters = new HashMap<String,Long>();
    }
    this.stageCounters.put(key, val);
  }

  public Map<String,Long> getStageCounters() {
    return this.stageCounters;
  }

  public void setStageCounters(Map<String,Long> stageCounters) {
    this.stageCounters = stageCounters;
  }

  public void unsetStageCounters() {
    this.stageCounters = null;
  }

  // Returns true if field stageCounters is set (has been asigned a value) and false otherwise
  public boolean isSetStageCounters() {
    return this.stageCounters != null;
  }

  public int getTaskListSize() {
    return (this.taskList == null) ? 0 : this.taskList.size();
  }

  public java.util.Iterator<Task> getTaskListIterator() {
    return (this.taskList == null) ? null : this.taskList.iterator();
  }

  public void addToTaskList(Task elem) {
    if (this.taskList == null) {
      this.taskList = new ArrayList<Task>();
    }
    this.taskList.add(elem);
  }

  public List<Task> getTaskList() {
    return this.taskList;
  }

  public void setTaskList(List<Task> taskList) {
    this.taskList = taskList;
  }

  public void unsetTaskList() {
    this.taskList = null;
  }

  // Returns true if field taskList is set (has been asigned a value) and false otherwise
  public boolean isSetTaskList() {
    return this.taskList != null;
  }

  public boolean isDone() {
    return this.done;
  }

  public void setDone(boolean done) {
    this.done = done;
    this.__isset.done = true;
  }

  public void unsetDone() {
    this.__isset.done = false;
  }

  // Returns true if field done is set (has been asigned a value) and false otherwise
  public boolean isSetDone() {
    return this.__isset.done;
  }

  public boolean isStarted() {
    return this.started;
  }

  public void setStarted(boolean started) {
    this.started = started;
    this.__isset.started = true;
  }

  public void unsetStarted() {
    this.__isset.started = false;
  }

  // Returns true if field started is set (has been asigned a value) and false otherwise
  public boolean isSetStarted() {
    return this.__isset.started;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case STAGEID:
      if (value == null) {
        unsetStageId();
      } else {
        setStageId((String)value);
      }
      break;

    case STAGETYPE:
      if (value == null) {
        unsetStageType();
      } else {
        setStageType((Integer)value);
      }
      break;

    case STAGEATTRIBUTES:
      if (value == null) {
        unsetStageAttributes();
      } else {
        setStageAttributes((Map<String,String>)value);
      }
      break;

    case STAGECOUNTERS:
      if (value == null) {
        unsetStageCounters();
      } else {
        setStageCounters((Map<String,Long>)value);
      }
      break;

    case TASKLIST:
      if (value == null) {
        unsetTaskList();
      } else {
        setTaskList((List<Task>)value);
      }
      break;

    case DONE:
      if (value == null) {
        unsetDone();
      } else {
        setDone((Boolean)value);
      }
      break;

    case STARTED:
      if (value == null) {
        unsetStarted();
      } else {
        setStarted((Boolean)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case STAGEID:
      return getStageId();

    case STAGETYPE:
      return getStageType();

    case STAGEATTRIBUTES:
      return getStageAttributes();

    case STAGECOUNTERS:
      return getStageCounters();

    case TASKLIST:
      return getTaskList();

    case DONE:
      return new Boolean(isDone());

    case STARTED:
      return new Boolean(isStarted());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case STAGEID:
      return isSetStageId();
    case STAGETYPE:
      return isSetStageType();
    case STAGEATTRIBUTES:
      return isSetStageAttributes();
    case STAGECOUNTERS:
      return isSetStageCounters();
    case TASKLIST:
      return isSetTaskList();
    case DONE:
      return isSetDone();
    case STARTED:
      return isSetStarted();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Stage)
      return this.equals((Stage)that);
    return false;
  }

  public boolean equals(Stage that) {
    if (that == null)
      return false;

    boolean this_present_stageId = true && this.isSetStageId();
    boolean that_present_stageId = true && that.isSetStageId();
    if (this_present_stageId || that_present_stageId) {
      if (!(this_present_stageId && that_present_stageId))
        return false;
      if (!this.stageId.equals(that.stageId))
        return false;
    }

    boolean this_present_stageType = true;
    boolean that_present_stageType = true;
    if (this_present_stageType || that_present_stageType) {
      if (!(this_present_stageType && that_present_stageType))
        return false;
      if (this.stageType != that.stageType)
        return false;
    }

    boolean this_present_stageAttributes = true && this.isSetStageAttributes();
    boolean that_present_stageAttributes = true && that.isSetStageAttributes();
    if (this_present_stageAttributes || that_present_stageAttributes) {
      if (!(this_present_stageAttributes && that_present_stageAttributes))
        return false;
      if (!this.stageAttributes.equals(that.stageAttributes))
        return false;
    }

    boolean this_present_stageCounters = true && this.isSetStageCounters();
    boolean that_present_stageCounters = true && that.isSetStageCounters();
    if (this_present_stageCounters || that_present_stageCounters) {
      if (!(this_present_stageCounters && that_present_stageCounters))
        return false;
      if (!this.stageCounters.equals(that.stageCounters))
        return false;
    }

    boolean this_present_taskList = true && this.isSetTaskList();
    boolean that_present_taskList = true && that.isSetTaskList();
    if (this_present_taskList || that_present_taskList) {
      if (!(this_present_taskList && that_present_taskList))
        return false;
      if (!this.taskList.equals(that.taskList))
        return false;
    }

    boolean this_present_done = true;
    boolean that_present_done = true;
    if (this_present_done || that_present_done) {
      if (!(this_present_done && that_present_done))
        return false;
      if (this.done != that.done)
        return false;
    }

    boolean this_present_started = true;
    boolean that_present_started = true;
    if (this_present_started || that_present_started) {
      if (!(this_present_started && that_present_started))
        return false;
      if (this.started != that.started)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case STAGEID:
          if (field.type == TType.STRING) {
            this.stageId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STAGETYPE:
          if (field.type == TType.I32) {
            this.stageType = iprot.readI32();
            this.__isset.stageType = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STAGEATTRIBUTES:
          if (field.type == TType.MAP) {
            {
              TMap _map36 = iprot.readMapBegin();
              this.stageAttributes = new HashMap<String,String>(2*_map36.size);
              for (int _i37 = 0; _i37 < _map36.size; ++_i37)
              {
                String _key38;
                String _val39;
                _key38 = iprot.readString();
                _val39 = iprot.readString();
                this.stageAttributes.put(_key38, _val39);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STAGECOUNTERS:
          if (field.type == TType.MAP) {
            {
              TMap _map40 = iprot.readMapBegin();
              this.stageCounters = new HashMap<String,Long>(2*_map40.size);
              for (int _i41 = 0; _i41 < _map40.size; ++_i41)
              {
                String _key42;
                long _val43;
                _key42 = iprot.readString();
                _val43 = iprot.readI64();
                this.stageCounters.put(_key42, _val43);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TASKLIST:
          if (field.type == TType.LIST) {
            {
              TList _list44 = iprot.readListBegin();
              this.taskList = new ArrayList<Task>(_list44.size);
              for (int _i45 = 0; _i45 < _list44.size; ++_i45)
              {
                Task _elem46;
                _elem46 = new Task();
                _elem46.read(iprot);
                this.taskList.add(_elem46);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DONE:
          if (field.type == TType.BOOL) {
            this.done = iprot.readBool();
            this.__isset.done = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STARTED:
          if (field.type == TType.BOOL) {
            this.started = iprot.readBool();
            this.__isset.started = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.stageId != null) {
      oprot.writeFieldBegin(STAGE_ID_FIELD_DESC);
      oprot.writeString(this.stageId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(STAGE_TYPE_FIELD_DESC);
    oprot.writeI32(this.stageType);
    oprot.writeFieldEnd();
    if (this.stageAttributes != null) {
      oprot.writeFieldBegin(STAGE_ATTRIBUTES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.stageAttributes.size()));
        for (Map.Entry<String, String> _iter47 : this.stageAttributes.entrySet())        {
          oprot.writeString(_iter47.getKey());
          oprot.writeString(_iter47.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.stageCounters != null) {
      oprot.writeFieldBegin(STAGE_COUNTERS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.I64, this.stageCounters.size()));
        for (Map.Entry<String, Long> _iter48 : this.stageCounters.entrySet())        {
          oprot.writeString(_iter48.getKey());
          oprot.writeI64(_iter48.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.taskList != null) {
      oprot.writeFieldBegin(TASK_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.taskList.size()));
        for (Task _iter49 : this.taskList)        {
          _iter49.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(DONE_FIELD_DESC);
    oprot.writeBool(this.done);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(STARTED_FIELD_DESC);
    oprot.writeBool(this.started);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Stage(");
    boolean first = true;

    sb.append("stageId:");
    if (this.stageId == null) {
      sb.append("null");
    } else {
      sb.append(this.stageId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stageType:");
    String stageType_name = StageType.VALUES_TO_NAMES.get(this.stageType);
    if (stageType_name != null) {
      sb.append(stageType_name);
      sb.append(" (");
    }
    sb.append(this.stageType);
    if (stageType_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stageAttributes:");
    if (this.stageAttributes == null) {
      sb.append("null");
    } else {
      sb.append(this.stageAttributes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stageCounters:");
    if (this.stageCounters == null) {
      sb.append("null");
    } else {
      sb.append(this.stageCounters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskList:");
    if (this.taskList == null) {
      sb.append("null");
    } else {
      sb.append(this.taskList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("done:");
    sb.append(this.done);
    first = false;
    if (!first) sb.append(", ");
    sb.append("started:");
    sb.append(this.started);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStageType() && !StageType.VALID_VALUES.contains(stageType)){
      throw new TProtocolException("The field 'stageType' has been assigned the invalid value " + stageType);
    }
  }

}

