/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.ql.plan.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Task implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Task");
  private static final TField TASK_ID_FIELD_DESC = new TField("taskId", TType.STRING, (short)1);
  private static final TField TASK_TYPE_FIELD_DESC = new TField("taskType", TType.I32, (short)2);
  private static final TField TASK_ATTRIBUTES_FIELD_DESC = new TField("taskAttributes", TType.MAP, (short)3);
  private static final TField TASK_COUNTERS_FIELD_DESC = new TField("taskCounters", TType.MAP, (short)4);
  private static final TField OPERATOR_GRAPH_FIELD_DESC = new TField("operatorGraph", TType.STRUCT, (short)5);
  private static final TField OPERATOR_LIST_FIELD_DESC = new TField("operatorList", TType.LIST, (short)6);
  private static final TField DONE_FIELD_DESC = new TField("done", TType.BOOL, (short)7);
  private static final TField STARTED_FIELD_DESC = new TField("started", TType.BOOL, (short)8);

  private String taskId;
  public static final int TASKID = 1;
  private int taskType;
  public static final int TASKTYPE = 2;
  private Map<String,String> taskAttributes;
  public static final int TASKATTRIBUTES = 3;
  private Map<String,Long> taskCounters;
  public static final int TASKCOUNTERS = 4;
  private Graph operatorGraph;
  public static final int OPERATORGRAPH = 5;
  private List<Operator> operatorList;
  public static final int OPERATORLIST = 6;
  private boolean done;
  public static final int DONE = 7;
  private boolean started;
  public static final int STARTED = 8;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean taskType = false;
    public boolean done = false;
    public boolean started = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(TASKID, new FieldMetaData("taskId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(TASKTYPE, new FieldMetaData("taskType", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(TASKATTRIBUTES, new FieldMetaData("taskAttributes", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.STRING))));
    put(TASKCOUNTERS, new FieldMetaData("taskCounters", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.I64))));
    put(OPERATORGRAPH, new FieldMetaData("operatorGraph", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, Graph.class)));
    put(OPERATORLIST, new FieldMetaData("operatorList", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Operator.class))));
    put(DONE, new FieldMetaData("done", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    put(STARTED, new FieldMetaData("started", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Task.class, metaDataMap);
  }

  public Task() {
  }

  public Task(
    String taskId,
    int taskType,
    Map<String,String> taskAttributes,
    Map<String,Long> taskCounters,
    Graph operatorGraph,
    List<Operator> operatorList,
    boolean done,
    boolean started)
  {
    this();
    this.taskId = taskId;
    this.taskType = taskType;
    this.__isset.taskType = true;
    this.taskAttributes = taskAttributes;
    this.taskCounters = taskCounters;
    this.operatorGraph = operatorGraph;
    this.operatorList = operatorList;
    this.done = done;
    this.__isset.done = true;
    this.started = started;
    this.__isset.started = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Task(Task other) {
    if (other.isSetTaskId()) {
      this.taskId = other.taskId;
    }
    __isset.taskType = other.__isset.taskType;
    this.taskType = other.taskType;
    if (other.isSetTaskAttributes()) {
      Map<String,String> __this__taskAttributes = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.taskAttributes.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__taskAttributes_copy_key = other_element_key;

        String __this__taskAttributes_copy_value = other_element_value;

        __this__taskAttributes.put(__this__taskAttributes_copy_key, __this__taskAttributes_copy_value);
      }
      this.taskAttributes = __this__taskAttributes;
    }
    if (other.isSetTaskCounters()) {
      Map<String,Long> __this__taskCounters = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.taskCounters.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__taskCounters_copy_key = other_element_key;

        Long __this__taskCounters_copy_value = other_element_value;

        __this__taskCounters.put(__this__taskCounters_copy_key, __this__taskCounters_copy_value);
      }
      this.taskCounters = __this__taskCounters;
    }
    if (other.isSetOperatorGraph()) {
      this.operatorGraph = new Graph(other.operatorGraph);
    }
    if (other.isSetOperatorList()) {
      List<Operator> __this__operatorList = new ArrayList<Operator>();
      for (Operator other_element : other.operatorList) {
        __this__operatorList.add(new Operator(other_element));
      }
      this.operatorList = __this__operatorList;
    }
    __isset.done = other.__isset.done;
    this.done = other.done;
    __isset.started = other.__isset.started;
    this.started = other.started;
  }

  @Override
  public Task clone() {
    return new Task(this);
  }

  public String getTaskId() {
    return this.taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }

  public void unsetTaskId() {
    this.taskId = null;
  }

  // Returns true if field taskId is set (has been asigned a value) and false otherwise
  public boolean isSetTaskId() {
    return this.taskId != null;
  }

  public int getTaskType() {
    return this.taskType;
  }

  public void setTaskType(int taskType) {
    this.taskType = taskType;
    this.__isset.taskType = true;
  }

  public void unsetTaskType() {
    this.__isset.taskType = false;
  }

  // Returns true if field taskType is set (has been asigned a value) and false otherwise
  public boolean isSetTaskType() {
    return this.__isset.taskType;
  }

  public int getTaskAttributesSize() {
    return (this.taskAttributes == null) ? 0 : this.taskAttributes.size();
  }

  public void putToTaskAttributes(String key, String val) {
    if (this.taskAttributes == null) {
      this.taskAttributes = new HashMap<String,String>();
    }
    this.taskAttributes.put(key, val);
  }

  public Map<String,String> getTaskAttributes() {
    return this.taskAttributes;
  }

  public void setTaskAttributes(Map<String,String> taskAttributes) {
    this.taskAttributes = taskAttributes;
  }

  public void unsetTaskAttributes() {
    this.taskAttributes = null;
  }

  // Returns true if field taskAttributes is set (has been asigned a value) and false otherwise
  public boolean isSetTaskAttributes() {
    return this.taskAttributes != null;
  }

  public int getTaskCountersSize() {
    return (this.taskCounters == null) ? 0 : this.taskCounters.size();
  }

  public void putToTaskCounters(String key, long val) {
    if (this.taskCounters == null) {
      this.taskCounters = new HashMap<String,Long>();
    }
    this.taskCounters.put(key, val);
  }

  public Map<String,Long> getTaskCounters() {
    return this.taskCounters;
  }

  public void setTaskCounters(Map<String,Long> taskCounters) {
    this.taskCounters = taskCounters;
  }

  public void unsetTaskCounters() {
    this.taskCounters = null;
  }

  // Returns true if field taskCounters is set (has been asigned a value) and false otherwise
  public boolean isSetTaskCounters() {
    return this.taskCounters != null;
  }

  public Graph getOperatorGraph() {
    return this.operatorGraph;
  }

  public void setOperatorGraph(Graph operatorGraph) {
    this.operatorGraph = operatorGraph;
  }

  public void unsetOperatorGraph() {
    this.operatorGraph = null;
  }

  // Returns true if field operatorGraph is set (has been asigned a value) and false otherwise
  public boolean isSetOperatorGraph() {
    return this.operatorGraph != null;
  }

  public int getOperatorListSize() {
    return (this.operatorList == null) ? 0 : this.operatorList.size();
  }

  public java.util.Iterator<Operator> getOperatorListIterator() {
    return (this.operatorList == null) ? null : this.operatorList.iterator();
  }

  public void addToOperatorList(Operator elem) {
    if (this.operatorList == null) {
      this.operatorList = new ArrayList<Operator>();
    }
    this.operatorList.add(elem);
  }

  public List<Operator> getOperatorList() {
    return this.operatorList;
  }

  public void setOperatorList(List<Operator> operatorList) {
    this.operatorList = operatorList;
  }

  public void unsetOperatorList() {
    this.operatorList = null;
  }

  // Returns true if field operatorList is set (has been asigned a value) and false otherwise
  public boolean isSetOperatorList() {
    return this.operatorList != null;
  }

  public boolean isDone() {
    return this.done;
  }

  public void setDone(boolean done) {
    this.done = done;
    this.__isset.done = true;
  }

  public void unsetDone() {
    this.__isset.done = false;
  }

  // Returns true if field done is set (has been asigned a value) and false otherwise
  public boolean isSetDone() {
    return this.__isset.done;
  }

  public boolean isStarted() {
    return this.started;
  }

  public void setStarted(boolean started) {
    this.started = started;
    this.__isset.started = true;
  }

  public void unsetStarted() {
    this.__isset.started = false;
  }

  // Returns true if field started is set (has been asigned a value) and false otherwise
  public boolean isSetStarted() {
    return this.__isset.started;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case TASKID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((String)value);
      }
      break;

    case TASKTYPE:
      if (value == null) {
        unsetTaskType();
      } else {
        setTaskType((Integer)value);
      }
      break;

    case TASKATTRIBUTES:
      if (value == null) {
        unsetTaskAttributes();
      } else {
        setTaskAttributes((Map<String,String>)value);
      }
      break;

    case TASKCOUNTERS:
      if (value == null) {
        unsetTaskCounters();
      } else {
        setTaskCounters((Map<String,Long>)value);
      }
      break;

    case OPERATORGRAPH:
      if (value == null) {
        unsetOperatorGraph();
      } else {
        setOperatorGraph((Graph)value);
      }
      break;

    case OPERATORLIST:
      if (value == null) {
        unsetOperatorList();
      } else {
        setOperatorList((List<Operator>)value);
      }
      break;

    case DONE:
      if (value == null) {
        unsetDone();
      } else {
        setDone((Boolean)value);
      }
      break;

    case STARTED:
      if (value == null) {
        unsetStarted();
      } else {
        setStarted((Boolean)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case TASKID:
      return getTaskId();

    case TASKTYPE:
      return getTaskType();

    case TASKATTRIBUTES:
      return getTaskAttributes();

    case TASKCOUNTERS:
      return getTaskCounters();

    case OPERATORGRAPH:
      return getOperatorGraph();

    case OPERATORLIST:
      return getOperatorList();

    case DONE:
      return new Boolean(isDone());

    case STARTED:
      return new Boolean(isStarted());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case TASKID:
      return isSetTaskId();
    case TASKTYPE:
      return isSetTaskType();
    case TASKATTRIBUTES:
      return isSetTaskAttributes();
    case TASKCOUNTERS:
      return isSetTaskCounters();
    case OPERATORGRAPH:
      return isSetOperatorGraph();
    case OPERATORLIST:
      return isSetOperatorList();
    case DONE:
      return isSetDone();
    case STARTED:
      return isSetStarted();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Task)
      return this.equals((Task)that);
    return false;
  }

  public boolean equals(Task that) {
    if (that == null)
      return false;

    boolean this_present_taskId = true && this.isSetTaskId();
    boolean that_present_taskId = true && that.isSetTaskId();
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (!this.taskId.equals(that.taskId))
        return false;
    }

    boolean this_present_taskType = true;
    boolean that_present_taskType = true;
    if (this_present_taskType || that_present_taskType) {
      if (!(this_present_taskType && that_present_taskType))
        return false;
      if (this.taskType != that.taskType)
        return false;
    }

    boolean this_present_taskAttributes = true && this.isSetTaskAttributes();
    boolean that_present_taskAttributes = true && that.isSetTaskAttributes();
    if (this_present_taskAttributes || that_present_taskAttributes) {
      if (!(this_present_taskAttributes && that_present_taskAttributes))
        return false;
      if (!this.taskAttributes.equals(that.taskAttributes))
        return false;
    }

    boolean this_present_taskCounters = true && this.isSetTaskCounters();
    boolean that_present_taskCounters = true && that.isSetTaskCounters();
    if (this_present_taskCounters || that_present_taskCounters) {
      if (!(this_present_taskCounters && that_present_taskCounters))
        return false;
      if (!this.taskCounters.equals(that.taskCounters))
        return false;
    }

    boolean this_present_operatorGraph = true && this.isSetOperatorGraph();
    boolean that_present_operatorGraph = true && that.isSetOperatorGraph();
    if (this_present_operatorGraph || that_present_operatorGraph) {
      if (!(this_present_operatorGraph && that_present_operatorGraph))
        return false;
      if (!this.operatorGraph.equals(that.operatorGraph))
        return false;
    }

    boolean this_present_operatorList = true && this.isSetOperatorList();
    boolean that_present_operatorList = true && that.isSetOperatorList();
    if (this_present_operatorList || that_present_operatorList) {
      if (!(this_present_operatorList && that_present_operatorList))
        return false;
      if (!this.operatorList.equals(that.operatorList))
        return false;
    }

    boolean this_present_done = true;
    boolean that_present_done = true;
    if (this_present_done || that_present_done) {
      if (!(this_present_done && that_present_done))
        return false;
      if (this.done != that.done)
        return false;
    }

    boolean this_present_started = true;
    boolean that_present_started = true;
    if (this_present_started || that_present_started) {
      if (!(this_present_started && that_present_started))
        return false;
      if (this.started != that.started)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case TASKID:
          if (field.type == TType.STRING) {
            this.taskId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TASKTYPE:
          if (field.type == TType.I32) {
            this.taskType = iprot.readI32();
            this.__isset.taskType = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TASKATTRIBUTES:
          if (field.type == TType.MAP) {
            {
              TMap _map22 = iprot.readMapBegin();
              this.taskAttributes = new HashMap<String,String>(2*_map22.size);
              for (int _i23 = 0; _i23 < _map22.size; ++_i23)
              {
                String _key24;
                String _val25;
                _key24 = iprot.readString();
                _val25 = iprot.readString();
                this.taskAttributes.put(_key24, _val25);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TASKCOUNTERS:
          if (field.type == TType.MAP) {
            {
              TMap _map26 = iprot.readMapBegin();
              this.taskCounters = new HashMap<String,Long>(2*_map26.size);
              for (int _i27 = 0; _i27 < _map26.size; ++_i27)
              {
                String _key28;
                long _val29;
                _key28 = iprot.readString();
                _val29 = iprot.readI64();
                this.taskCounters.put(_key28, _val29);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OPERATORGRAPH:
          if (field.type == TType.STRUCT) {
            this.operatorGraph = new Graph();
            this.operatorGraph.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OPERATORLIST:
          if (field.type == TType.LIST) {
            {
              TList _list30 = iprot.readListBegin();
              this.operatorList = new ArrayList<Operator>(_list30.size);
              for (int _i31 = 0; _i31 < _list30.size; ++_i31)
              {
                Operator _elem32;
                _elem32 = new Operator();
                _elem32.read(iprot);
                this.operatorList.add(_elem32);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DONE:
          if (field.type == TType.BOOL) {
            this.done = iprot.readBool();
            this.__isset.done = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STARTED:
          if (field.type == TType.BOOL) {
            this.started = iprot.readBool();
            this.__isset.started = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.taskId != null) {
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeString(this.taskId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
    oprot.writeI32(this.taskType);
    oprot.writeFieldEnd();
    if (this.taskAttributes != null) {
      oprot.writeFieldBegin(TASK_ATTRIBUTES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.taskAttributes.size()));
        for (Map.Entry<String, String> _iter33 : this.taskAttributes.entrySet())        {
          oprot.writeString(_iter33.getKey());
          oprot.writeString(_iter33.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.taskCounters != null) {
      oprot.writeFieldBegin(TASK_COUNTERS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.I64, this.taskCounters.size()));
        for (Map.Entry<String, Long> _iter34 : this.taskCounters.entrySet())        {
          oprot.writeString(_iter34.getKey());
          oprot.writeI64(_iter34.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.operatorGraph != null) {
      if (isSetOperatorGraph()) {
        oprot.writeFieldBegin(OPERATOR_GRAPH_FIELD_DESC);
        this.operatorGraph.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.operatorList != null) {
      if (isSetOperatorList()) {
        oprot.writeFieldBegin(OPERATOR_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.operatorList.size()));
          for (Operator _iter35 : this.operatorList)          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(DONE_FIELD_DESC);
    oprot.writeBool(this.done);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(STARTED_FIELD_DESC);
    oprot.writeBool(this.started);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Task(");
    boolean first = true;

    sb.append("taskId:");
    if (this.taskId == null) {
      sb.append("null");
    } else {
      sb.append(this.taskId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskType:");
    String taskType_name = TaskType.VALUES_TO_NAMES.get(this.taskType);
    if (taskType_name != null) {
      sb.append(taskType_name);
      sb.append(" (");
    }
    sb.append(this.taskType);
    if (taskType_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskAttributes:");
    if (this.taskAttributes == null) {
      sb.append("null");
    } else {
      sb.append(this.taskAttributes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskCounters:");
    if (this.taskCounters == null) {
      sb.append("null");
    } else {
      sb.append(this.taskCounters);
    }
    first = false;
    if (isSetOperatorGraph()) {
      if (!first) sb.append(", ");
      sb.append("operatorGraph:");
      if (this.operatorGraph == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorGraph);
      }
      first = false;
    }
    if (isSetOperatorList()) {
      if (!first) sb.append(", ");
      sb.append("operatorList:");
      if (this.operatorList == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorList);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("done:");
    sb.append(this.done);
    first = false;
    if (!first) sb.append(", ");
    sb.append("started:");
    sb.append(this.started);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetTaskType() && !TaskType.VALID_VALUES.contains(taskType)){
      throw new TProtocolException("The field 'taskType' has been assigned the invalid value " + taskType);
    }
  }

}

