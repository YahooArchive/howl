/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.ql.plan.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Operator implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Operator");
  private static final TField OPERATOR_ID_FIELD_DESC = new TField("operatorId", TType.STRING, (short)1);
  private static final TField OPERATOR_TYPE_FIELD_DESC = new TField("operatorType", TType.I32, (short)2);
  private static final TField OPERATOR_ATTRIBUTES_FIELD_DESC = new TField("operatorAttributes", TType.MAP, (short)3);
  private static final TField OPERATOR_COUNTERS_FIELD_DESC = new TField("operatorCounters", TType.MAP, (short)4);
  private static final TField DONE_FIELD_DESC = new TField("done", TType.BOOL, (short)5);
  private static final TField STARTED_FIELD_DESC = new TField("started", TType.BOOL, (short)6);

  private String operatorId;
  public static final int OPERATORID = 1;
  private int operatorType;
  public static final int OPERATORTYPE = 2;
  private Map<String,String> operatorAttributes;
  public static final int OPERATORATTRIBUTES = 3;
  private Map<String,Long> operatorCounters;
  public static final int OPERATORCOUNTERS = 4;
  private boolean done;
  public static final int DONE = 5;
  private boolean started;
  public static final int STARTED = 6;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean operatorType = false;
    public boolean done = false;
    public boolean started = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(OPERATORID, new FieldMetaData("operatorId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(OPERATORTYPE, new FieldMetaData("operatorType", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(OPERATORATTRIBUTES, new FieldMetaData("operatorAttributes", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.STRING))));
    put(OPERATORCOUNTERS, new FieldMetaData("operatorCounters", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.I64))));
    put(DONE, new FieldMetaData("done", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    put(STARTED, new FieldMetaData("started", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Operator.class, metaDataMap);
  }

  public Operator() {
  }

  public Operator(
    String operatorId,
    int operatorType,
    Map<String,String> operatorAttributes,
    Map<String,Long> operatorCounters,
    boolean done,
    boolean started)
  {
    this();
    this.operatorId = operatorId;
    this.operatorType = operatorType;
    this.__isset.operatorType = true;
    this.operatorAttributes = operatorAttributes;
    this.operatorCounters = operatorCounters;
    this.done = done;
    this.__isset.done = true;
    this.started = started;
    this.__isset.started = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Operator(Operator other) {
    if (other.isSetOperatorId()) {
      this.operatorId = other.operatorId;
    }
    __isset.operatorType = other.__isset.operatorType;
    this.operatorType = other.operatorType;
    if (other.isSetOperatorAttributes()) {
      Map<String,String> __this__operatorAttributes = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.operatorAttributes.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__operatorAttributes_copy_key = other_element_key;

        String __this__operatorAttributes_copy_value = other_element_value;

        __this__operatorAttributes.put(__this__operatorAttributes_copy_key, __this__operatorAttributes_copy_value);
      }
      this.operatorAttributes = __this__operatorAttributes;
    }
    if (other.isSetOperatorCounters()) {
      Map<String,Long> __this__operatorCounters = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.operatorCounters.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__operatorCounters_copy_key = other_element_key;

        Long __this__operatorCounters_copy_value = other_element_value;

        __this__operatorCounters.put(__this__operatorCounters_copy_key, __this__operatorCounters_copy_value);
      }
      this.operatorCounters = __this__operatorCounters;
    }
    __isset.done = other.__isset.done;
    this.done = other.done;
    __isset.started = other.__isset.started;
    this.started = other.started;
  }

  @Override
  public Operator clone() {
    return new Operator(this);
  }

  public String getOperatorId() {
    return this.operatorId;
  }

  public void setOperatorId(String operatorId) {
    this.operatorId = operatorId;
  }

  public void unsetOperatorId() {
    this.operatorId = null;
  }

  // Returns true if field operatorId is set (has been asigned a value) and false otherwise
  public boolean isSetOperatorId() {
    return this.operatorId != null;
  }

  public int getOperatorType() {
    return this.operatorType;
  }

  public void setOperatorType(int operatorType) {
    this.operatorType = operatorType;
    this.__isset.operatorType = true;
  }

  public void unsetOperatorType() {
    this.__isset.operatorType = false;
  }

  // Returns true if field operatorType is set (has been asigned a value) and false otherwise
  public boolean isSetOperatorType() {
    return this.__isset.operatorType;
  }

  public int getOperatorAttributesSize() {
    return (this.operatorAttributes == null) ? 0 : this.operatorAttributes.size();
  }

  public void putToOperatorAttributes(String key, String val) {
    if (this.operatorAttributes == null) {
      this.operatorAttributes = new HashMap<String,String>();
    }
    this.operatorAttributes.put(key, val);
  }

  public Map<String,String> getOperatorAttributes() {
    return this.operatorAttributes;
  }

  public void setOperatorAttributes(Map<String,String> operatorAttributes) {
    this.operatorAttributes = operatorAttributes;
  }

  public void unsetOperatorAttributes() {
    this.operatorAttributes = null;
  }

  // Returns true if field operatorAttributes is set (has been asigned a value) and false otherwise
  public boolean isSetOperatorAttributes() {
    return this.operatorAttributes != null;
  }

  public int getOperatorCountersSize() {
    return (this.operatorCounters == null) ? 0 : this.operatorCounters.size();
  }

  public void putToOperatorCounters(String key, long val) {
    if (this.operatorCounters == null) {
      this.operatorCounters = new HashMap<String,Long>();
    }
    this.operatorCounters.put(key, val);
  }

  public Map<String,Long> getOperatorCounters() {
    return this.operatorCounters;
  }

  public void setOperatorCounters(Map<String,Long> operatorCounters) {
    this.operatorCounters = operatorCounters;
  }

  public void unsetOperatorCounters() {
    this.operatorCounters = null;
  }

  // Returns true if field operatorCounters is set (has been asigned a value) and false otherwise
  public boolean isSetOperatorCounters() {
    return this.operatorCounters != null;
  }

  public boolean isDone() {
    return this.done;
  }

  public void setDone(boolean done) {
    this.done = done;
    this.__isset.done = true;
  }

  public void unsetDone() {
    this.__isset.done = false;
  }

  // Returns true if field done is set (has been asigned a value) and false otherwise
  public boolean isSetDone() {
    return this.__isset.done;
  }

  public boolean isStarted() {
    return this.started;
  }

  public void setStarted(boolean started) {
    this.started = started;
    this.__isset.started = true;
  }

  public void unsetStarted() {
    this.__isset.started = false;
  }

  // Returns true if field started is set (has been asigned a value) and false otherwise
  public boolean isSetStarted() {
    return this.__isset.started;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case OPERATORID:
      if (value == null) {
        unsetOperatorId();
      } else {
        setOperatorId((String)value);
      }
      break;

    case OPERATORTYPE:
      if (value == null) {
        unsetOperatorType();
      } else {
        setOperatorType((Integer)value);
      }
      break;

    case OPERATORATTRIBUTES:
      if (value == null) {
        unsetOperatorAttributes();
      } else {
        setOperatorAttributes((Map<String,String>)value);
      }
      break;

    case OPERATORCOUNTERS:
      if (value == null) {
        unsetOperatorCounters();
      } else {
        setOperatorCounters((Map<String,Long>)value);
      }
      break;

    case DONE:
      if (value == null) {
        unsetDone();
      } else {
        setDone((Boolean)value);
      }
      break;

    case STARTED:
      if (value == null) {
        unsetStarted();
      } else {
        setStarted((Boolean)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case OPERATORID:
      return getOperatorId();

    case OPERATORTYPE:
      return getOperatorType();

    case OPERATORATTRIBUTES:
      return getOperatorAttributes();

    case OPERATORCOUNTERS:
      return getOperatorCounters();

    case DONE:
      return new Boolean(isDone());

    case STARTED:
      return new Boolean(isStarted());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case OPERATORID:
      return isSetOperatorId();
    case OPERATORTYPE:
      return isSetOperatorType();
    case OPERATORATTRIBUTES:
      return isSetOperatorAttributes();
    case OPERATORCOUNTERS:
      return isSetOperatorCounters();
    case DONE:
      return isSetDone();
    case STARTED:
      return isSetStarted();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Operator)
      return this.equals((Operator)that);
    return false;
  }

  public boolean equals(Operator that) {
    if (that == null)
      return false;

    boolean this_present_operatorId = true && this.isSetOperatorId();
    boolean that_present_operatorId = true && that.isSetOperatorId();
    if (this_present_operatorId || that_present_operatorId) {
      if (!(this_present_operatorId && that_present_operatorId))
        return false;
      if (!this.operatorId.equals(that.operatorId))
        return false;
    }

    boolean this_present_operatorType = true;
    boolean that_present_operatorType = true;
    if (this_present_operatorType || that_present_operatorType) {
      if (!(this_present_operatorType && that_present_operatorType))
        return false;
      if (this.operatorType != that.operatorType)
        return false;
    }

    boolean this_present_operatorAttributes = true && this.isSetOperatorAttributes();
    boolean that_present_operatorAttributes = true && that.isSetOperatorAttributes();
    if (this_present_operatorAttributes || that_present_operatorAttributes) {
      if (!(this_present_operatorAttributes && that_present_operatorAttributes))
        return false;
      if (!this.operatorAttributes.equals(that.operatorAttributes))
        return false;
    }

    boolean this_present_operatorCounters = true && this.isSetOperatorCounters();
    boolean that_present_operatorCounters = true && that.isSetOperatorCounters();
    if (this_present_operatorCounters || that_present_operatorCounters) {
      if (!(this_present_operatorCounters && that_present_operatorCounters))
        return false;
      if (!this.operatorCounters.equals(that.operatorCounters))
        return false;
    }

    boolean this_present_done = true;
    boolean that_present_done = true;
    if (this_present_done || that_present_done) {
      if (!(this_present_done && that_present_done))
        return false;
      if (this.done != that.done)
        return false;
    }

    boolean this_present_started = true;
    boolean that_present_started = true;
    if (this_present_started || that_present_started) {
      if (!(this_present_started && that_present_started))
        return false;
      if (this.started != that.started)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case OPERATORID:
          if (field.type == TType.STRING) {
            this.operatorId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OPERATORTYPE:
          if (field.type == TType.I32) {
            this.operatorType = iprot.readI32();
            this.__isset.operatorType = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OPERATORATTRIBUTES:
          if (field.type == TType.MAP) {
            {
              TMap _map12 = iprot.readMapBegin();
              this.operatorAttributes = new HashMap<String,String>(2*_map12.size);
              for (int _i13 = 0; _i13 < _map12.size; ++_i13)
              {
                String _key14;
                String _val15;
                _key14 = iprot.readString();
                _val15 = iprot.readString();
                this.operatorAttributes.put(_key14, _val15);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OPERATORCOUNTERS:
          if (field.type == TType.MAP) {
            {
              TMap _map16 = iprot.readMapBegin();
              this.operatorCounters = new HashMap<String,Long>(2*_map16.size);
              for (int _i17 = 0; _i17 < _map16.size; ++_i17)
              {
                String _key18;
                long _val19;
                _key18 = iprot.readString();
                _val19 = iprot.readI64();
                this.operatorCounters.put(_key18, _val19);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DONE:
          if (field.type == TType.BOOL) {
            this.done = iprot.readBool();
            this.__isset.done = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STARTED:
          if (field.type == TType.BOOL) {
            this.started = iprot.readBool();
            this.__isset.started = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.operatorId != null) {
      oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
      oprot.writeString(this.operatorId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(OPERATOR_TYPE_FIELD_DESC);
    oprot.writeI32(this.operatorType);
    oprot.writeFieldEnd();
    if (this.operatorAttributes != null) {
      oprot.writeFieldBegin(OPERATOR_ATTRIBUTES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.operatorAttributes.size()));
        for (Map.Entry<String, String> _iter20 : this.operatorAttributes.entrySet())        {
          oprot.writeString(_iter20.getKey());
          oprot.writeString(_iter20.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.operatorCounters != null) {
      oprot.writeFieldBegin(OPERATOR_COUNTERS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.I64, this.operatorCounters.size()));
        for (Map.Entry<String, Long> _iter21 : this.operatorCounters.entrySet())        {
          oprot.writeString(_iter21.getKey());
          oprot.writeI64(_iter21.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(DONE_FIELD_DESC);
    oprot.writeBool(this.done);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(STARTED_FIELD_DESC);
    oprot.writeBool(this.started);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Operator(");
    boolean first = true;

    sb.append("operatorId:");
    if (this.operatorId == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorType:");
    String operatorType_name = OperatorType.VALUES_TO_NAMES.get(this.operatorType);
    if (operatorType_name != null) {
      sb.append(operatorType_name);
      sb.append(" (");
    }
    sb.append(this.operatorType);
    if (operatorType_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorAttributes:");
    if (this.operatorAttributes == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorAttributes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorCounters:");
    if (this.operatorCounters == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorCounters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("done:");
    sb.append(this.done);
    first = false;
    if (!first) sb.append(", ");
    sb.append("started:");
    sb.append(this.started);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetOperatorType() && !OperatorType.VALID_VALUES.contains(operatorType)){
      throw new TProtocolException("The field 'operatorType' has been assigned the invalid value " + operatorType);
    }
  }

}

