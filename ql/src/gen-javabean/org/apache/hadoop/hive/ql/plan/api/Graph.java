/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.ql.plan.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Graph implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Graph");
  private static final TField NODE_TYPE_FIELD_DESC = new TField("nodeType", TType.I32, (short)1);
  private static final TField ROOTS_FIELD_DESC = new TField("roots", TType.LIST, (short)2);
  private static final TField ADJACENCY_LIST_FIELD_DESC = new TField("adjacencyList", TType.LIST, (short)3);

  private int nodeType;
  public static final int NODETYPE = 1;
  private List<String> roots;
  public static final int ROOTS = 2;
  private List<Adjacency> adjacencyList;
  public static final int ADJACENCYLIST = 3;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean nodeType = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(NODETYPE, new FieldMetaData("nodeType", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(ROOTS, new FieldMetaData("roots", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    put(ADJACENCYLIST, new FieldMetaData("adjacencyList", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Adjacency.class))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Graph.class, metaDataMap);
  }

  public Graph() {
  }

  public Graph(
    int nodeType,
    List<String> roots,
    List<Adjacency> adjacencyList)
  {
    this();
    this.nodeType = nodeType;
    this.__isset.nodeType = true;
    this.roots = roots;
    this.adjacencyList = adjacencyList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Graph(Graph other) {
    __isset.nodeType = other.__isset.nodeType;
    this.nodeType = other.nodeType;
    if (other.isSetRoots()) {
      List<String> __this__roots = new ArrayList<String>();
      for (String other_element : other.roots) {
        __this__roots.add(other_element);
      }
      this.roots = __this__roots;
    }
    if (other.isSetAdjacencyList()) {
      List<Adjacency> __this__adjacencyList = new ArrayList<Adjacency>();
      for (Adjacency other_element : other.adjacencyList) {
        __this__adjacencyList.add(new Adjacency(other_element));
      }
      this.adjacencyList = __this__adjacencyList;
    }
  }

  @Override
  public Graph clone() {
    return new Graph(this);
  }

  public int getNodeType() {
    return this.nodeType;
  }

  public void setNodeType(int nodeType) {
    this.nodeType = nodeType;
    this.__isset.nodeType = true;
  }

  public void unsetNodeType() {
    this.__isset.nodeType = false;
  }

  // Returns true if field nodeType is set (has been asigned a value) and false otherwise
  public boolean isSetNodeType() {
    return this.__isset.nodeType;
  }

  public int getRootsSize() {
    return (this.roots == null) ? 0 : this.roots.size();
  }

  public java.util.Iterator<String> getRootsIterator() {
    return (this.roots == null) ? null : this.roots.iterator();
  }

  public void addToRoots(String elem) {
    if (this.roots == null) {
      this.roots = new ArrayList<String>();
    }
    this.roots.add(elem);
  }

  public List<String> getRoots() {
    return this.roots;
  }

  public void setRoots(List<String> roots) {
    this.roots = roots;
  }

  public void unsetRoots() {
    this.roots = null;
  }

  // Returns true if field roots is set (has been asigned a value) and false otherwise
  public boolean isSetRoots() {
    return this.roots != null;
  }

  public int getAdjacencyListSize() {
    return (this.adjacencyList == null) ? 0 : this.adjacencyList.size();
  }

  public java.util.Iterator<Adjacency> getAdjacencyListIterator() {
    return (this.adjacencyList == null) ? null : this.adjacencyList.iterator();
  }

  public void addToAdjacencyList(Adjacency elem) {
    if (this.adjacencyList == null) {
      this.adjacencyList = new ArrayList<Adjacency>();
    }
    this.adjacencyList.add(elem);
  }

  public List<Adjacency> getAdjacencyList() {
    return this.adjacencyList;
  }

  public void setAdjacencyList(List<Adjacency> adjacencyList) {
    this.adjacencyList = adjacencyList;
  }

  public void unsetAdjacencyList() {
    this.adjacencyList = null;
  }

  // Returns true if field adjacencyList is set (has been asigned a value) and false otherwise
  public boolean isSetAdjacencyList() {
    return this.adjacencyList != null;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case NODETYPE:
      if (value == null) {
        unsetNodeType();
      } else {
        setNodeType((Integer)value);
      }
      break;

    case ROOTS:
      if (value == null) {
        unsetRoots();
      } else {
        setRoots((List<String>)value);
      }
      break;

    case ADJACENCYLIST:
      if (value == null) {
        unsetAdjacencyList();
      } else {
        setAdjacencyList((List<Adjacency>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case NODETYPE:
      return getNodeType();

    case ROOTS:
      return getRoots();

    case ADJACENCYLIST:
      return getAdjacencyList();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case NODETYPE:
      return isSetNodeType();
    case ROOTS:
      return isSetRoots();
    case ADJACENCYLIST:
      return isSetAdjacencyList();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Graph)
      return this.equals((Graph)that);
    return false;
  }

  public boolean equals(Graph that) {
    if (that == null)
      return false;

    boolean this_present_nodeType = true;
    boolean that_present_nodeType = true;
    if (this_present_nodeType || that_present_nodeType) {
      if (!(this_present_nodeType && that_present_nodeType))
        return false;
      if (this.nodeType != that.nodeType)
        return false;
    }

    boolean this_present_roots = true && this.isSetRoots();
    boolean that_present_roots = true && that.isSetRoots();
    if (this_present_roots || that_present_roots) {
      if (!(this_present_roots && that_present_roots))
        return false;
      if (!this.roots.equals(that.roots))
        return false;
    }

    boolean this_present_adjacencyList = true && this.isSetAdjacencyList();
    boolean that_present_adjacencyList = true && that.isSetAdjacencyList();
    if (this_present_adjacencyList || that_present_adjacencyList) {
      if (!(this_present_adjacencyList && that_present_adjacencyList))
        return false;
      if (!this.adjacencyList.equals(that.adjacencyList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case NODETYPE:
          if (field.type == TType.I32) {
            this.nodeType = iprot.readI32();
            this.__isset.nodeType = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROOTS:
          if (field.type == TType.LIST) {
            {
              TList _list4 = iprot.readListBegin();
              this.roots = new ArrayList<String>(_list4.size);
              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
              {
                String _elem6;
                _elem6 = iprot.readString();
                this.roots.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ADJACENCYLIST:
          if (field.type == TType.LIST) {
            {
              TList _list7 = iprot.readListBegin();
              this.adjacencyList = new ArrayList<Adjacency>(_list7.size);
              for (int _i8 = 0; _i8 < _list7.size; ++_i8)
              {
                Adjacency _elem9;
                _elem9 = new Adjacency();
                _elem9.read(iprot);
                this.adjacencyList.add(_elem9);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
    oprot.writeI32(this.nodeType);
    oprot.writeFieldEnd();
    if (this.roots != null) {
      oprot.writeFieldBegin(ROOTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.roots.size()));
        for (String _iter10 : this.roots)        {
          oprot.writeString(_iter10);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.adjacencyList != null) {
      oprot.writeFieldBegin(ADJACENCY_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.adjacencyList.size()));
        for (Adjacency _iter11 : this.adjacencyList)        {
          _iter11.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Graph(");
    boolean first = true;

    sb.append("nodeType:");
    String nodeType_name = NodeType.VALUES_TO_NAMES.get(this.nodeType);
    if (nodeType_name != null) {
      sb.append(nodeType_name);
      sb.append(" (");
    }
    sb.append(this.nodeType);
    if (nodeType_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roots:");
    if (this.roots == null) {
      sb.append("null");
    } else {
      sb.append(this.roots);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adjacencyList:");
    if (this.adjacencyList == null) {
      sb.append("null");
    } else {
      sb.append(this.adjacencyList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetNodeType() && !NodeType.VALID_VALUES.contains(nodeType)){
      throw new TProtocolException("The field 'nodeType' has been assigned the invalid value " + nodeType);
    }
  }

}

