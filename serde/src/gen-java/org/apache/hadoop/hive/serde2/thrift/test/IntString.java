/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.serde2.thrift.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class IntString implements TBase, java.io.Serializable {
  public int myint;
  public String myString;
  public int underscore_int;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean myint = false;
    public boolean myString = false;
    public boolean underscore_int = false;
  }

  public IntString() {
  }

  public IntString(
    int myint,
    String myString,
    int underscore_int)
  {
    this();
    this.myint = myint;
    this.__isset.myint = true;
    this.myString = myString;
    this.__isset.myString = true;
    this.underscore_int = underscore_int;
    this.__isset.underscore_int = true;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IntString)
      return this.equals((IntString)that);
    return false;
  }

  public boolean equals(IntString that) {
    if (that == null)
      return false;

    boolean this_present_myint = true;
    boolean that_present_myint = true;
    if (this_present_myint || that_present_myint) {
      if (!(this_present_myint && that_present_myint))
        return false;
      if (this.myint != that.myint)
        return false;
    }

    boolean this_present_myString = true && (this.myString != null);
    boolean that_present_myString = true && (that.myString != null);
    if (this_present_myString || that_present_myString) {
      if (!(this_present_myString && that_present_myString))
        return false;
      if (!this.myString.equals(that.myString))
        return false;
    }

    boolean this_present_underscore_int = true;
    boolean that_present_underscore_int = true;
    if (this_present_underscore_int || that_present_underscore_int) {
      if (!(this_present_underscore_int && that_present_underscore_int))
        return false;
      if (this.underscore_int != that.underscore_int)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.I32) {
            this.myint = iprot.readI32();
            this.__isset.myint = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.STRING) {
            this.myString = iprot.readString();
            this.__isset.myString = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3:
          if (field.type == TType.I32) {
            this.underscore_int = iprot.readI32();
            this.__isset.underscore_int = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("IntString");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    field.name = "myint";
    field.type = TType.I32;
    field.id = 1;
    oprot.writeFieldBegin(field);
    oprot.writeI32(this.myint);
    oprot.writeFieldEnd();
    if (this.myString != null) {
      field.name = "myString";
      field.type = TType.STRING;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.myString);
      oprot.writeFieldEnd();
    }
    field.name = "underscore_int";
    field.type = TType.I32;
    field.id = 3;
    oprot.writeFieldBegin(field);
    oprot.writeI32(this.underscore_int);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("IntString(");
    sb.append("myint:");
    sb.append(this.myint);
    sb.append(",myString:");
    sb.append(this.myString);
    sb.append(",underscore_int:");
    sb.append(this.underscore_int);
    sb.append(")");
    return sb.toString();
  }

}

