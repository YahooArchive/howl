/* Generated By:JJTree&JavaCC: Do not edit this line. thrift_grammarConstants.java */
package org.apache.hadoop.hive.serde2.dynamic_type;

/**
 * Token literal values and constants. Generated by
 * org.javacc.parser.OtherFilesGen#start()
 */
public interface thrift_grammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int tok_const = 8;
  /** RegularExpression Id. */
  int tok_namespace = 9;
  /** RegularExpression Id. */
  int tok_cpp_namespace = 10;
  /** RegularExpression Id. */
  int tok_cpp_include = 11;
  /** RegularExpression Id. */
  int tok_cpp_type = 12;
  /** RegularExpression Id. */
  int tok_java_package = 13;
  /** RegularExpression Id. */
  int tok_cocoa_prefix = 14;
  /** RegularExpression Id. */
  int tok_csharp_namespace = 15;
  /** RegularExpression Id. */
  int tok_php_namespace = 16;
  /** RegularExpression Id. */
  int tok_py_module = 17;
  /** RegularExpression Id. */
  int tok_perl_package = 18;
  /** RegularExpression Id. */
  int tok_ruby_namespace = 19;
  /** RegularExpression Id. */
  int tok_smalltalk_category = 20;
  /** RegularExpression Id. */
  int tok_smalltalk_prefix = 21;
  /** RegularExpression Id. */
  int tok_xsd_all = 22;
  /** RegularExpression Id. */
  int tok_xsd_optional = 23;
  /** RegularExpression Id. */
  int tok_xsd_nillable = 24;
  /** RegularExpression Id. */
  int tok_xsd_namespace = 25;
  /** RegularExpression Id. */
  int tok_xsd_attrs = 26;
  /** RegularExpression Id. */
  int tok_include = 27;
  /** RegularExpression Id. */
  int tok_void = 28;
  /** RegularExpression Id. */
  int tok_bool = 29;
  /** RegularExpression Id. */
  int tok_byte = 30;
  /** RegularExpression Id. */
  int tok_i16 = 31;
  /** RegularExpression Id. */
  int tok_i32 = 32;
  /** RegularExpression Id. */
  int tok_i64 = 33;
  /** RegularExpression Id. */
  int tok_double = 34;
  /** RegularExpression Id. */
  int tok_string = 35;
  /** RegularExpression Id. */
  int tok_slist = 36;
  /** RegularExpression Id. */
  int tok_senum = 37;
  /** RegularExpression Id. */
  int tok_map = 38;
  /** RegularExpression Id. */
  int tok_list = 39;
  /** RegularExpression Id. */
  int tok_set = 40;
  /** RegularExpression Id. */
  int tok_async = 41;
  /** RegularExpression Id. */
  int tok_typedef = 42;
  /** RegularExpression Id. */
  int tok_struct = 43;
  /** RegularExpression Id. */
  int tok_exception = 44;
  /** RegularExpression Id. */
  int tok_extends = 45;
  /** RegularExpression Id. */
  int tok_throws = 46;
  /** RegularExpression Id. */
  int tok_service = 47;
  /** RegularExpression Id. */
  int tok_enum = 48;
  /** RegularExpression Id. */
  int tok_required = 49;
  /** RegularExpression Id. */
  int tok_optional = 50;
  /** RegularExpression Id. */
  int tok_skip = 51;
  /** RegularExpression Id. */
  int tok_int_constant = 52;
  /** RegularExpression Id. */
  int tok_double_constant = 53;
  /** RegularExpression Id. */
  int IDENTIFIER = 54;
  /** RegularExpression Id. */
  int LETTER = 55;
  /** RegularExpression Id. */
  int DIGIT = 56;
  /** RegularExpression Id. */
  int tok_literal = 57;
  /** RegularExpression Id. */
  int tok_st_identifier = 58;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {"<EOF>", "\" \"", "\"\\t\"", "\"\\n\"", "\"\\r\"",
      "<token of kind 5>", "<token of kind 6>", "<token of kind 7>",
      "\"const\"", "\"namespace\"", "\"cpp_namespace\"", "\"cpp_include\"",
      "\"cpp_type\"", "\"java_package\"", "\"cocoa_prefix\"",
      "\"csharp_namespace\"", "\"php_namespace\"", "\"py_module\"",
      "\"perl_package\"", "\"ruby_namespace\"", "\"smalltalk_category\"",
      "\"smalltalk_prefix\"", "\"xsd_all\"", "\"xsd_optional\"",
      "\"xsd_nillable\"", "\"xsd_namespace\"", "\"xsd_attrs\"", "\"include\"",
      "\"void\"", "\"bool\"", "\"byte\"", "\"i16\"", "\"i32\"", "\"i64\"",
      "\"double\"", "\"string\"", "\"slist\"", "\"senum\"", "\"map\"",
      "\"list\"", "\"set\"", "\"async\"", "\"typedef\"", "\"struct\"",
      "\"exception\"", "\"extends\"", "\"throws\"", "\"service\"", "\"enum\"",
      "\"required\"", "\"optional\"", "\"skip\"", "<tok_int_constant>",
      "<tok_double_constant>", "<IDENTIFIER>", "<LETTER>", "<DIGIT>",
      "<tok_literal>", "<tok_st_identifier>", "\",\"", "\";\"", "\"{\"",
      "\"}\"", "\"=\"", "\"[\"", "\"]\"", "\":\"", "\"(\"", "\")\"", "\"<\"",
      "\">\"",};

}
