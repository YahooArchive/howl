/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef FacebookService_H
#define FacebookService_H

#include <TProcessor.h>
#include "fb303_types.h"

namespace facebook { namespace fb303 {

class FacebookServiceIf {
 public:
  virtual ~FacebookServiceIf() {}
  virtual void getName(std::string& _return) = 0;
  virtual void getVersion(std::string& _return) = 0;
  virtual fb_status getStatus() = 0;
  virtual void getStatusDetails(std::string& _return) = 0;
  virtual void getCounters(std::map<std::string, int64_t> & _return) = 0;
  virtual int64_t getCounter(const std::string& key) = 0;
  virtual void setOption(const std::string& key, const std::string& value) = 0;
  virtual void getOption(std::string& _return, const std::string& key) = 0;
  virtual void getOptions(std::map<std::string, std::string> & _return) = 0;
  virtual void getCpuProfile(std::string& _return, const int32_t profileDurationInSec) = 0;
  virtual int64_t aliveSince() = 0;
  virtual void reinitialize() = 0;
  virtual void shutdown() = 0;
};

class FacebookServiceNull : virtual public FacebookServiceIf {
 public:
  virtual ~FacebookServiceNull() {}
  void getName(std::string& /* _return */) {
    return;
  }
  void getVersion(std::string& /* _return */) {
    return;
  }
  fb_status getStatus() {
    fb_status _return = (fb_status)0;
    return _return;
  }
  void getStatusDetails(std::string& /* _return */) {
    return;
  }
  void getCounters(std::map<std::string, int64_t> & /* _return */) {
    return;
  }
  int64_t getCounter(const std::string& /* key */) {
    int64_t _return = 0;
    return _return;
  }
  void setOption(const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void getOption(std::string& /* _return */, const std::string& /* key */) {
    return;
  }
  void getOptions(std::map<std::string, std::string> & /* _return */) {
    return;
  }
  void getCpuProfile(std::string& /* _return */, const int32_t /* profileDurationInSec */) {
    return;
  }
  int64_t aliveSince() {
    int64_t _return = 0;
    return _return;
  }
  void reinitialize() {
    return;
  }
  void shutdown() {
    return;
  }
};

class FacebookService_getName_args {
 public:

  FacebookService_getName_args() {
  }

  virtual ~FacebookService_getName_args() throw() {}


  bool operator == (const FacebookService_getName_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_getName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getName_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getName_pargs {
 public:


  virtual ~FacebookService_getName_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getName_result {
 public:

  FacebookService_getName_result() : success("") {
  }

  virtual ~FacebookService_getName_result() throw() {}

  std::string success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const FacebookService_getName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getName_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getName_presult {
 public:


  virtual ~FacebookService_getName_presult() throw() {}

  std::string* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class FacebookService_getVersion_args {
 public:

  FacebookService_getVersion_args() {
  }

  virtual ~FacebookService_getVersion_args() throw() {}


  bool operator == (const FacebookService_getVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_getVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getVersion_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getVersion_pargs {
 public:


  virtual ~FacebookService_getVersion_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getVersion_result {
 public:

  FacebookService_getVersion_result() : success("") {
  }

  virtual ~FacebookService_getVersion_result() throw() {}

  std::string success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const FacebookService_getVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getVersion_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getVersion_presult {
 public:


  virtual ~FacebookService_getVersion_presult() throw() {}

  std::string* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class FacebookService_getStatus_args {
 public:

  FacebookService_getStatus_args() {
  }

  virtual ~FacebookService_getStatus_args() throw() {}


  bool operator == (const FacebookService_getStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_getStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getStatus_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getStatus_pargs {
 public:


  virtual ~FacebookService_getStatus_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getStatus_result {
 public:

  FacebookService_getStatus_result() {
  }

  virtual ~FacebookService_getStatus_result() throw() {}

  fb_status success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const FacebookService_getStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getStatus_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getStatus_presult {
 public:


  virtual ~FacebookService_getStatus_presult() throw() {}

  fb_status* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class FacebookService_getStatusDetails_args {
 public:

  FacebookService_getStatusDetails_args() {
  }

  virtual ~FacebookService_getStatusDetails_args() throw() {}


  bool operator == (const FacebookService_getStatusDetails_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_getStatusDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getStatusDetails_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getStatusDetails_pargs {
 public:


  virtual ~FacebookService_getStatusDetails_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getStatusDetails_result {
 public:

  FacebookService_getStatusDetails_result() : success("") {
  }

  virtual ~FacebookService_getStatusDetails_result() throw() {}

  std::string success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const FacebookService_getStatusDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getStatusDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getStatusDetails_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getStatusDetails_presult {
 public:


  virtual ~FacebookService_getStatusDetails_presult() throw() {}

  std::string* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class FacebookService_getCounters_args {
 public:

  FacebookService_getCounters_args() {
  }

  virtual ~FacebookService_getCounters_args() throw() {}


  bool operator == (const FacebookService_getCounters_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_getCounters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getCounters_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getCounters_pargs {
 public:


  virtual ~FacebookService_getCounters_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getCounters_result {
 public:

  FacebookService_getCounters_result() {
  }

  virtual ~FacebookService_getCounters_result() throw() {}

  std::map<std::string, int64_t>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const FacebookService_getCounters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getCounters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getCounters_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getCounters_presult {
 public:


  virtual ~FacebookService_getCounters_presult() throw() {}

  std::map<std::string, int64_t> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class FacebookService_getCounter_args {
 public:

  FacebookService_getCounter_args() : key("") {
  }

  virtual ~FacebookService_getCounter_args() throw() {}

  std::string key;

  struct __isset {
    __isset() : key(false) {}
    bool key;
  } __isset;

  bool operator == (const FacebookService_getCounter_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getCounter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getCounter_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getCounter_pargs {
 public:


  virtual ~FacebookService_getCounter_pargs() throw() {}

  const std::string* key;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getCounter_result {
 public:

  FacebookService_getCounter_result() : success(0) {
  }

  virtual ~FacebookService_getCounter_result() throw() {}

  int64_t success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const FacebookService_getCounter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getCounter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getCounter_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getCounter_presult {
 public:


  virtual ~FacebookService_getCounter_presult() throw() {}

  int64_t* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class FacebookService_setOption_args {
 public:

  FacebookService_setOption_args() : key(""), value("") {
  }

  virtual ~FacebookService_setOption_args() throw() {}

  std::string key;
  std::string value;

  struct __isset {
    __isset() : key(false), value(false) {}
    bool key;
    bool value;
  } __isset;

  bool operator == (const FacebookService_setOption_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const FacebookService_setOption_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_setOption_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_setOption_pargs {
 public:


  virtual ~FacebookService_setOption_pargs() throw() {}

  const std::string* key;
  const std::string* value;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_setOption_result {
 public:

  FacebookService_setOption_result() {
  }

  virtual ~FacebookService_setOption_result() throw() {}


  bool operator == (const FacebookService_setOption_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_setOption_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_setOption_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_setOption_presult {
 public:


  virtual ~FacebookService_setOption_presult() throw() {}


  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class FacebookService_getOption_args {
 public:

  FacebookService_getOption_args() : key("") {
  }

  virtual ~FacebookService_getOption_args() throw() {}

  std::string key;

  struct __isset {
    __isset() : key(false) {}
    bool key;
  } __isset;

  bool operator == (const FacebookService_getOption_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getOption_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getOption_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getOption_pargs {
 public:


  virtual ~FacebookService_getOption_pargs() throw() {}

  const std::string* key;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getOption_result {
 public:

  FacebookService_getOption_result() : success("") {
  }

  virtual ~FacebookService_getOption_result() throw() {}

  std::string success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const FacebookService_getOption_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getOption_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getOption_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getOption_presult {
 public:


  virtual ~FacebookService_getOption_presult() throw() {}

  std::string* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class FacebookService_getOptions_args {
 public:

  FacebookService_getOptions_args() {
  }

  virtual ~FacebookService_getOptions_args() throw() {}


  bool operator == (const FacebookService_getOptions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_getOptions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getOptions_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getOptions_pargs {
 public:


  virtual ~FacebookService_getOptions_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getOptions_result {
 public:

  FacebookService_getOptions_result() {
  }

  virtual ~FacebookService_getOptions_result() throw() {}

  std::map<std::string, std::string>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const FacebookService_getOptions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getOptions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getOptions_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getOptions_presult {
 public:


  virtual ~FacebookService_getOptions_presult() throw() {}

  std::map<std::string, std::string> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class FacebookService_getCpuProfile_args {
 public:

  FacebookService_getCpuProfile_args() : profileDurationInSec(0) {
  }

  virtual ~FacebookService_getCpuProfile_args() throw() {}

  int32_t profileDurationInSec;

  struct __isset {
    __isset() : profileDurationInSec(false) {}
    bool profileDurationInSec;
  } __isset;

  bool operator == (const FacebookService_getCpuProfile_args & rhs) const
  {
    if (!(profileDurationInSec == rhs.profileDurationInSec))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getCpuProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getCpuProfile_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getCpuProfile_pargs {
 public:


  virtual ~FacebookService_getCpuProfile_pargs() throw() {}

  const int32_t* profileDurationInSec;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getCpuProfile_result {
 public:

  FacebookService_getCpuProfile_result() : success("") {
  }

  virtual ~FacebookService_getCpuProfile_result() throw() {}

  std::string success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const FacebookService_getCpuProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getCpuProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getCpuProfile_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_getCpuProfile_presult {
 public:


  virtual ~FacebookService_getCpuProfile_presult() throw() {}

  std::string* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class FacebookService_aliveSince_args {
 public:

  FacebookService_aliveSince_args() {
  }

  virtual ~FacebookService_aliveSince_args() throw() {}


  bool operator == (const FacebookService_aliveSince_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_aliveSince_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_aliveSince_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_aliveSince_pargs {
 public:


  virtual ~FacebookService_aliveSince_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_aliveSince_result {
 public:

  FacebookService_aliveSince_result() : success(0) {
  }

  virtual ~FacebookService_aliveSince_result() throw() {}

  int64_t success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const FacebookService_aliveSince_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_aliveSince_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_aliveSince_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_aliveSince_presult {
 public:


  virtual ~FacebookService_aliveSince_presult() throw() {}

  int64_t* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class FacebookService_reinitialize_args {
 public:

  FacebookService_reinitialize_args() {
  }

  virtual ~FacebookService_reinitialize_args() throw() {}


  bool operator == (const FacebookService_reinitialize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_reinitialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_reinitialize_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_reinitialize_pargs {
 public:


  virtual ~FacebookService_reinitialize_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_shutdown_args {
 public:

  FacebookService_shutdown_args() {
  }

  virtual ~FacebookService_shutdown_args() throw() {}


  bool operator == (const FacebookService_shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_shutdown_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookService_shutdown_pargs {
 public:


  virtual ~FacebookService_shutdown_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class FacebookServiceClient : virtual public FacebookServiceIf {
 public:
  FacebookServiceClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  FacebookServiceClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getName(std::string& _return);
  void send_getName();
  void recv_getName(std::string& _return);
  void getVersion(std::string& _return);
  void send_getVersion();
  void recv_getVersion(std::string& _return);
  fb_status getStatus();
  void send_getStatus();
  fb_status recv_getStatus();
  void getStatusDetails(std::string& _return);
  void send_getStatusDetails();
  void recv_getStatusDetails(std::string& _return);
  void getCounters(std::map<std::string, int64_t> & _return);
  void send_getCounters();
  void recv_getCounters(std::map<std::string, int64_t> & _return);
  int64_t getCounter(const std::string& key);
  void send_getCounter(const std::string& key);
  int64_t recv_getCounter();
  void setOption(const std::string& key, const std::string& value);
  void send_setOption(const std::string& key, const std::string& value);
  void recv_setOption();
  void getOption(std::string& _return, const std::string& key);
  void send_getOption(const std::string& key);
  void recv_getOption(std::string& _return);
  void getOptions(std::map<std::string, std::string> & _return);
  void send_getOptions();
  void recv_getOptions(std::map<std::string, std::string> & _return);
  void getCpuProfile(std::string& _return, const int32_t profileDurationInSec);
  void send_getCpuProfile(const int32_t profileDurationInSec);
  void recv_getCpuProfile(std::string& _return);
  int64_t aliveSince();
  void send_aliveSince();
  int64_t recv_aliveSince();
  void reinitialize();
  void send_reinitialize();
  void shutdown();
  void send_shutdown();
 protected:
  boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
};

class FacebookServiceProcessor : virtual public apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<FacebookServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (FacebookServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*)> processMap_;
  void process_getName(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getVersion(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getStatus(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getStatusDetails(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getCounters(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getCounter(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_setOption(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getOption(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getOptions(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getCpuProfile(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_aliveSince(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_reinitialize(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_shutdown(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
 public:
  FacebookServiceProcessor(boost::shared_ptr<FacebookServiceIf> iface) :
    iface_(iface) {
    processMap_["getName"] = &FacebookServiceProcessor::process_getName;
    processMap_["getVersion"] = &FacebookServiceProcessor::process_getVersion;
    processMap_["getStatus"] = &FacebookServiceProcessor::process_getStatus;
    processMap_["getStatusDetails"] = &FacebookServiceProcessor::process_getStatusDetails;
    processMap_["getCounters"] = &FacebookServiceProcessor::process_getCounters;
    processMap_["getCounter"] = &FacebookServiceProcessor::process_getCounter;
    processMap_["setOption"] = &FacebookServiceProcessor::process_setOption;
    processMap_["getOption"] = &FacebookServiceProcessor::process_getOption;
    processMap_["getOptions"] = &FacebookServiceProcessor::process_getOptions;
    processMap_["getCpuProfile"] = &FacebookServiceProcessor::process_getCpuProfile;
    processMap_["aliveSince"] = &FacebookServiceProcessor::process_aliveSince;
    processMap_["reinitialize"] = &FacebookServiceProcessor::process_reinitialize;
    processMap_["shutdown"] = &FacebookServiceProcessor::process_shutdown;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot);
  virtual ~FacebookServiceProcessor() {}
};

class FacebookServiceMultiface : virtual public FacebookServiceIf {
 public:
  FacebookServiceMultiface(std::vector<boost::shared_ptr<FacebookServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FacebookServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FacebookServiceIf> > ifaces_;
  FacebookServiceMultiface() {}
  void add(boost::shared_ptr<FacebookServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getName(std::string& _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getName(_return);
        return;
      } else {
        ifaces_[i]->getName(_return);
      }
    }
  }

  void getVersion(std::string& _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getVersion(_return);
        return;
      } else {
        ifaces_[i]->getVersion(_return);
      }
    }
  }

  fb_status getStatus() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getStatus();
      } else {
        ifaces_[i]->getStatus();
      }
    }
  }

  void getStatusDetails(std::string& _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getStatusDetails(_return);
        return;
      } else {
        ifaces_[i]->getStatusDetails(_return);
      }
    }
  }

  void getCounters(std::map<std::string, int64_t> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getCounters(_return);
        return;
      } else {
        ifaces_[i]->getCounters(_return);
      }
    }
  }

  int64_t getCounter(const std::string& key) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getCounter(key);
      } else {
        ifaces_[i]->getCounter(key);
      }
    }
  }

  void setOption(const std::string& key, const std::string& value) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->setOption(key, value);
    }
  }

  void getOption(std::string& _return, const std::string& key) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getOption(_return, key);
        return;
      } else {
        ifaces_[i]->getOption(_return, key);
      }
    }
  }

  void getOptions(std::map<std::string, std::string> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getOptions(_return);
        return;
      } else {
        ifaces_[i]->getOptions(_return);
      }
    }
  }

  void getCpuProfile(std::string& _return, const int32_t profileDurationInSec) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getCpuProfile(_return, profileDurationInSec);
        return;
      } else {
        ifaces_[i]->getCpuProfile(_return, profileDurationInSec);
      }
    }
  }

  int64_t aliveSince() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->aliveSince();
      } else {
        ifaces_[i]->aliveSince();
      }
    }
  }

  void reinitialize() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->reinitialize();
    }
  }

  void shutdown() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->shutdown();
    }
  }

};

}} // namespace

#endif
