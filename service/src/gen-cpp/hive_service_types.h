/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef hive_service_TYPES_H
#define hive_service_TYPES_H

#include <Thrift.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "fb303_types.h"
#include "hive_metastore_types.h"


namespace Apache { namespace Hadoop { namespace Hive {

enum JobTrackerState {
  INITIALIZING = 1,
  RUNNING = 2
};

class HiveClusterStatus {
 public:

  static const char* ascii_fingerprint; // = "D514EDCFFC86F64A2E924DCD16D4FAD8";
  static const uint8_t binary_fingerprint[16]; // = {0xD5,0x14,0xED,0xCF,0xFC,0x86,0xF6,0x4A,0x2E,0x92,0x4D,0xCD,0x16,0xD4,0xFA,0xD8};

  HiveClusterStatus() : taskTrackers(0), mapTasks(0), reduceTasks(0), maxMapTasks(0), maxReduceTasks(0) {
  }

  virtual ~HiveClusterStatus() throw() {}

  int32_t taskTrackers;
  int32_t mapTasks;
  int32_t reduceTasks;
  int32_t maxMapTasks;
  int32_t maxReduceTasks;
  JobTrackerState state;

  struct __isset {
    __isset() : taskTrackers(false), mapTasks(false), reduceTasks(false), maxMapTasks(false), maxReduceTasks(false), state(false) {}
    bool taskTrackers;
    bool mapTasks;
    bool reduceTasks;
    bool maxMapTasks;
    bool maxReduceTasks;
    bool state;
  } __isset;

  bool operator == (const HiveClusterStatus & rhs) const
  {
    if (!(taskTrackers == rhs.taskTrackers))
      return false;
    if (!(mapTasks == rhs.mapTasks))
      return false;
    if (!(reduceTasks == rhs.reduceTasks))
      return false;
    if (!(maxMapTasks == rhs.maxMapTasks))
      return false;
    if (!(maxReduceTasks == rhs.maxReduceTasks))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const HiveClusterStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HiveClusterStatus & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HiveServerException : public apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  HiveServerException() : message("") {
  }

  virtual ~HiveServerException() throw() {}

  std::string message;

  struct __isset {
    __isset() : message(false) {}
    bool message;
  } __isset;

  bool operator == (const HiveServerException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const HiveServerException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HiveServerException & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

}}} // namespace

#endif
