/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "hive_service_types.h"

namespace Apache { namespace Hadoop { namespace Hive {

const char* HiveClusterStatus::ascii_fingerprint = "D514EDCFFC86F64A2E924DCD16D4FAD8";
const uint8_t HiveClusterStatus::binary_fingerprint[16] = {0xD5,0x14,0xED,0xCF,0xFC,0x86,0xF6,0x4A,0x2E,0x92,0x4D,0xCD,0x16,0xD4,0xFA,0xD8};

uint32_t HiveClusterStatus::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->taskTrackers);
          this->__isset.taskTrackers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mapTasks);
          this->__isset.mapTasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reduceTasks);
          this->__isset.reduceTasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxMapTasks);
          this->__isset.maxMapTasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxReduceTasks);
          this->__isset.maxReduceTasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->state = (JobTrackerState)ecast0;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HiveClusterStatus::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HiveClusterStatus");
  xfer += oprot->writeFieldBegin("taskTrackers", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->taskTrackers);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("mapTasks", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->mapTasks);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("reduceTasks", apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->reduceTasks);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("maxMapTasks", apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->maxMapTasks);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("maxReduceTasks", apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->maxReduceTasks);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("state", apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* HiveServerException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t HiveServerException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t HiveServerException::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HiveServerException::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HiveServerException");
  xfer += oprot->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}}} // namespace
