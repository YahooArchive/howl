/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.service;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class ThriftHive {

  public interface Iface extends org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface {

    public void execute(String query) throws HiveServerException, TException;

    public String fetchOne() throws HiveServerException, TException;

    public List<String> fetchN(int numRows) throws HiveServerException, TException;

    public List<String> fetchAll() throws HiveServerException, TException;

    public org.apache.hadoop.hive.metastore.api.Schema getSchema() throws HiveServerException, TException;

  }

  public static class Client extends org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      super(iprot, oprot);
    }

    public void execute(String query) throws HiveServerException, TException
    {
      send_execute(query);
      recv_execute();
    }

    public void send_execute(String query) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("execute", TMessageType.CALL, seqid_));
      execute_args args = new execute_args();
      args.query = query;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_execute() throws HiveServerException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      execute_result result = new execute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.ex) {
        throw result.ex;
      }
      return;
    }

    public String fetchOne() throws HiveServerException, TException
    {
      send_fetchOne();
      return recv_fetchOne();
    }

    public void send_fetchOne() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("fetchOne", TMessageType.CALL, seqid_));
      fetchOne_args args = new fetchOne_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_fetchOne() throws HiveServerException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      fetchOne_result result = new fetchOne_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.ex) {
        throw result.ex;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "fetchOne failed: unknown result");
    }

    public List<String> fetchN(int numRows) throws HiveServerException, TException
    {
      send_fetchN(numRows);
      return recv_fetchN();
    }

    public void send_fetchN(int numRows) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("fetchN", TMessageType.CALL, seqid_));
      fetchN_args args = new fetchN_args();
      args.numRows = numRows;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_fetchN() throws HiveServerException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      fetchN_result result = new fetchN_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.ex) {
        throw result.ex;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "fetchN failed: unknown result");
    }

    public List<String> fetchAll() throws HiveServerException, TException
    {
      send_fetchAll();
      return recv_fetchAll();
    }

    public void send_fetchAll() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("fetchAll", TMessageType.CALL, seqid_));
      fetchAll_args args = new fetchAll_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_fetchAll() throws HiveServerException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      fetchAll_result result = new fetchAll_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.ex) {
        throw result.ex;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "fetchAll failed: unknown result");
    }

    public org.apache.hadoop.hive.metastore.api.Schema getSchema() throws HiveServerException, TException
    {
      send_getSchema();
      return recv_getSchema();
    }

    public void send_getSchema() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSchema", TMessageType.CALL, seqid_));
      getSchema_args args = new getSchema_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public org.apache.hadoop.hive.metastore.api.Schema recv_getSchema() throws HiveServerException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getSchema_result result = new getSchema_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.ex) {
        throw result.ex;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSchema failed: unknown result");
    }

  }
  public static class Processor extends org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Processor implements TProcessor {
    public Processor(Iface iface)
    {
      super(iface);
      iface_ = iface;
      processMap_.put("execute", new execute());
      processMap_.put("fetchOne", new fetchOne());
      processMap_.put("fetchN", new fetchN());
      processMap_.put("fetchAll", new fetchAll());
      processMap_.put("getSchema", new getSchema());
    }

    private Iface iface_;

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class execute implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        execute_args args = new execute_args();
        args.read(iprot);
        iprot.readMessageEnd();
        execute_result result = new execute_result();
        try {
          iface_.execute(args.query);
        } catch (HiveServerException ex) {
          result.ex = ex;
          result.__isset.ex = true;
        }
        oprot.writeMessageBegin(new TMessage("execute", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class fetchOne implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        fetchOne_args args = new fetchOne_args();
        args.read(iprot);
        iprot.readMessageEnd();
        fetchOne_result result = new fetchOne_result();
        try {
          result.success = iface_.fetchOne();
          result.__isset.success = true;
        } catch (HiveServerException ex) {
          result.ex = ex;
          result.__isset.ex = true;
        }
        oprot.writeMessageBegin(new TMessage("fetchOne", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class fetchN implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        fetchN_args args = new fetchN_args();
        args.read(iprot);
        iprot.readMessageEnd();
        fetchN_result result = new fetchN_result();
        try {
          result.success = iface_.fetchN(args.numRows);
          result.__isset.success = true;
        } catch (HiveServerException ex) {
          result.ex = ex;
          result.__isset.ex = true;
        }
        oprot.writeMessageBegin(new TMessage("fetchN", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class fetchAll implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        fetchAll_args args = new fetchAll_args();
        args.read(iprot);
        iprot.readMessageEnd();
        fetchAll_result result = new fetchAll_result();
        try {
          result.success = iface_.fetchAll();
          result.__isset.success = true;
        } catch (HiveServerException ex) {
          result.ex = ex;
          result.__isset.ex = true;
        }
        oprot.writeMessageBegin(new TMessage("fetchAll", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSchema implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSchema_args args = new getSchema_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getSchema_result result = new getSchema_result();
        try {
          result.success = iface_.getSchema();
          result.__isset.success = true;
        } catch (HiveServerException ex) {
          result.ex = ex;
          result.__isset.ex = true;
        }
        oprot.writeMessageBegin(new TMessage("getSchema", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class execute_args implements TBase, java.io.Serializable   {
    private String query;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean query = false;
    }

    public execute_args() {
    }

    public execute_args(
      String query)
    {
      this();
      this.query = query;
      this.__isset.query = true;
    }

    public String getQuery() {
      return this.query;
    }

    public void setQuery(String query) {
      this.query = query;
      this.__isset.query = true;
    }

    public void unsetQuery() {
      this.__isset.query = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execute_args)
        return this.equals((execute_args)that);
      return false;
    }

    public boolean equals(execute_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && (this.query != null);
      boolean that_present_query = true && (that.query != null);
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.query = iprot.readString();
              this.__isset.query = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("execute_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.query != null) {
        field.name = "query";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.query);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("execute_args(");
      sb.append("query:");
      sb.append(this.query);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class execute_result implements TBase, java.io.Serializable   {
    private HiveServerException ex;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean ex = false;
    }

    public execute_result() {
    }

    public execute_result(
      HiveServerException ex)
    {
      this();
      this.ex = ex;
      this.__isset.ex = true;
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
      this.__isset.ex = true;
    }

    public void unsetEx() {
      this.ex = null;
      this.__isset.ex = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execute_result)
        return this.equals((execute_result)that);
      return false;
    }

    public boolean equals(execute_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && (this.ex != null);
      boolean that_present_ex = true && (that.ex != null);
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRUCT) {
              this.ex = new HiveServerException();
              this.ex.read(iprot);
              this.__isset.ex = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("execute_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.ex) {
        if (this.ex != null) {
          field.name = "ex";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.ex.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("execute_result(");
      sb.append("ex:");
      sb.append(this.ex);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class fetchOne_args implements TBase, java.io.Serializable   {
    public fetchOne_args() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchOne_args)
        return this.equals((fetchOne_args)that);
      return false;
    }

    public boolean equals(fetchOne_args that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("fetchOne_args");
      oprot.writeStructBegin(struct);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("fetchOne_args(");
      sb.append(")");
      return sb.toString();
    }

  }

  public static class fetchOne_result implements TBase, java.io.Serializable   {
    private String success;
    private HiveServerException ex;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean ex = false;
    }

    public fetchOne_result() {
    }

    public fetchOne_result(
      String success,
      HiveServerException ex)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.ex = ex;
      this.__isset.ex = true;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
      this.__isset.ex = true;
    }

    public void unsetEx() {
      this.ex = null;
      this.__isset.ex = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchOne_result)
        return this.equals((fetchOne_result)that);
      return false;
    }

    public boolean equals(fetchOne_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && (this.ex != null);
      boolean that_present_ex = true && (that.ex != null);
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.ex = new HiveServerException();
              this.ex.read(iprot);
              this.__isset.ex = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("fetchOne_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRING;
          field.id = 0;
          oprot.writeFieldBegin(field);
          oprot.writeString(this.success);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.ex) {
        if (this.ex != null) {
          field.name = "ex";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.ex.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("fetchOne_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",ex:");
      sb.append(this.ex);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class fetchN_args implements TBase, java.io.Serializable   {
    private int numRows;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean numRows = false;
    }

    public fetchN_args() {
    }

    public fetchN_args(
      int numRows)
    {
      this();
      this.numRows = numRows;
      this.__isset.numRows = true;
    }

    public int getNumRows() {
      return this.numRows;
    }

    public void setNumRows(int numRows) {
      this.numRows = numRows;
      this.__isset.numRows = true;
    }

    public void unsetNumRows() {
      this.__isset.numRows = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchN_args)
        return this.equals((fetchN_args)that);
      return false;
    }

    public boolean equals(fetchN_args that) {
      if (that == null)
        return false;

      boolean this_present_numRows = true;
      boolean that_present_numRows = true;
      if (this_present_numRows || that_present_numRows) {
        if (!(this_present_numRows && that_present_numRows))
          return false;
        if (this.numRows != that.numRows)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.I32) {
              this.numRows = iprot.readI32();
              this.__isset.numRows = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("fetchN_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "numRows";
      field.type = TType.I32;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.numRows);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("fetchN_args(");
      sb.append("numRows:");
      sb.append(this.numRows);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class fetchN_result implements TBase, java.io.Serializable   {
    private List<String> success;
    private HiveServerException ex;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean ex = false;
    }

    public fetchN_result() {
    }

    public fetchN_result(
      List<String> success,
      HiveServerException ex)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.ex = ex;
      this.__isset.ex = true;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
      this.__isset.success = true;
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.success = null;
      this.__isset.success = false;
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
      this.__isset.ex = true;
    }

    public void unsetEx() {
      this.ex = null;
      this.__isset.ex = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchN_result)
        return this.equals((fetchN_result)that);
      return false;
    }

    public boolean equals(fetchN_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && (this.ex != null);
      boolean that_present_ex = true && (that.ex != null);
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.LIST) {
              {
                TList _list0 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2 = null;
                  _elem2 = iprot.readString();
                  this.success.add(_elem2);
                }
                iprot.readListEnd();
              }
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.ex = new HiveServerException();
              this.ex.read(iprot);
              this.__isset.ex = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("fetchN_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.LIST;
          field.id = 0;
          oprot.writeFieldBegin(field);
          {
            oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
            for (String _iter3 : this.success)            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.ex) {
        if (this.ex != null) {
          field.name = "ex";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.ex.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("fetchN_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",ex:");
      sb.append(this.ex);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class fetchAll_args implements TBase, java.io.Serializable   {
    public fetchAll_args() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchAll_args)
        return this.equals((fetchAll_args)that);
      return false;
    }

    public boolean equals(fetchAll_args that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("fetchAll_args");
      oprot.writeStructBegin(struct);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("fetchAll_args(");
      sb.append(")");
      return sb.toString();
    }

  }

  public static class fetchAll_result implements TBase, java.io.Serializable   {
    private List<String> success;
    private HiveServerException ex;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean ex = false;
    }

    public fetchAll_result() {
    }

    public fetchAll_result(
      List<String> success,
      HiveServerException ex)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.ex = ex;
      this.__isset.ex = true;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
      this.__isset.success = true;
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.success = null;
      this.__isset.success = false;
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
      this.__isset.ex = true;
    }

    public void unsetEx() {
      this.ex = null;
      this.__isset.ex = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchAll_result)
        return this.equals((fetchAll_result)that);
      return false;
    }

    public boolean equals(fetchAll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && (this.ex != null);
      boolean that_present_ex = true && (that.ex != null);
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.LIST) {
              {
                TList _list4 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  String _elem6 = null;
                  _elem6 = iprot.readString();
                  this.success.add(_elem6);
                }
                iprot.readListEnd();
              }
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.ex = new HiveServerException();
              this.ex.read(iprot);
              this.__isset.ex = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("fetchAll_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.LIST;
          field.id = 0;
          oprot.writeFieldBegin(field);
          {
            oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
            for (String _iter7 : this.success)            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.ex) {
        if (this.ex != null) {
          field.name = "ex";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.ex.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("fetchAll_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",ex:");
      sb.append(this.ex);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getSchema_args implements TBase, java.io.Serializable   {
    public getSchema_args() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSchema_args)
        return this.equals((getSchema_args)that);
      return false;
    }

    public boolean equals(getSchema_args that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getSchema_args");
      oprot.writeStructBegin(struct);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getSchema_args(");
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getSchema_result implements TBase, java.io.Serializable   {
    private org.apache.hadoop.hive.metastore.api.Schema success;
    private HiveServerException ex;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean ex = false;
    }

    public getSchema_result() {
    }

    public getSchema_result(
      org.apache.hadoop.hive.metastore.api.Schema success,
      HiveServerException ex)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.ex = ex;
      this.__isset.ex = true;
    }

    public org.apache.hadoop.hive.metastore.api.Schema getSuccess() {
      return this.success;
    }

    public void setSuccess(org.apache.hadoop.hive.metastore.api.Schema success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.success = null;
      this.__isset.success = false;
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
      this.__isset.ex = true;
    }

    public void unsetEx() {
      this.ex = null;
      this.__isset.ex = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSchema_result)
        return this.equals((getSchema_result)that);
      return false;
    }

    public boolean equals(getSchema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && (this.ex != null);
      boolean that_present_ex = true && (that.ex != null);
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new org.apache.hadoop.hive.metastore.api.Schema();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.ex = new HiveServerException();
              this.ex.read(iprot);
              this.__isset.ex = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getSchema_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.ex) {
        if (this.ex != null) {
          field.name = "ex";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.ex.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getSchema_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",ex:");
      sb.append(this.ex);
      sb.append(")");
      return sb.toString();
    }

  }

}
