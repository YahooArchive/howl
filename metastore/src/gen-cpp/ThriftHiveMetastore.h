/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef ThriftHiveMetastore_H
#define ThriftHiveMetastore_H

#include <TProcessor.h>
#include "hive_metastore_types.h"
#include "FacebookService.h"

namespace Apache { namespace Hadoop { namespace Hive {

class ThriftHiveMetastoreIf : virtual public facebook::fb303::FacebookServiceIf {
 public:
  virtual ~ThriftHiveMetastoreIf() {}
  virtual bool create_database(const std::string& name, const std::string& description) = 0;
  virtual void get_database(Database& _return, const std::string& name) = 0;
  virtual bool drop_database(const std::string& name) = 0;
  virtual void get_databases(std::vector<std::string> & _return) = 0;
  virtual void get_type(Type& _return, const std::string& name) = 0;
  virtual bool create_type(const Type& type) = 0;
  virtual bool drop_type(const std::string& type) = 0;
  virtual void get_type_all(std::map<std::string, Type> & _return, const std::string& name) = 0;
  virtual void get_fields(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name) = 0;
  virtual void get_schema(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name) = 0;
  virtual void create_table(const Table& tbl) = 0;
  virtual void drop_table(const std::string& dbname, const std::string& name, const bool deleteData) = 0;
  virtual void get_tables(std::vector<std::string> & _return, const std::string& db_name, const std::string& pattern) = 0;
  virtual void get_table(Table& _return, const std::string& dbname, const std::string& tbl_name) = 0;
  virtual void alter_table(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl) = 0;
  virtual void add_partition(Partition& _return, const Partition& new_part) = 0;
  virtual void append_partition(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals) = 0;
  virtual bool drop_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const bool deleteData) = 0;
  virtual void get_partition(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals) = 0;
  virtual void get_partitions(std::vector<Partition> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_parts) = 0;
  virtual void get_partition_names(std::vector<std::string> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_parts) = 0;
  virtual void alter_partition(const std::string& db_name, const std::string& tbl_name, const Partition& new_part) = 0;
};

class ThriftHiveMetastoreNull : virtual public ThriftHiveMetastoreIf , virtual public facebook::fb303::FacebookServiceNull {
 public:
  virtual ~ThriftHiveMetastoreNull() {}
  bool create_database(const std::string& /* name */, const std::string& /* description */) {
    bool _return = false;
    return _return;
  }
  void get_database(Database& /* _return */, const std::string& /* name */) {
    return;
  }
  bool drop_database(const std::string& /* name */) {
    bool _return = false;
    return _return;
  }
  void get_databases(std::vector<std::string> & /* _return */) {
    return;
  }
  void get_type(Type& /* _return */, const std::string& /* name */) {
    return;
  }
  bool create_type(const Type& /* type */) {
    bool _return = false;
    return _return;
  }
  bool drop_type(const std::string& /* type */) {
    bool _return = false;
    return _return;
  }
  void get_type_all(std::map<std::string, Type> & /* _return */, const std::string& /* name */) {
    return;
  }
  void get_fields(std::vector<FieldSchema> & /* _return */, const std::string& /* db_name */, const std::string& /* table_name */) {
    return;
  }
  void get_schema(std::vector<FieldSchema> & /* _return */, const std::string& /* db_name */, const std::string& /* table_name */) {
    return;
  }
  void create_table(const Table& /* tbl */) {
    return;
  }
  void drop_table(const std::string& /* dbname */, const std::string& /* name */, const bool /* deleteData */) {
    return;
  }
  void get_tables(std::vector<std::string> & /* _return */, const std::string& /* db_name */, const std::string& /* pattern */) {
    return;
  }
  void get_table(Table& /* _return */, const std::string& /* dbname */, const std::string& /* tbl_name */) {
    return;
  }
  void alter_table(const std::string& /* dbname */, const std::string& /* tbl_name */, const Table& /* new_tbl */) {
    return;
  }
  void add_partition(Partition& /* _return */, const Partition& /* new_part */) {
    return;
  }
  void append_partition(Partition& /* _return */, const std::string& /* db_name */, const std::string& /* tbl_name */, const std::vector<std::string> & /* part_vals */) {
    return;
  }
  bool drop_partition(const std::string& /* db_name */, const std::string& /* tbl_name */, const std::vector<std::string> & /* part_vals */, const bool /* deleteData */) {
    bool _return = false;
    return _return;
  }
  void get_partition(Partition& /* _return */, const std::string& /* db_name */, const std::string& /* tbl_name */, const std::vector<std::string> & /* part_vals */) {
    return;
  }
  void get_partitions(std::vector<Partition> & /* _return */, const std::string& /* db_name */, const std::string& /* tbl_name */, const int16_t /* max_parts */) {
    return;
  }
  void get_partition_names(std::vector<std::string> & /* _return */, const std::string& /* db_name */, const std::string& /* tbl_name */, const int16_t /* max_parts */) {
    return;
  }
  void alter_partition(const std::string& /* db_name */, const std::string& /* tbl_name */, const Partition& /* new_part */) {
    return;
  }
};

class ThriftHiveMetastore_create_database_args {
 public:

  ThriftHiveMetastore_create_database_args() : name(""), description("") {
  }

  virtual ~ThriftHiveMetastore_create_database_args() throw() {}

  std::string name;
  std::string description;

  struct __isset {
    __isset() : name(false), description(false) {}
    bool name;
    bool description;
  } __isset;

  bool operator == (const ThriftHiveMetastore_create_database_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_create_database_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_create_database_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_create_database_pargs {
 public:


  virtual ~ThriftHiveMetastore_create_database_pargs() throw() {}

  const std::string* name;
  const std::string* description;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_create_database_result {
 public:

  ThriftHiveMetastore_create_database_result() : success(0) {
  }

  virtual ~ThriftHiveMetastore_create_database_result() throw() {}

  bool success;
  AlreadyExistsException o1;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o1(false), o2(false) {}
    bool success;
    bool o1;
    bool o2;
  } __isset;

  bool operator == (const ThriftHiveMetastore_create_database_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o1 == rhs.o1))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_create_database_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_create_database_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_create_database_presult {
 public:


  virtual ~ThriftHiveMetastore_create_database_presult() throw() {}

  bool* success;
  AlreadyExistsException o1;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o1(false), o2(false) {}
    bool success;
    bool o1;
    bool o2;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_get_database_args {
 public:

  ThriftHiveMetastore_get_database_args() : name("") {
  }

  virtual ~ThriftHiveMetastore_get_database_args() throw() {}

  std::string name;

  struct __isset {
    __isset() : name(false) {}
    bool name;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_database_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_database_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_database_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_database_pargs {
 public:


  virtual ~ThriftHiveMetastore_get_database_pargs() throw() {}

  const std::string* name;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_database_result {
 public:

  ThriftHiveMetastore_get_database_result() {
  }

  virtual ~ThriftHiveMetastore_get_database_result() throw() {}

  Database success;
  NoSuchObjectException o1;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o1(false), o2(false) {}
    bool success;
    bool o1;
    bool o2;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_database_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o1 == rhs.o1))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_database_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_database_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_database_presult {
 public:


  virtual ~ThriftHiveMetastore_get_database_presult() throw() {}

  Database* success;
  NoSuchObjectException o1;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o1(false), o2(false) {}
    bool success;
    bool o1;
    bool o2;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_drop_database_args {
 public:

  ThriftHiveMetastore_drop_database_args() : name("") {
  }

  virtual ~ThriftHiveMetastore_drop_database_args() throw() {}

  std::string name;

  struct __isset {
    __isset() : name(false) {}
    bool name;
  } __isset;

  bool operator == (const ThriftHiveMetastore_drop_database_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_drop_database_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_drop_database_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_drop_database_pargs {
 public:


  virtual ~ThriftHiveMetastore_drop_database_pargs() throw() {}

  const std::string* name;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_drop_database_result {
 public:

  ThriftHiveMetastore_drop_database_result() : success(0) {
  }

  virtual ~ThriftHiveMetastore_drop_database_result() throw() {}

  bool success;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o2(false) {}
    bool success;
    bool o2;
  } __isset;

  bool operator == (const ThriftHiveMetastore_drop_database_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_drop_database_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_drop_database_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_drop_database_presult {
 public:


  virtual ~ThriftHiveMetastore_drop_database_presult() throw() {}

  bool* success;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o2(false) {}
    bool success;
    bool o2;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_get_databases_args {
 public:

  ThriftHiveMetastore_get_databases_args() {
  }

  virtual ~ThriftHiveMetastore_get_databases_args() throw() {}


  bool operator == (const ThriftHiveMetastore_get_databases_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_databases_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_databases_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_databases_pargs {
 public:


  virtual ~ThriftHiveMetastore_get_databases_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_databases_result {
 public:

  ThriftHiveMetastore_get_databases_result() {
  }

  virtual ~ThriftHiveMetastore_get_databases_result() throw() {}

  std::vector<std::string>  success;
  MetaException o1;

  struct __isset {
    __isset() : success(false), o1(false) {}
    bool success;
    bool o1;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_databases_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o1 == rhs.o1))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_databases_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_databases_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_databases_presult {
 public:


  virtual ~ThriftHiveMetastore_get_databases_presult() throw() {}

  std::vector<std::string> * success;
  MetaException o1;

  struct __isset {
    __isset() : success(false), o1(false) {}
    bool success;
    bool o1;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_get_type_args {
 public:

  ThriftHiveMetastore_get_type_args() : name("") {
  }

  virtual ~ThriftHiveMetastore_get_type_args() throw() {}

  std::string name;

  struct __isset {
    __isset() : name(false) {}
    bool name;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_type_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_type_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_type_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_type_pargs {
 public:


  virtual ~ThriftHiveMetastore_get_type_pargs() throw() {}

  const std::string* name;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_type_result {
 public:

  ThriftHiveMetastore_get_type_result() {
  }

  virtual ~ThriftHiveMetastore_get_type_result() throw() {}

  Type success;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o2(false) {}
    bool success;
    bool o2;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_type_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_type_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_type_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_type_presult {
 public:


  virtual ~ThriftHiveMetastore_get_type_presult() throw() {}

  Type* success;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o2(false) {}
    bool success;
    bool o2;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_create_type_args {
 public:

  ThriftHiveMetastore_create_type_args() {
  }

  virtual ~ThriftHiveMetastore_create_type_args() throw() {}

  Type type;

  struct __isset {
    __isset() : type(false) {}
    bool type;
  } __isset;

  bool operator == (const ThriftHiveMetastore_create_type_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_create_type_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_create_type_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_create_type_pargs {
 public:


  virtual ~ThriftHiveMetastore_create_type_pargs() throw() {}

  const Type* type;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_create_type_result {
 public:

  ThriftHiveMetastore_create_type_result() : success(0) {
  }

  virtual ~ThriftHiveMetastore_create_type_result() throw() {}

  bool success;
  AlreadyExistsException o1;
  InvalidObjectException o2;
  MetaException o3;

  struct __isset {
    __isset() : success(false), o1(false), o2(false), o3(false) {}
    bool success;
    bool o1;
    bool o2;
    bool o3;
  } __isset;

  bool operator == (const ThriftHiveMetastore_create_type_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o1 == rhs.o1))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    if (!(o3 == rhs.o3))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_create_type_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_create_type_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_create_type_presult {
 public:


  virtual ~ThriftHiveMetastore_create_type_presult() throw() {}

  bool* success;
  AlreadyExistsException o1;
  InvalidObjectException o2;
  MetaException o3;

  struct __isset {
    __isset() : success(false), o1(false), o2(false), o3(false) {}
    bool success;
    bool o1;
    bool o2;
    bool o3;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_drop_type_args {
 public:

  ThriftHiveMetastore_drop_type_args() : type("") {
  }

  virtual ~ThriftHiveMetastore_drop_type_args() throw() {}

  std::string type;

  struct __isset {
    __isset() : type(false) {}
    bool type;
  } __isset;

  bool operator == (const ThriftHiveMetastore_drop_type_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_drop_type_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_drop_type_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_drop_type_pargs {
 public:


  virtual ~ThriftHiveMetastore_drop_type_pargs() throw() {}

  const std::string* type;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_drop_type_result {
 public:

  ThriftHiveMetastore_drop_type_result() : success(0) {
  }

  virtual ~ThriftHiveMetastore_drop_type_result() throw() {}

  bool success;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o2(false) {}
    bool success;
    bool o2;
  } __isset;

  bool operator == (const ThriftHiveMetastore_drop_type_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_drop_type_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_drop_type_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_drop_type_presult {
 public:


  virtual ~ThriftHiveMetastore_drop_type_presult() throw() {}

  bool* success;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o2(false) {}
    bool success;
    bool o2;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_get_type_all_args {
 public:

  ThriftHiveMetastore_get_type_all_args() : name("") {
  }

  virtual ~ThriftHiveMetastore_get_type_all_args() throw() {}

  std::string name;

  struct __isset {
    __isset() : name(false) {}
    bool name;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_type_all_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_type_all_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_type_all_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_type_all_pargs {
 public:


  virtual ~ThriftHiveMetastore_get_type_all_pargs() throw() {}

  const std::string* name;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_type_all_result {
 public:

  ThriftHiveMetastore_get_type_all_result() {
  }

  virtual ~ThriftHiveMetastore_get_type_all_result() throw() {}

  std::map<std::string, Type>  success;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o2(false) {}
    bool success;
    bool o2;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_type_all_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_type_all_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_type_all_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_type_all_presult {
 public:


  virtual ~ThriftHiveMetastore_get_type_all_presult() throw() {}

  std::map<std::string, Type> * success;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o2(false) {}
    bool success;
    bool o2;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_get_fields_args {
 public:

  ThriftHiveMetastore_get_fields_args() : db_name(""), table_name("") {
  }

  virtual ~ThriftHiveMetastore_get_fields_args() throw() {}

  std::string db_name;
  std::string table_name;

  struct __isset {
    __isset() : db_name(false), table_name(false) {}
    bool db_name;
    bool table_name;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_fields_args & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_fields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_fields_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_fields_pargs {
 public:


  virtual ~ThriftHiveMetastore_get_fields_pargs() throw() {}

  const std::string* db_name;
  const std::string* table_name;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_fields_result {
 public:

  ThriftHiveMetastore_get_fields_result() {
  }

  virtual ~ThriftHiveMetastore_get_fields_result() throw() {}

  std::vector<FieldSchema>  success;
  MetaException o1;
  UnknownTableException o2;
  UnknownDBException o3;

  struct __isset {
    __isset() : success(false), o1(false), o2(false), o3(false) {}
    bool success;
    bool o1;
    bool o2;
    bool o3;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_fields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o1 == rhs.o1))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    if (!(o3 == rhs.o3))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_fields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_fields_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_fields_presult {
 public:


  virtual ~ThriftHiveMetastore_get_fields_presult() throw() {}

  std::vector<FieldSchema> * success;
  MetaException o1;
  UnknownTableException o2;
  UnknownDBException o3;

  struct __isset {
    __isset() : success(false), o1(false), o2(false), o3(false) {}
    bool success;
    bool o1;
    bool o2;
    bool o3;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_get_schema_args {
 public:

  ThriftHiveMetastore_get_schema_args() : db_name(""), table_name("") {
  }

  virtual ~ThriftHiveMetastore_get_schema_args() throw() {}

  std::string db_name;
  std::string table_name;

  struct __isset {
    __isset() : db_name(false), table_name(false) {}
    bool db_name;
    bool table_name;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_schema_args & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_schema_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_schema_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_schema_pargs {
 public:


  virtual ~ThriftHiveMetastore_get_schema_pargs() throw() {}

  const std::string* db_name;
  const std::string* table_name;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_schema_result {
 public:

  ThriftHiveMetastore_get_schema_result() {
  }

  virtual ~ThriftHiveMetastore_get_schema_result() throw() {}

  std::vector<FieldSchema>  success;
  MetaException o1;
  UnknownTableException o2;
  UnknownDBException o3;

  struct __isset {
    __isset() : success(false), o1(false), o2(false), o3(false) {}
    bool success;
    bool o1;
    bool o2;
    bool o3;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_schema_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o1 == rhs.o1))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    if (!(o3 == rhs.o3))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_schema_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_schema_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_schema_presult {
 public:


  virtual ~ThriftHiveMetastore_get_schema_presult() throw() {}

  std::vector<FieldSchema> * success;
  MetaException o1;
  UnknownTableException o2;
  UnknownDBException o3;

  struct __isset {
    __isset() : success(false), o1(false), o2(false), o3(false) {}
    bool success;
    bool o1;
    bool o2;
    bool o3;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_create_table_args {
 public:

  ThriftHiveMetastore_create_table_args() {
  }

  virtual ~ThriftHiveMetastore_create_table_args() throw() {}

  Table tbl;

  struct __isset {
    __isset() : tbl(false) {}
    bool tbl;
  } __isset;

  bool operator == (const ThriftHiveMetastore_create_table_args & rhs) const
  {
    if (!(tbl == rhs.tbl))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_create_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_create_table_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_create_table_pargs {
 public:


  virtual ~ThriftHiveMetastore_create_table_pargs() throw() {}

  const Table* tbl;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_create_table_result {
 public:

  ThriftHiveMetastore_create_table_result() {
  }

  virtual ~ThriftHiveMetastore_create_table_result() throw() {}

  AlreadyExistsException o1;
  InvalidObjectException o2;
  MetaException o3;
  NoSuchObjectException o4;

  struct __isset {
    __isset() : o1(false), o2(false), o3(false), o4(false) {}
    bool o1;
    bool o2;
    bool o3;
    bool o4;
  } __isset;

  bool operator == (const ThriftHiveMetastore_create_table_result & rhs) const
  {
    if (!(o1 == rhs.o1))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    if (!(o3 == rhs.o3))
      return false;
    if (!(o4 == rhs.o4))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_create_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_create_table_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_create_table_presult {
 public:


  virtual ~ThriftHiveMetastore_create_table_presult() throw() {}

  AlreadyExistsException o1;
  InvalidObjectException o2;
  MetaException o3;
  NoSuchObjectException o4;

  struct __isset {
    __isset() : o1(false), o2(false), o3(false), o4(false) {}
    bool o1;
    bool o2;
    bool o3;
    bool o4;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_drop_table_args {
 public:

  ThriftHiveMetastore_drop_table_args() : dbname(""), name(""), deleteData(0) {
  }

  virtual ~ThriftHiveMetastore_drop_table_args() throw() {}

  std::string dbname;
  std::string name;
  bool deleteData;

  struct __isset {
    __isset() : dbname(false), name(false), deleteData(false) {}
    bool dbname;
    bool name;
    bool deleteData;
  } __isset;

  bool operator == (const ThriftHiveMetastore_drop_table_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(deleteData == rhs.deleteData))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_drop_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_drop_table_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_drop_table_pargs {
 public:


  virtual ~ThriftHiveMetastore_drop_table_pargs() throw() {}

  const std::string* dbname;
  const std::string* name;
  const bool* deleteData;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_drop_table_result {
 public:

  ThriftHiveMetastore_drop_table_result() {
  }

  virtual ~ThriftHiveMetastore_drop_table_result() throw() {}

  NoSuchObjectException o1;
  MetaException o3;

  struct __isset {
    __isset() : o1(false), o3(false) {}
    bool o1;
    bool o3;
  } __isset;

  bool operator == (const ThriftHiveMetastore_drop_table_result & rhs) const
  {
    if (!(o1 == rhs.o1))
      return false;
    if (!(o3 == rhs.o3))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_drop_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_drop_table_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_drop_table_presult {
 public:


  virtual ~ThriftHiveMetastore_drop_table_presult() throw() {}

  NoSuchObjectException o1;
  MetaException o3;

  struct __isset {
    __isset() : o1(false), o3(false) {}
    bool o1;
    bool o3;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_get_tables_args {
 public:

  ThriftHiveMetastore_get_tables_args() : db_name(""), pattern("") {
  }

  virtual ~ThriftHiveMetastore_get_tables_args() throw() {}

  std::string db_name;
  std::string pattern;

  struct __isset {
    __isset() : db_name(false), pattern(false) {}
    bool db_name;
    bool pattern;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_tables_args & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(pattern == rhs.pattern))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_tables_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_tables_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_tables_pargs {
 public:


  virtual ~ThriftHiveMetastore_get_tables_pargs() throw() {}

  const std::string* db_name;
  const std::string* pattern;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_tables_result {
 public:

  ThriftHiveMetastore_get_tables_result() {
  }

  virtual ~ThriftHiveMetastore_get_tables_result() throw() {}

  std::vector<std::string>  success;
  MetaException o1;

  struct __isset {
    __isset() : success(false), o1(false) {}
    bool success;
    bool o1;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_tables_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o1 == rhs.o1))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_tables_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_tables_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_tables_presult {
 public:


  virtual ~ThriftHiveMetastore_get_tables_presult() throw() {}

  std::vector<std::string> * success;
  MetaException o1;

  struct __isset {
    __isset() : success(false), o1(false) {}
    bool success;
    bool o1;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_get_table_args {
 public:

  ThriftHiveMetastore_get_table_args() : dbname(""), tbl_name("") {
  }

  virtual ~ThriftHiveMetastore_get_table_args() throw() {}

  std::string dbname;
  std::string tbl_name;

  struct __isset {
    __isset() : dbname(false), tbl_name(false) {}
    bool dbname;
    bool tbl_name;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_table_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(tbl_name == rhs.tbl_name))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_table_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_table_pargs {
 public:


  virtual ~ThriftHiveMetastore_get_table_pargs() throw() {}

  const std::string* dbname;
  const std::string* tbl_name;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_table_result {
 public:

  ThriftHiveMetastore_get_table_result() {
  }

  virtual ~ThriftHiveMetastore_get_table_result() throw() {}

  Table success;
  MetaException o1;
  NoSuchObjectException o2;

  struct __isset {
    __isset() : success(false), o1(false), o2(false) {}
    bool success;
    bool o1;
    bool o2;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_table_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o1 == rhs.o1))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_table_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_table_presult {
 public:


  virtual ~ThriftHiveMetastore_get_table_presult() throw() {}

  Table* success;
  MetaException o1;
  NoSuchObjectException o2;

  struct __isset {
    __isset() : success(false), o1(false), o2(false) {}
    bool success;
    bool o1;
    bool o2;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_alter_table_args {
 public:

  ThriftHiveMetastore_alter_table_args() : dbname(""), tbl_name("") {
  }

  virtual ~ThriftHiveMetastore_alter_table_args() throw() {}

  std::string dbname;
  std::string tbl_name;
  Table new_tbl;

  struct __isset {
    __isset() : dbname(false), tbl_name(false), new_tbl(false) {}
    bool dbname;
    bool tbl_name;
    bool new_tbl;
  } __isset;

  bool operator == (const ThriftHiveMetastore_alter_table_args & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(tbl_name == rhs.tbl_name))
      return false;
    if (!(new_tbl == rhs.new_tbl))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_alter_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_alter_table_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_alter_table_pargs {
 public:


  virtual ~ThriftHiveMetastore_alter_table_pargs() throw() {}

  const std::string* dbname;
  const std::string* tbl_name;
  const Table* new_tbl;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_alter_table_result {
 public:

  ThriftHiveMetastore_alter_table_result() {
  }

  virtual ~ThriftHiveMetastore_alter_table_result() throw() {}

  InvalidOperationException o1;
  MetaException o2;

  struct __isset {
    __isset() : o1(false), o2(false) {}
    bool o1;
    bool o2;
  } __isset;

  bool operator == (const ThriftHiveMetastore_alter_table_result & rhs) const
  {
    if (!(o1 == rhs.o1))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_alter_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_alter_table_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_alter_table_presult {
 public:


  virtual ~ThriftHiveMetastore_alter_table_presult() throw() {}

  InvalidOperationException o1;
  MetaException o2;

  struct __isset {
    __isset() : o1(false), o2(false) {}
    bool o1;
    bool o2;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_add_partition_args {
 public:

  ThriftHiveMetastore_add_partition_args() {
  }

  virtual ~ThriftHiveMetastore_add_partition_args() throw() {}

  Partition new_part;

  struct __isset {
    __isset() : new_part(false) {}
    bool new_part;
  } __isset;

  bool operator == (const ThriftHiveMetastore_add_partition_args & rhs) const
  {
    if (!(new_part == rhs.new_part))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_add_partition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_add_partition_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_add_partition_pargs {
 public:


  virtual ~ThriftHiveMetastore_add_partition_pargs() throw() {}

  const Partition* new_part;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_add_partition_result {
 public:

  ThriftHiveMetastore_add_partition_result() {
  }

  virtual ~ThriftHiveMetastore_add_partition_result() throw() {}

  Partition success;
  InvalidObjectException o1;
  AlreadyExistsException o2;
  MetaException o3;

  struct __isset {
    __isset() : success(false), o1(false), o2(false), o3(false) {}
    bool success;
    bool o1;
    bool o2;
    bool o3;
  } __isset;

  bool operator == (const ThriftHiveMetastore_add_partition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o1 == rhs.o1))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    if (!(o3 == rhs.o3))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_add_partition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_add_partition_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_add_partition_presult {
 public:


  virtual ~ThriftHiveMetastore_add_partition_presult() throw() {}

  Partition* success;
  InvalidObjectException o1;
  AlreadyExistsException o2;
  MetaException o3;

  struct __isset {
    __isset() : success(false), o1(false), o2(false), o3(false) {}
    bool success;
    bool o1;
    bool o2;
    bool o3;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_append_partition_args {
 public:

  ThriftHiveMetastore_append_partition_args() : db_name(""), tbl_name("") {
  }

  virtual ~ThriftHiveMetastore_append_partition_args() throw() {}

  std::string db_name;
  std::string tbl_name;
  std::vector<std::string>  part_vals;

  struct __isset {
    __isset() : db_name(false), tbl_name(false), part_vals(false) {}
    bool db_name;
    bool tbl_name;
    bool part_vals;
  } __isset;

  bool operator == (const ThriftHiveMetastore_append_partition_args & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(tbl_name == rhs.tbl_name))
      return false;
    if (!(part_vals == rhs.part_vals))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_append_partition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_append_partition_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_append_partition_pargs {
 public:


  virtual ~ThriftHiveMetastore_append_partition_pargs() throw() {}

  const std::string* db_name;
  const std::string* tbl_name;
  const std::vector<std::string> * part_vals;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_append_partition_result {
 public:

  ThriftHiveMetastore_append_partition_result() {
  }

  virtual ~ThriftHiveMetastore_append_partition_result() throw() {}

  Partition success;
  InvalidObjectException o1;
  AlreadyExistsException o2;
  MetaException o3;

  struct __isset {
    __isset() : success(false), o1(false), o2(false), o3(false) {}
    bool success;
    bool o1;
    bool o2;
    bool o3;
  } __isset;

  bool operator == (const ThriftHiveMetastore_append_partition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o1 == rhs.o1))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    if (!(o3 == rhs.o3))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_append_partition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_append_partition_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_append_partition_presult {
 public:


  virtual ~ThriftHiveMetastore_append_partition_presult() throw() {}

  Partition* success;
  InvalidObjectException o1;
  AlreadyExistsException o2;
  MetaException o3;

  struct __isset {
    __isset() : success(false), o1(false), o2(false), o3(false) {}
    bool success;
    bool o1;
    bool o2;
    bool o3;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_drop_partition_args {
 public:

  ThriftHiveMetastore_drop_partition_args() : db_name(""), tbl_name(""), deleteData(0) {
  }

  virtual ~ThriftHiveMetastore_drop_partition_args() throw() {}

  std::string db_name;
  std::string tbl_name;
  std::vector<std::string>  part_vals;
  bool deleteData;

  struct __isset {
    __isset() : db_name(false), tbl_name(false), part_vals(false), deleteData(false) {}
    bool db_name;
    bool tbl_name;
    bool part_vals;
    bool deleteData;
  } __isset;

  bool operator == (const ThriftHiveMetastore_drop_partition_args & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(tbl_name == rhs.tbl_name))
      return false;
    if (!(part_vals == rhs.part_vals))
      return false;
    if (!(deleteData == rhs.deleteData))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_drop_partition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_drop_partition_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_drop_partition_pargs {
 public:


  virtual ~ThriftHiveMetastore_drop_partition_pargs() throw() {}

  const std::string* db_name;
  const std::string* tbl_name;
  const std::vector<std::string> * part_vals;
  const bool* deleteData;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_drop_partition_result {
 public:

  ThriftHiveMetastore_drop_partition_result() : success(0) {
  }

  virtual ~ThriftHiveMetastore_drop_partition_result() throw() {}

  bool success;
  NoSuchObjectException o1;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o1(false), o2(false) {}
    bool success;
    bool o1;
    bool o2;
  } __isset;

  bool operator == (const ThriftHiveMetastore_drop_partition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o1 == rhs.o1))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_drop_partition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_drop_partition_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_drop_partition_presult {
 public:


  virtual ~ThriftHiveMetastore_drop_partition_presult() throw() {}

  bool* success;
  NoSuchObjectException o1;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o1(false), o2(false) {}
    bool success;
    bool o1;
    bool o2;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_get_partition_args {
 public:

  ThriftHiveMetastore_get_partition_args() : db_name(""), tbl_name("") {
  }

  virtual ~ThriftHiveMetastore_get_partition_args() throw() {}

  std::string db_name;
  std::string tbl_name;
  std::vector<std::string>  part_vals;

  struct __isset {
    __isset() : db_name(false), tbl_name(false), part_vals(false) {}
    bool db_name;
    bool tbl_name;
    bool part_vals;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_partition_args & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(tbl_name == rhs.tbl_name))
      return false;
    if (!(part_vals == rhs.part_vals))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_partition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_partition_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_partition_pargs {
 public:


  virtual ~ThriftHiveMetastore_get_partition_pargs() throw() {}

  const std::string* db_name;
  const std::string* tbl_name;
  const std::vector<std::string> * part_vals;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_partition_result {
 public:

  ThriftHiveMetastore_get_partition_result() {
  }

  virtual ~ThriftHiveMetastore_get_partition_result() throw() {}

  Partition success;
  MetaException o1;

  struct __isset {
    __isset() : success(false), o1(false) {}
    bool success;
    bool o1;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_partition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o1 == rhs.o1))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_partition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_partition_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_partition_presult {
 public:


  virtual ~ThriftHiveMetastore_get_partition_presult() throw() {}

  Partition* success;
  MetaException o1;

  struct __isset {
    __isset() : success(false), o1(false) {}
    bool success;
    bool o1;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_get_partitions_args {
 public:

  ThriftHiveMetastore_get_partitions_args() : db_name(""), tbl_name(""), max_parts(-1) {
  }

  virtual ~ThriftHiveMetastore_get_partitions_args() throw() {}

  std::string db_name;
  std::string tbl_name;
  int16_t max_parts;

  struct __isset {
    __isset() : db_name(false), tbl_name(false), max_parts(false) {}
    bool db_name;
    bool tbl_name;
    bool max_parts;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_partitions_args & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(tbl_name == rhs.tbl_name))
      return false;
    if (!(max_parts == rhs.max_parts))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_partitions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_partitions_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_partitions_pargs {
 public:


  virtual ~ThriftHiveMetastore_get_partitions_pargs() throw() {}

  const std::string* db_name;
  const std::string* tbl_name;
  const int16_t* max_parts;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_partitions_result {
 public:

  ThriftHiveMetastore_get_partitions_result() {
  }

  virtual ~ThriftHiveMetastore_get_partitions_result() throw() {}

  std::vector<Partition>  success;
  NoSuchObjectException o1;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o1(false), o2(false) {}
    bool success;
    bool o1;
    bool o2;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_partitions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o1 == rhs.o1))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_partitions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_partitions_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_partitions_presult {
 public:


  virtual ~ThriftHiveMetastore_get_partitions_presult() throw() {}

  std::vector<Partition> * success;
  NoSuchObjectException o1;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o1(false), o2(false) {}
    bool success;
    bool o1;
    bool o2;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_get_partition_names_args {
 public:

  ThriftHiveMetastore_get_partition_names_args() : db_name(""), tbl_name(""), max_parts(-1) {
  }

  virtual ~ThriftHiveMetastore_get_partition_names_args() throw() {}

  std::string db_name;
  std::string tbl_name;
  int16_t max_parts;

  struct __isset {
    __isset() : db_name(false), tbl_name(false), max_parts(false) {}
    bool db_name;
    bool tbl_name;
    bool max_parts;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_partition_names_args & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(tbl_name == rhs.tbl_name))
      return false;
    if (!(max_parts == rhs.max_parts))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_partition_names_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_partition_names_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_partition_names_pargs {
 public:


  virtual ~ThriftHiveMetastore_get_partition_names_pargs() throw() {}

  const std::string* db_name;
  const std::string* tbl_name;
  const int16_t* max_parts;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_partition_names_result {
 public:

  ThriftHiveMetastore_get_partition_names_result() {
  }

  virtual ~ThriftHiveMetastore_get_partition_names_result() throw() {}

  std::vector<std::string>  success;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o2(false) {}
    bool success;
    bool o2;
  } __isset;

  bool operator == (const ThriftHiveMetastore_get_partition_names_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_get_partition_names_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_get_partition_names_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_get_partition_names_presult {
 public:


  virtual ~ThriftHiveMetastore_get_partition_names_presult() throw() {}

  std::vector<std::string> * success;
  MetaException o2;

  struct __isset {
    __isset() : success(false), o2(false) {}
    bool success;
    bool o2;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastore_alter_partition_args {
 public:

  ThriftHiveMetastore_alter_partition_args() : db_name(""), tbl_name("") {
  }

  virtual ~ThriftHiveMetastore_alter_partition_args() throw() {}

  std::string db_name;
  std::string tbl_name;
  Partition new_part;

  struct __isset {
    __isset() : db_name(false), tbl_name(false), new_part(false) {}
    bool db_name;
    bool tbl_name;
    bool new_part;
  } __isset;

  bool operator == (const ThriftHiveMetastore_alter_partition_args & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(tbl_name == rhs.tbl_name))
      return false;
    if (!(new_part == rhs.new_part))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_alter_partition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_alter_partition_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_alter_partition_pargs {
 public:


  virtual ~ThriftHiveMetastore_alter_partition_pargs() throw() {}

  const std::string* db_name;
  const std::string* tbl_name;
  const Partition* new_part;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_alter_partition_result {
 public:

  ThriftHiveMetastore_alter_partition_result() {
  }

  virtual ~ThriftHiveMetastore_alter_partition_result() throw() {}

  InvalidOperationException o1;
  MetaException o2;

  struct __isset {
    __isset() : o1(false), o2(false) {}
    bool o1;
    bool o2;
  } __isset;

  bool operator == (const ThriftHiveMetastore_alter_partition_result & rhs) const
  {
    if (!(o1 == rhs.o1))
      return false;
    if (!(o2 == rhs.o2))
      return false;
    return true;
  }
  bool operator != (const ThriftHiveMetastore_alter_partition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHiveMetastore_alter_partition_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThriftHiveMetastore_alter_partition_presult {
 public:


  virtual ~ThriftHiveMetastore_alter_partition_presult() throw() {}

  InvalidOperationException o1;
  MetaException o2;

  struct __isset {
    __isset() : o1(false), o2(false) {}
    bool o1;
    bool o2;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class ThriftHiveMetastoreClient : virtual public ThriftHiveMetastoreIf, public facebook::fb303::FacebookServiceClient {
 public:
  ThriftHiveMetastoreClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    facebook::fb303::FacebookServiceClient(prot, prot) {}
  ThriftHiveMetastoreClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    facebook::fb303::FacebookServiceClient(iprot, oprot) {}
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool create_database(const std::string& name, const std::string& description);
  void send_create_database(const std::string& name, const std::string& description);
  bool recv_create_database();
  void get_database(Database& _return, const std::string& name);
  void send_get_database(const std::string& name);
  void recv_get_database(Database& _return);
  bool drop_database(const std::string& name);
  void send_drop_database(const std::string& name);
  bool recv_drop_database();
  void get_databases(std::vector<std::string> & _return);
  void send_get_databases();
  void recv_get_databases(std::vector<std::string> & _return);
  void get_type(Type& _return, const std::string& name);
  void send_get_type(const std::string& name);
  void recv_get_type(Type& _return);
  bool create_type(const Type& type);
  void send_create_type(const Type& type);
  bool recv_create_type();
  bool drop_type(const std::string& type);
  void send_drop_type(const std::string& type);
  bool recv_drop_type();
  void get_type_all(std::map<std::string, Type> & _return, const std::string& name);
  void send_get_type_all(const std::string& name);
  void recv_get_type_all(std::map<std::string, Type> & _return);
  void get_fields(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name);
  void send_get_fields(const std::string& db_name, const std::string& table_name);
  void recv_get_fields(std::vector<FieldSchema> & _return);
  void get_schema(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name);
  void send_get_schema(const std::string& db_name, const std::string& table_name);
  void recv_get_schema(std::vector<FieldSchema> & _return);
  void create_table(const Table& tbl);
  void send_create_table(const Table& tbl);
  void recv_create_table();
  void drop_table(const std::string& dbname, const std::string& name, const bool deleteData);
  void send_drop_table(const std::string& dbname, const std::string& name, const bool deleteData);
  void recv_drop_table();
  void get_tables(std::vector<std::string> & _return, const std::string& db_name, const std::string& pattern);
  void send_get_tables(const std::string& db_name, const std::string& pattern);
  void recv_get_tables(std::vector<std::string> & _return);
  void get_table(Table& _return, const std::string& dbname, const std::string& tbl_name);
  void send_get_table(const std::string& dbname, const std::string& tbl_name);
  void recv_get_table(Table& _return);
  void alter_table(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl);
  void send_alter_table(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl);
  void recv_alter_table();
  void add_partition(Partition& _return, const Partition& new_part);
  void send_add_partition(const Partition& new_part);
  void recv_add_partition(Partition& _return);
  void append_partition(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals);
  void send_append_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals);
  void recv_append_partition(Partition& _return);
  bool drop_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const bool deleteData);
  void send_drop_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const bool deleteData);
  bool recv_drop_partition();
  void get_partition(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals);
  void send_get_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals);
  void recv_get_partition(Partition& _return);
  void get_partitions(std::vector<Partition> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_parts);
  void send_get_partitions(const std::string& db_name, const std::string& tbl_name, const int16_t max_parts);
  void recv_get_partitions(std::vector<Partition> & _return);
  void get_partition_names(std::vector<std::string> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_parts);
  void send_get_partition_names(const std::string& db_name, const std::string& tbl_name, const int16_t max_parts);
  void recv_get_partition_names(std::vector<std::string> & _return);
  void alter_partition(const std::string& db_name, const std::string& tbl_name, const Partition& new_part);
  void send_alter_partition(const std::string& db_name, const std::string& tbl_name, const Partition& new_part);
  void recv_alter_partition();
};

class ThriftHiveMetastoreProcessor : virtual public apache::thrift::TProcessor, public facebook::fb303::FacebookServiceProcessor {
 protected:
  boost::shared_ptr<ThriftHiveMetastoreIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (ThriftHiveMetastoreProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*)> processMap_;
  void process_create_database(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_database(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_drop_database(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_databases(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_type(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_create_type(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_drop_type(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_type_all(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_fields(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_schema(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_create_table(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_drop_table(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_tables(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_table(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_alter_table(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_add_partition(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_append_partition(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_drop_partition(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_partition(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_partitions(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_get_partition_names(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_alter_partition(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
 public:
  ThriftHiveMetastoreProcessor(boost::shared_ptr<ThriftHiveMetastoreIf> iface) :
    facebook::fb303::FacebookServiceProcessor(iface),
    iface_(iface) {
    processMap_["create_database"] = &ThriftHiveMetastoreProcessor::process_create_database;
    processMap_["get_database"] = &ThriftHiveMetastoreProcessor::process_get_database;
    processMap_["drop_database"] = &ThriftHiveMetastoreProcessor::process_drop_database;
    processMap_["get_databases"] = &ThriftHiveMetastoreProcessor::process_get_databases;
    processMap_["get_type"] = &ThriftHiveMetastoreProcessor::process_get_type;
    processMap_["create_type"] = &ThriftHiveMetastoreProcessor::process_create_type;
    processMap_["drop_type"] = &ThriftHiveMetastoreProcessor::process_drop_type;
    processMap_["get_type_all"] = &ThriftHiveMetastoreProcessor::process_get_type_all;
    processMap_["get_fields"] = &ThriftHiveMetastoreProcessor::process_get_fields;
    processMap_["get_schema"] = &ThriftHiveMetastoreProcessor::process_get_schema;
    processMap_["create_table"] = &ThriftHiveMetastoreProcessor::process_create_table;
    processMap_["drop_table"] = &ThriftHiveMetastoreProcessor::process_drop_table;
    processMap_["get_tables"] = &ThriftHiveMetastoreProcessor::process_get_tables;
    processMap_["get_table"] = &ThriftHiveMetastoreProcessor::process_get_table;
    processMap_["alter_table"] = &ThriftHiveMetastoreProcessor::process_alter_table;
    processMap_["add_partition"] = &ThriftHiveMetastoreProcessor::process_add_partition;
    processMap_["append_partition"] = &ThriftHiveMetastoreProcessor::process_append_partition;
    processMap_["drop_partition"] = &ThriftHiveMetastoreProcessor::process_drop_partition;
    processMap_["get_partition"] = &ThriftHiveMetastoreProcessor::process_get_partition;
    processMap_["get_partitions"] = &ThriftHiveMetastoreProcessor::process_get_partitions;
    processMap_["get_partition_names"] = &ThriftHiveMetastoreProcessor::process_get_partition_names;
    processMap_["alter_partition"] = &ThriftHiveMetastoreProcessor::process_alter_partition;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot);
  virtual ~ThriftHiveMetastoreProcessor() {}
};

class ThriftHiveMetastoreMultiface : virtual public ThriftHiveMetastoreIf, public facebook::fb303::FacebookServiceMultiface {
 public:
  ThriftHiveMetastoreMultiface(std::vector<boost::shared_ptr<ThriftHiveMetastoreIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<ThriftHiveMetastoreIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      facebook::fb303::FacebookServiceMultiface::add(*iter);
    }
  }
  virtual ~ThriftHiveMetastoreMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ThriftHiveMetastoreIf> > ifaces_;
  ThriftHiveMetastoreMultiface() {}
  void add(boost::shared_ptr<ThriftHiveMetastoreIf> iface) {
    facebook::fb303::FacebookServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  bool create_database(const std::string& name, const std::string& description) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->create_database(name, description);
      } else {
        ifaces_[i]->create_database(name, description);
      }
    }
  }

  void get_database(Database& _return, const std::string& name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_database(_return, name);
        return;
      } else {
        ifaces_[i]->get_database(_return, name);
      }
    }
  }

  bool drop_database(const std::string& name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->drop_database(name);
      } else {
        ifaces_[i]->drop_database(name);
      }
    }
  }

  void get_databases(std::vector<std::string> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_databases(_return);
        return;
      } else {
        ifaces_[i]->get_databases(_return);
      }
    }
  }

  void get_type(Type& _return, const std::string& name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_type(_return, name);
        return;
      } else {
        ifaces_[i]->get_type(_return, name);
      }
    }
  }

  bool create_type(const Type& type) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->create_type(type);
      } else {
        ifaces_[i]->create_type(type);
      }
    }
  }

  bool drop_type(const std::string& type) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->drop_type(type);
      } else {
        ifaces_[i]->drop_type(type);
      }
    }
  }

  void get_type_all(std::map<std::string, Type> & _return, const std::string& name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_type_all(_return, name);
        return;
      } else {
        ifaces_[i]->get_type_all(_return, name);
      }
    }
  }

  void get_fields(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_fields(_return, db_name, table_name);
        return;
      } else {
        ifaces_[i]->get_fields(_return, db_name, table_name);
      }
    }
  }

  void get_schema(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_schema(_return, db_name, table_name);
        return;
      } else {
        ifaces_[i]->get_schema(_return, db_name, table_name);
      }
    }
  }

  void create_table(const Table& tbl) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->create_table(tbl);
    }
  }

  void drop_table(const std::string& dbname, const std::string& name, const bool deleteData) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->drop_table(dbname, name, deleteData);
    }
  }

  void get_tables(std::vector<std::string> & _return, const std::string& db_name, const std::string& pattern) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_tables(_return, db_name, pattern);
        return;
      } else {
        ifaces_[i]->get_tables(_return, db_name, pattern);
      }
    }
  }

  void get_table(Table& _return, const std::string& dbname, const std::string& tbl_name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_table(_return, dbname, tbl_name);
        return;
      } else {
        ifaces_[i]->get_table(_return, dbname, tbl_name);
      }
    }
  }

  void alter_table(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->alter_table(dbname, tbl_name, new_tbl);
    }
  }

  void add_partition(Partition& _return, const Partition& new_part) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->add_partition(_return, new_part);
        return;
      } else {
        ifaces_[i]->add_partition(_return, new_part);
      }
    }
  }

  void append_partition(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->append_partition(_return, db_name, tbl_name, part_vals);
        return;
      } else {
        ifaces_[i]->append_partition(_return, db_name, tbl_name, part_vals);
      }
    }
  }

  bool drop_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const bool deleteData) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->drop_partition(db_name, tbl_name, part_vals, deleteData);
      } else {
        ifaces_[i]->drop_partition(db_name, tbl_name, part_vals, deleteData);
      }
    }
  }

  void get_partition(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_partition(_return, db_name, tbl_name, part_vals);
        return;
      } else {
        ifaces_[i]->get_partition(_return, db_name, tbl_name, part_vals);
      }
    }
  }

  void get_partitions(std::vector<Partition> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_parts) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_partitions(_return, db_name, tbl_name, max_parts);
        return;
      } else {
        ifaces_[i]->get_partitions(_return, db_name, tbl_name, max_parts);
      }
    }
  }

  void get_partition_names(std::vector<std::string> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_parts) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_partition_names(_return, db_name, tbl_name, max_parts);
        return;
      } else {
        ifaces_[i]->get_partition_names(_return, db_name, tbl_name, max_parts);
      }
    }
  }

  void alter_partition(const std::string& db_name, const std::string& tbl_name, const Partition& new_part) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->alter_partition(db_name, tbl_name, new_part);
    }
  }

};

}}} // namespace

#endif
