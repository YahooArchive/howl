/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.metastore.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Order implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Order");
  private static final TField COL_FIELD_DESC = new TField("col", TType.STRING, (short)1);
  private static final TField ORDER_FIELD_DESC = new TField("order", TType.I32, (short)2);

  private String col;
  public static final int COL = 1;
  private int order;
  public static final int ORDER = 2;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean order = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(COL, new FieldMetaData("col", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(ORDER, new FieldMetaData("order", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Order.class, metaDataMap);
  }

  public Order() {
  }

  public Order(
    String col,
    int order)
  {
    this();
    this.col = col;
    this.order = order;
    this.__isset.order = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Order(Order other) {
    if (other.isSetCol()) {
      this.col = other.col;
    }
    __isset.order = other.__isset.order;
    this.order = other.order;
  }

  @Override
  public Order clone() {
    return new Order(this);
  }

  public String getCol() {
    return this.col;
  }

  public void setCol(String col) {
    this.col = col;
  }

  public void unsetCol() {
    this.col = null;
  }

  // Returns true if field col is set (has been asigned a value) and false otherwise
  public boolean isSetCol() {
    return this.col != null;
  }

  public int getOrder() {
    return this.order;
  }

  public void setOrder(int order) {
    this.order = order;
    this.__isset.order = true;
  }

  public void unsetOrder() {
    this.__isset.order = false;
  }

  // Returns true if field order is set (has been asigned a value) and false otherwise
  public boolean isSetOrder() {
    return this.__isset.order;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case COL:
      if (value == null) {
        unsetCol();
      } else {
        setCol((String)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case COL:
      return getCol();

    case ORDER:
      return new Integer(getOrder());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case COL:
      return isSetCol();
    case ORDER:
      return isSetOrder();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Order)
      return this.equals((Order)that);
    return false;
  }

  public boolean equals(Order that) {
    if (that == null)
      return false;

    boolean this_present_col = true && this.isSetCol();
    boolean that_present_col = true && that.isSetCol();
    if (this_present_col || that_present_col) {
      if (!(this_present_col && that_present_col))
        return false;
      if (!this.col.equals(that.col))
        return false;
    }

    boolean this_present_order = true;
    boolean that_present_order = true;
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (this.order != that.order)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case COL:
          if (field.type == TType.STRING) {
            this.col = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ORDER:
          if (field.type == TType.I32) {
            this.order = iprot.readI32();
            this.__isset.order = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.col != null) {
      oprot.writeFieldBegin(COL_FIELD_DESC);
      oprot.writeString(this.col);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ORDER_FIELD_DESC);
    oprot.writeI32(this.order);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Order(");
    boolean first = true;

    sb.append("col:");
    if (this.col == null) {
      sb.append("null");
    } else {
      sb.append(this.col);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("order:");
    sb.append(this.order);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

