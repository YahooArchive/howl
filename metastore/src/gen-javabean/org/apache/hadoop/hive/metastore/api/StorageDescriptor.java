/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.metastore.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class StorageDescriptor implements TBase, java.io.Serializable {
private List<FieldSchema> cols;
private String location;
private String inputFormat;
private String outputFormat;
private boolean compressed;
private int numBuckets;
private SerDeInfo serdeInfo;
private List<String> bucketCols;
private List<Order> sortCols;
private Map<String,String> parameters;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean cols = false;
public boolean location = false;
public boolean inputFormat = false;
public boolean outputFormat = false;
public boolean compressed = false;
public boolean numBuckets = false;
public boolean serdeInfo = false;
public boolean bucketCols = false;
public boolean sortCols = false;
public boolean parameters = false;
}

public StorageDescriptor() {
}

public StorageDescriptor(
List<FieldSchema> cols,
String location,
String inputFormat,
String outputFormat,
boolean compressed,
int numBuckets,
SerDeInfo serdeInfo,
List<String> bucketCols,
List<Order> sortCols,
Map<String,String> parameters)
{
this();
this.cols = cols;
this.__isset.cols = true;
this.location = location;
this.__isset.location = true;
this.inputFormat = inputFormat;
this.__isset.inputFormat = true;
this.outputFormat = outputFormat;
this.__isset.outputFormat = true;
this.compressed = compressed;
this.__isset.compressed = true;
this.numBuckets = numBuckets;
this.__isset.numBuckets = true;
this.serdeInfo = serdeInfo;
this.__isset.serdeInfo = true;
this.bucketCols = bucketCols;
this.__isset.bucketCols = true;
this.sortCols = sortCols;
this.__isset.sortCols = true;
this.parameters = parameters;
this.__isset.parameters = true;
}

public int getColsSize() {
return (this.cols == null) ? 0 : this.cols.size();
}

public java.util.Iterator<FieldSchema> getColsIterator() {
return (this.cols == null) ? null : this.cols.iterator();
}

public void addToCols(FieldSchema elem) {
if (this.cols == null) {
this.cols = new ArrayList<FieldSchema>();
}
this.cols.add(elem);
this.__isset.cols = true;
}

public List<FieldSchema> getCols() {
return this.cols;
}

public void setCols(List<FieldSchema> cols) {
this.cols = cols;
this.__isset.cols = true;
}

public void unsetCols() {
this.cols = null;
this.__isset.cols = false;
}

public String getLocation() {
return this.location;
}

public void setLocation(String location) {
this.location = location;
this.__isset.location = true;
}

public void unsetLocation() {
this.__isset.location = false;
}

public String getInputFormat() {
return this.inputFormat;
}

public void setInputFormat(String inputFormat) {
this.inputFormat = inputFormat;
this.__isset.inputFormat = true;
}

public void unsetInputFormat() {
this.__isset.inputFormat = false;
}

public String getOutputFormat() {
return this.outputFormat;
}

public void setOutputFormat(String outputFormat) {
this.outputFormat = outputFormat;
this.__isset.outputFormat = true;
}

public void unsetOutputFormat() {
this.__isset.outputFormat = false;
}

public boolean isCompressed() {
return this.compressed;
}

public void setCompressed(boolean compressed) {
this.compressed = compressed;
this.__isset.compressed = true;
}

public void unsetCompressed() {
this.__isset.compressed = false;
}

public int getNumBuckets() {
return this.numBuckets;
}

public void setNumBuckets(int numBuckets) {
this.numBuckets = numBuckets;
this.__isset.numBuckets = true;
}

public void unsetNumBuckets() {
this.__isset.numBuckets = false;
}

public SerDeInfo getSerdeInfo() {
return this.serdeInfo;
}

public void setSerdeInfo(SerDeInfo serdeInfo) {
this.serdeInfo = serdeInfo;
this.__isset.serdeInfo = true;
}

public void unsetSerdeInfo() {
this.serdeInfo = null;
this.__isset.serdeInfo = false;
}

public int getBucketColsSize() {
return (this.bucketCols == null) ? 0 : this.bucketCols.size();
}

public java.util.Iterator<String> getBucketColsIterator() {
return (this.bucketCols == null) ? null : this.bucketCols.iterator();
}

public void addToBucketCols(String elem) {
if (this.bucketCols == null) {
this.bucketCols = new ArrayList<String>();
}
this.bucketCols.add(elem);
this.__isset.bucketCols = true;
}

public List<String> getBucketCols() {
return this.bucketCols;
}

public void setBucketCols(List<String> bucketCols) {
this.bucketCols = bucketCols;
this.__isset.bucketCols = true;
}

public void unsetBucketCols() {
this.bucketCols = null;
this.__isset.bucketCols = false;
}

public int getSortColsSize() {
return (this.sortCols == null) ? 0 : this.sortCols.size();
}

public java.util.Iterator<Order> getSortColsIterator() {
return (this.sortCols == null) ? null : this.sortCols.iterator();
}

public void addToSortCols(Order elem) {
if (this.sortCols == null) {
this.sortCols = new ArrayList<Order>();
}
this.sortCols.add(elem);
this.__isset.sortCols = true;
}

public List<Order> getSortCols() {
return this.sortCols;
}

public void setSortCols(List<Order> sortCols) {
this.sortCols = sortCols;
this.__isset.sortCols = true;
}

public void unsetSortCols() {
this.sortCols = null;
this.__isset.sortCols = false;
}

public int getParametersSize() {
return (this.parameters == null) ? 0 : this.parameters.size();
}

public void putToParameters(String key, String val) {
if (this.parameters == null) {
this.parameters = new HashMap<String,String>();
}
this.parameters.put(key, val);
this.__isset.parameters = true;
}

public Map<String,String> getParameters() {
return this.parameters;
}

public void setParameters(Map<String,String> parameters) {
this.parameters = parameters;
this.__isset.parameters = true;
}

public void unsetParameters() {
this.parameters = null;
this.__isset.parameters = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof StorageDescriptor)
  return this.equals((StorageDescriptor)that);
return false;
}

public boolean equals(StorageDescriptor that) {
if (that == null)
  return false;

boolean this_present_cols = true && (this.cols != null);
boolean that_present_cols = true && (that.cols != null);
if (this_present_cols || that_present_cols) {
if (!(this_present_cols && that_present_cols))
  return false;
if (!this.cols.equals(that.cols))
  return false;
}

boolean this_present_location = true && (this.location != null);
boolean that_present_location = true && (that.location != null);
if (this_present_location || that_present_location) {
if (!(this_present_location && that_present_location))
  return false;
if (!this.location.equals(that.location))
  return false;
}

boolean this_present_inputFormat = true && (this.inputFormat != null);
boolean that_present_inputFormat = true && (that.inputFormat != null);
if (this_present_inputFormat || that_present_inputFormat) {
if (!(this_present_inputFormat && that_present_inputFormat))
  return false;
if (!this.inputFormat.equals(that.inputFormat))
  return false;
}

boolean this_present_outputFormat = true && (this.outputFormat != null);
boolean that_present_outputFormat = true && (that.outputFormat != null);
if (this_present_outputFormat || that_present_outputFormat) {
if (!(this_present_outputFormat && that_present_outputFormat))
  return false;
if (!this.outputFormat.equals(that.outputFormat))
  return false;
}

boolean this_present_compressed = true;
boolean that_present_compressed = true;
if (this_present_compressed || that_present_compressed) {
if (!(this_present_compressed && that_present_compressed))
  return false;
if (this.compressed != that.compressed)
  return false;
}

boolean this_present_numBuckets = true;
boolean that_present_numBuckets = true;
if (this_present_numBuckets || that_present_numBuckets) {
if (!(this_present_numBuckets && that_present_numBuckets))
  return false;
if (this.numBuckets != that.numBuckets)
  return false;
}

boolean this_present_serdeInfo = true && (this.serdeInfo != null);
boolean that_present_serdeInfo = true && (that.serdeInfo != null);
if (this_present_serdeInfo || that_present_serdeInfo) {
if (!(this_present_serdeInfo && that_present_serdeInfo))
  return false;
if (!this.serdeInfo.equals(that.serdeInfo))
  return false;
}

boolean this_present_bucketCols = true && (this.bucketCols != null);
boolean that_present_bucketCols = true && (that.bucketCols != null);
if (this_present_bucketCols || that_present_bucketCols) {
if (!(this_present_bucketCols && that_present_bucketCols))
  return false;
if (!this.bucketCols.equals(that.bucketCols))
  return false;
}

boolean this_present_sortCols = true && (this.sortCols != null);
boolean that_present_sortCols = true && (that.sortCols != null);
if (this_present_sortCols || that_present_sortCols) {
if (!(this_present_sortCols && that_present_sortCols))
  return false;
if (!this.sortCols.equals(that.sortCols))
  return false;
}

boolean this_present_parameters = true && (this.parameters != null);
boolean that_present_parameters = true && (that.parameters != null);
if (this_present_parameters || that_present_parameters) {
if (!(this_present_parameters && that_present_parameters))
  return false;
if (!this.parameters.equals(that.parameters))
  return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
field = iprot.readFieldBegin();
if (field.type == TType.STOP) { 
  break;
}
switch (field.id)
{
  case 1:
    if (field.type == TType.LIST) {
      {
        TList _list9 = iprot.readListBegin();
        this.cols = new ArrayList<FieldSchema>(_list9.size);
        for (int _i10 = 0; _i10 < _list9.size; ++_i10)
        {
          FieldSchema _elem11 = new FieldSchema();
          _elem11 = new FieldSchema();
          _elem11.read(iprot);
          this.cols.add(_elem11);
        }
        iprot.readListEnd();
      }
      this.__isset.cols = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 2:
    if (field.type == TType.STRING) {
      this.location = iprot.readString();
      this.__isset.location = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 3:
    if (field.type == TType.STRING) {
      this.inputFormat = iprot.readString();
      this.__isset.inputFormat = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 4:
    if (field.type == TType.STRING) {
      this.outputFormat = iprot.readString();
      this.__isset.outputFormat = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 5:
    if (field.type == TType.BOOL) {
      this.compressed = iprot.readBool();
      this.__isset.compressed = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 6:
    if (field.type == TType.I32) {
      this.numBuckets = iprot.readI32();
      this.__isset.numBuckets = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 7:
    if (field.type == TType.STRUCT) {
      this.serdeInfo = new SerDeInfo();
      this.serdeInfo.read(iprot);
      this.__isset.serdeInfo = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 8:
    if (field.type == TType.LIST) {
      {
        TList _list12 = iprot.readListBegin();
        this.bucketCols = new ArrayList<String>(_list12.size);
        for (int _i13 = 0; _i13 < _list12.size; ++_i13)
        {
          String _elem14 = null;
          _elem14 = iprot.readString();
          this.bucketCols.add(_elem14);
        }
        iprot.readListEnd();
      }
      this.__isset.bucketCols = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 9:
    if (field.type == TType.LIST) {
      {
        TList _list15 = iprot.readListBegin();
        this.sortCols = new ArrayList<Order>(_list15.size);
        for (int _i16 = 0; _i16 < _list15.size; ++_i16)
        {
          Order _elem17 = new Order();
          _elem17 = new Order();
          _elem17.read(iprot);
          this.sortCols.add(_elem17);
        }
        iprot.readListEnd();
      }
      this.__isset.sortCols = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 10:
    if (field.type == TType.MAP) {
      {
        TMap _map18 = iprot.readMapBegin();
        this.parameters = new HashMap<String,String>(2*_map18.size);
        for (int _i19 = 0; _i19 < _map18.size; ++_i19)
        {
          String _key20;
          String _val21;
          _key20 = iprot.readString();
          _val21 = iprot.readString();
          this.parameters.put(_key20, _val21);
        }
        iprot.readMapEnd();
      }
      this.__isset.parameters = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  default:
    TProtocolUtil.skip(iprot, field.type);
    break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("StorageDescriptor");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.cols != null) {
field.name = "cols";
field.type = TType.LIST;
field.id = 1;
oprot.writeFieldBegin(field);
{
  oprot.writeListBegin(new TList(TType.STRUCT, this.cols.size()));
  for (FieldSchema _iter22 : this.cols)  {
    _iter22.write(oprot);
  }
  oprot.writeListEnd();
}
oprot.writeFieldEnd();
}
if (this.location != null) {
field.name = "location";
field.type = TType.STRING;
field.id = 2;
oprot.writeFieldBegin(field);
oprot.writeString(this.location);
oprot.writeFieldEnd();
}
if (this.inputFormat != null) {
field.name = "inputFormat";
field.type = TType.STRING;
field.id = 3;
oprot.writeFieldBegin(field);
oprot.writeString(this.inputFormat);
oprot.writeFieldEnd();
}
if (this.outputFormat != null) {
field.name = "outputFormat";
field.type = TType.STRING;
field.id = 4;
oprot.writeFieldBegin(field);
oprot.writeString(this.outputFormat);
oprot.writeFieldEnd();
}
field.name = "compressed";
field.type = TType.BOOL;
field.id = 5;
oprot.writeFieldBegin(field);
oprot.writeBool(this.compressed);
oprot.writeFieldEnd();
field.name = "numBuckets";
field.type = TType.I32;
field.id = 6;
oprot.writeFieldBegin(field);
oprot.writeI32(this.numBuckets);
oprot.writeFieldEnd();
if (this.serdeInfo != null) {
field.name = "serdeInfo";
field.type = TType.STRUCT;
field.id = 7;
oprot.writeFieldBegin(field);
this.serdeInfo.write(oprot);
oprot.writeFieldEnd();
}
if (this.bucketCols != null) {
field.name = "bucketCols";
field.type = TType.LIST;
field.id = 8;
oprot.writeFieldBegin(field);
{
  oprot.writeListBegin(new TList(TType.STRING, this.bucketCols.size()));
  for (String _iter23 : this.bucketCols)  {
    oprot.writeString(_iter23);
  }
  oprot.writeListEnd();
}
oprot.writeFieldEnd();
}
if (this.sortCols != null) {
field.name = "sortCols";
field.type = TType.LIST;
field.id = 9;
oprot.writeFieldBegin(field);
{
  oprot.writeListBegin(new TList(TType.STRUCT, this.sortCols.size()));
  for (Order _iter24 : this.sortCols)  {
    _iter24.write(oprot);
  }
  oprot.writeListEnd();
}
oprot.writeFieldEnd();
}
if (this.parameters != null) {
field.name = "parameters";
field.type = TType.MAP;
field.id = 10;
oprot.writeFieldBegin(field);
{
  oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.parameters.size()));
  for (String _iter25 : this.parameters.keySet())  {
    oprot.writeString(_iter25);
    oprot.writeString(this.parameters.get(_iter25));
  }
  oprot.writeMapEnd();
}
oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("StorageDescriptor(");
sb.append("cols:");
sb.append(this.cols);
sb.append(",location:");
sb.append(this.location);
sb.append(",inputFormat:");
sb.append(this.inputFormat);
sb.append(",outputFormat:");
sb.append(this.outputFormat);
sb.append(",compressed:");
sb.append(this.compressed);
sb.append(",numBuckets:");
sb.append(this.numBuckets);
sb.append(",serdeInfo:");
sb.append(this.serdeInfo);
sb.append(",bucketCols:");
sb.append(this.bucketCols);
sb.append(",sortCols:");
sb.append(this.sortCols);
sb.append(",parameters:");
sb.append(this.parameters);
sb.append(")");
return sb.toString();
}

}

