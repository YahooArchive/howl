/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.metastore.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class Table implements TBase, java.io.Serializable {
private String tableName;
private String dbName;
private String owner;
private int createTime;
private int lastAccessTime;
private int retention;
private StorageDescriptor sd;
private List<FieldSchema> partitionKeys;
private Map<String,String> parameters;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean tableName = false;
public boolean dbName = false;
public boolean owner = false;
public boolean createTime = false;
public boolean lastAccessTime = false;
public boolean retention = false;
public boolean sd = false;
public boolean partitionKeys = false;
public boolean parameters = false;
}

public Table() {
}

public Table(
String tableName,
String dbName,
String owner,
int createTime,
int lastAccessTime,
int retention,
StorageDescriptor sd,
List<FieldSchema> partitionKeys,
Map<String,String> parameters)
{
this();
this.tableName = tableName;
this.__isset.tableName = true;
this.dbName = dbName;
this.__isset.dbName = true;
this.owner = owner;
this.__isset.owner = true;
this.createTime = createTime;
this.__isset.createTime = true;
this.lastAccessTime = lastAccessTime;
this.__isset.lastAccessTime = true;
this.retention = retention;
this.__isset.retention = true;
this.sd = sd;
this.__isset.sd = true;
this.partitionKeys = partitionKeys;
this.__isset.partitionKeys = true;
this.parameters = parameters;
this.__isset.parameters = true;
}

public String getTableName() {
return this.tableName;
}

public void setTableName(String tableName) {
this.tableName = tableName;
this.__isset.tableName = true;
}

public void unsetTableName() {
this.__isset.tableName = false;
}

public String getDbName() {
return this.dbName;
}

public void setDbName(String dbName) {
this.dbName = dbName;
this.__isset.dbName = true;
}

public void unsetDbName() {
this.__isset.dbName = false;
}

public String getOwner() {
return this.owner;
}

public void setOwner(String owner) {
this.owner = owner;
this.__isset.owner = true;
}

public void unsetOwner() {
this.__isset.owner = false;
}

public int getCreateTime() {
return this.createTime;
}

public void setCreateTime(int createTime) {
this.createTime = createTime;
this.__isset.createTime = true;
}

public void unsetCreateTime() {
this.__isset.createTime = false;
}

public int getLastAccessTime() {
return this.lastAccessTime;
}

public void setLastAccessTime(int lastAccessTime) {
this.lastAccessTime = lastAccessTime;
this.__isset.lastAccessTime = true;
}

public void unsetLastAccessTime() {
this.__isset.lastAccessTime = false;
}

public int getRetention() {
return this.retention;
}

public void setRetention(int retention) {
this.retention = retention;
this.__isset.retention = true;
}

public void unsetRetention() {
this.__isset.retention = false;
}

public StorageDescriptor getSd() {
return this.sd;
}

public void setSd(StorageDescriptor sd) {
this.sd = sd;
this.__isset.sd = true;
}

public void unsetSd() {
this.sd = null;
this.__isset.sd = false;
}

public int getPartitionKeysSize() {
return (this.partitionKeys == null) ? 0 : this.partitionKeys.size();
}

public java.util.Iterator<FieldSchema> getPartitionKeysIterator() {
return (this.partitionKeys == null) ? null : this.partitionKeys.iterator();
}

public void addToPartitionKeys(FieldSchema elem) {
if (this.partitionKeys == null) {
this.partitionKeys = new ArrayList<FieldSchema>();
}
this.partitionKeys.add(elem);
this.__isset.partitionKeys = true;
}

public List<FieldSchema> getPartitionKeys() {
return this.partitionKeys;
}

public void setPartitionKeys(List<FieldSchema> partitionKeys) {
this.partitionKeys = partitionKeys;
this.__isset.partitionKeys = true;
}

public void unsetPartitionKeys() {
this.partitionKeys = null;
this.__isset.partitionKeys = false;
}

public int getParametersSize() {
return (this.parameters == null) ? 0 : this.parameters.size();
}

public void putToParameters(String key, String val) {
if (this.parameters == null) {
this.parameters = new HashMap<String,String>();
}
this.parameters.put(key, val);
this.__isset.parameters = true;
}

public Map<String,String> getParameters() {
return this.parameters;
}

public void setParameters(Map<String,String> parameters) {
this.parameters = parameters;
this.__isset.parameters = true;
}

public void unsetParameters() {
this.parameters = null;
this.__isset.parameters = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof Table)
  return this.equals((Table)that);
return false;
}

public boolean equals(Table that) {
if (that == null)
  return false;

boolean this_present_tableName = true && (this.tableName != null);
boolean that_present_tableName = true && (that.tableName != null);
if (this_present_tableName || that_present_tableName) {
if (!(this_present_tableName && that_present_tableName))
  return false;
if (!this.tableName.equals(that.tableName))
  return false;
}

boolean this_present_dbName = true && (this.dbName != null);
boolean that_present_dbName = true && (that.dbName != null);
if (this_present_dbName || that_present_dbName) {
if (!(this_present_dbName && that_present_dbName))
  return false;
if (!this.dbName.equals(that.dbName))
  return false;
}

boolean this_present_owner = true && (this.owner != null);
boolean that_present_owner = true && (that.owner != null);
if (this_present_owner || that_present_owner) {
if (!(this_present_owner && that_present_owner))
  return false;
if (!this.owner.equals(that.owner))
  return false;
}

boolean this_present_createTime = true;
boolean that_present_createTime = true;
if (this_present_createTime || that_present_createTime) {
if (!(this_present_createTime && that_present_createTime))
  return false;
if (this.createTime != that.createTime)
  return false;
}

boolean this_present_lastAccessTime = true;
boolean that_present_lastAccessTime = true;
if (this_present_lastAccessTime || that_present_lastAccessTime) {
if (!(this_present_lastAccessTime && that_present_lastAccessTime))
  return false;
if (this.lastAccessTime != that.lastAccessTime)
  return false;
}

boolean this_present_retention = true;
boolean that_present_retention = true;
if (this_present_retention || that_present_retention) {
if (!(this_present_retention && that_present_retention))
  return false;
if (this.retention != that.retention)
  return false;
}

boolean this_present_sd = true && (this.sd != null);
boolean that_present_sd = true && (that.sd != null);
if (this_present_sd || that_present_sd) {
if (!(this_present_sd && that_present_sd))
  return false;
if (!this.sd.equals(that.sd))
  return false;
}

boolean this_present_partitionKeys = true && (this.partitionKeys != null);
boolean that_present_partitionKeys = true && (that.partitionKeys != null);
if (this_present_partitionKeys || that_present_partitionKeys) {
if (!(this_present_partitionKeys && that_present_partitionKeys))
  return false;
if (!this.partitionKeys.equals(that.partitionKeys))
  return false;
}

boolean this_present_parameters = true && (this.parameters != null);
boolean that_present_parameters = true && (that.parameters != null);
if (this_present_parameters || that_present_parameters) {
if (!(this_present_parameters && that_present_parameters))
  return false;
if (!this.parameters.equals(that.parameters))
  return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
field = iprot.readFieldBegin();
if (field.type == TType.STOP) { 
  break;
}
switch (field.id)
{
  case 1:
    if (field.type == TType.STRING) {
      this.tableName = iprot.readString();
      this.__isset.tableName = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 2:
    if (field.type == TType.STRING) {
      this.dbName = iprot.readString();
      this.__isset.dbName = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 3:
    if (field.type == TType.STRING) {
      this.owner = iprot.readString();
      this.__isset.owner = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 4:
    if (field.type == TType.I32) {
      this.createTime = iprot.readI32();
      this.__isset.createTime = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 5:
    if (field.type == TType.I32) {
      this.lastAccessTime = iprot.readI32();
      this.__isset.lastAccessTime = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 6:
    if (field.type == TType.I32) {
      this.retention = iprot.readI32();
      this.__isset.retention = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 7:
    if (field.type == TType.STRUCT) {
      this.sd = new StorageDescriptor();
      this.sd.read(iprot);
      this.__isset.sd = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 8:
    if (field.type == TType.LIST) {
      {
        TList _list26 = iprot.readListBegin();
        this.partitionKeys = new ArrayList<FieldSchema>(_list26.size);
        for (int _i27 = 0; _i27 < _list26.size; ++_i27)
        {
          FieldSchema _elem28 = new FieldSchema();
          _elem28 = new FieldSchema();
          _elem28.read(iprot);
          this.partitionKeys.add(_elem28);
        }
        iprot.readListEnd();
      }
      this.__isset.partitionKeys = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 9:
    if (field.type == TType.MAP) {
      {
        TMap _map29 = iprot.readMapBegin();
        this.parameters = new HashMap<String,String>(2*_map29.size);
        for (int _i30 = 0; _i30 < _map29.size; ++_i30)
        {
          String _key31;
          String _val32;
          _key31 = iprot.readString();
          _val32 = iprot.readString();
          this.parameters.put(_key31, _val32);
        }
        iprot.readMapEnd();
      }
      this.__isset.parameters = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  default:
    TProtocolUtil.skip(iprot, field.type);
    break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("Table");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.tableName != null) {
field.name = "tableName";
field.type = TType.STRING;
field.id = 1;
oprot.writeFieldBegin(field);
oprot.writeString(this.tableName);
oprot.writeFieldEnd();
}
if (this.dbName != null) {
field.name = "dbName";
field.type = TType.STRING;
field.id = 2;
oprot.writeFieldBegin(field);
oprot.writeString(this.dbName);
oprot.writeFieldEnd();
}
if (this.owner != null) {
field.name = "owner";
field.type = TType.STRING;
field.id = 3;
oprot.writeFieldBegin(field);
oprot.writeString(this.owner);
oprot.writeFieldEnd();
}
field.name = "createTime";
field.type = TType.I32;
field.id = 4;
oprot.writeFieldBegin(field);
oprot.writeI32(this.createTime);
oprot.writeFieldEnd();
field.name = "lastAccessTime";
field.type = TType.I32;
field.id = 5;
oprot.writeFieldBegin(field);
oprot.writeI32(this.lastAccessTime);
oprot.writeFieldEnd();
field.name = "retention";
field.type = TType.I32;
field.id = 6;
oprot.writeFieldBegin(field);
oprot.writeI32(this.retention);
oprot.writeFieldEnd();
if (this.sd != null) {
field.name = "sd";
field.type = TType.STRUCT;
field.id = 7;
oprot.writeFieldBegin(field);
this.sd.write(oprot);
oprot.writeFieldEnd();
}
if (this.partitionKeys != null) {
field.name = "partitionKeys";
field.type = TType.LIST;
field.id = 8;
oprot.writeFieldBegin(field);
{
  oprot.writeListBegin(new TList(TType.STRUCT, this.partitionKeys.size()));
  for (FieldSchema _iter33 : this.partitionKeys)  {
    _iter33.write(oprot);
  }
  oprot.writeListEnd();
}
oprot.writeFieldEnd();
}
if (this.parameters != null) {
field.name = "parameters";
field.type = TType.MAP;
field.id = 9;
oprot.writeFieldBegin(field);
{
  oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.parameters.size()));
  for (String _iter34 : this.parameters.keySet())  {
    oprot.writeString(_iter34);
    oprot.writeString(this.parameters.get(_iter34));
  }
  oprot.writeMapEnd();
}
oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("Table(");
sb.append("tableName:");
sb.append(this.tableName);
sb.append(",dbName:");
sb.append(this.dbName);
sb.append(",owner:");
sb.append(this.owner);
sb.append(",createTime:");
sb.append(this.createTime);
sb.append(",lastAccessTime:");
sb.append(this.lastAccessTime);
sb.append(",retention:");
sb.append(this.retention);
sb.append(",sd:");
sb.append(this.sd);
sb.append(",partitionKeys:");
sb.append(this.partitionKeys);
sb.append(",parameters:");
sb.append(this.parameters);
sb.append(")");
return sb.toString();
}

}

