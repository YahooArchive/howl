/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.metastore.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class ThriftHiveMetastore {

  /**
   * This interface is live.
   */
  public interface Iface extends com.facebook.fb303.FacebookService.Iface {

    public void create_database(Database database) throws AlreadyExistsException, InvalidObjectException, MetaException, TException;

    public Database get_database(String name) throws NoSuchObjectException, MetaException, TException;

    public void drop_database(String name, boolean deleteData) throws NoSuchObjectException, InvalidOperationException, MetaException, TException;

    public List<String> get_databases(String pattern) throws MetaException, TException;

    public List<String> get_all_databases() throws MetaException, TException;

    public Type get_type(String name) throws MetaException, NoSuchObjectException, TException;

    public boolean create_type(Type type) throws AlreadyExistsException, InvalidObjectException, MetaException, TException;

    public boolean drop_type(String type) throws MetaException, NoSuchObjectException, TException;

    public Map<String,Type> get_type_all(String name) throws MetaException, TException;

    public List<FieldSchema> get_fields(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException;

    public List<FieldSchema> get_schema(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException;

    public void create_table(Table tbl) throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, TException;

    public void drop_table(String dbname, String name, boolean deleteData) throws NoSuchObjectException, MetaException, TException;

    public List<String> get_tables(String db_name, String pattern) throws MetaException, TException;

    public List<String> get_all_tables(String db_name) throws MetaException, TException;

    public Table get_table(String dbname, String tbl_name) throws MetaException, NoSuchObjectException, TException;

    public void alter_table(String dbname, String tbl_name, Table new_tbl) throws InvalidOperationException, MetaException, TException;

    public Partition add_partition(Partition new_part) throws InvalidObjectException, AlreadyExistsException, MetaException, TException;

    public Partition append_partition(String db_name, String tbl_name, List<String> part_vals) throws InvalidObjectException, AlreadyExistsException, MetaException, TException;

    public Partition append_partition_by_name(String db_name, String tbl_name, String part_name) throws InvalidObjectException, AlreadyExistsException, MetaException, TException;

    public boolean drop_partition(String db_name, String tbl_name, List<String> part_vals, boolean deleteData) throws NoSuchObjectException, MetaException, TException;

    public boolean drop_partition_by_name(String db_name, String tbl_name, String part_name, boolean deleteData) throws NoSuchObjectException, MetaException, TException;

    public Partition get_partition(String db_name, String tbl_name, List<String> part_vals) throws MetaException, NoSuchObjectException, TException;

    public Partition get_partition_by_name(String db_name, String tbl_name, String part_name) throws MetaException, NoSuchObjectException, TException;

    public List<Partition> get_partitions(String db_name, String tbl_name, short max_parts) throws NoSuchObjectException, MetaException, TException;

    public List<String> get_partition_names(String db_name, String tbl_name, short max_parts) throws MetaException, TException;

    public List<Partition> get_partitions_ps(String db_name, String tbl_name, List<String> part_vals, short max_parts) throws MetaException, TException;

    public List<String> get_partition_names_ps(String db_name, String tbl_name, List<String> part_vals, short max_parts) throws MetaException, TException;

    public List<Partition> get_partitions_by_filter(String db_name, String tbl_name, String filter, short max_parts) throws MetaException, NoSuchObjectException, TException;

    public void alter_partition(String db_name, String tbl_name, Partition new_part) throws InvalidOperationException, MetaException, TException;

    public String get_config_value(String name, String defaultValue) throws ConfigValSecurityException, TException;

    public List<String> partition_name_to_vals(String part_name) throws MetaException, TException;

    public Map<String,String> partition_name_to_spec(String part_name) throws MetaException, TException;

    public Index add_index(Index new_index, Table index_table) throws InvalidObjectException, AlreadyExistsException, MetaException, TException;

    public boolean drop_index_by_name(String db_name, String tbl_name, String index_name, boolean deleteData) throws NoSuchObjectException, MetaException, TException;

    public Index get_index_by_name(String db_name, String tbl_name, String index_name) throws MetaException, NoSuchObjectException, TException;

    public List<Index> get_indexes(String db_name, String tbl_name, short max_indexes) throws NoSuchObjectException, MetaException, TException;

    public List<String> get_index_names(String db_name, String tbl_name, short max_indexes) throws MetaException, TException;

  }

  public static class Client extends com.facebook.fb303.FacebookService.Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      super(iprot, oprot);
    }

    public void create_database(Database database) throws AlreadyExistsException, InvalidObjectException, MetaException, TException
    {
      send_create_database(database);
      recv_create_database();
    }

    public void send_create_database(Database database) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("create_database", TMessageType.CALL, seqid_));
      create_database_args args = new create_database_args();
      args.database = database;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_create_database() throws AlreadyExistsException, InvalidObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      create_database_result result = new create_database_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      return;
    }

    public Database get_database(String name) throws NoSuchObjectException, MetaException, TException
    {
      send_get_database(name);
      return recv_get_database();
    }

    public void send_get_database(String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_database", TMessageType.CALL, seqid_));
      get_database_args args = new get_database_args();
      args.name = name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Database recv_get_database() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_database_result result = new get_database_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_database failed: unknown result");
    }

    public void drop_database(String name, boolean deleteData) throws NoSuchObjectException, InvalidOperationException, MetaException, TException
    {
      send_drop_database(name, deleteData);
      recv_drop_database();
    }

    public void send_drop_database(String name, boolean deleteData) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_database", TMessageType.CALL, seqid_));
      drop_database_args args = new drop_database_args();
      args.name = name;
      args.deleteData = deleteData;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_drop_database() throws NoSuchObjectException, InvalidOperationException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_database_result result = new drop_database_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      return;
    }

    public List<String> get_databases(String pattern) throws MetaException, TException
    {
      send_get_databases(pattern);
      return recv_get_databases();
    }

    public void send_get_databases(String pattern) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_databases", TMessageType.CALL, seqid_));
      get_databases_args args = new get_databases_args();
      args.pattern = pattern;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_get_databases() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_databases_result result = new get_databases_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_databases failed: unknown result");
    }

    public List<String> get_all_databases() throws MetaException, TException
    {
      send_get_all_databases();
      return recv_get_all_databases();
    }

    public void send_get_all_databases() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_all_databases", TMessageType.CALL, seqid_));
      get_all_databases_args args = new get_all_databases_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_get_all_databases() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_all_databases_result result = new get_all_databases_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_all_databases failed: unknown result");
    }

    public Type get_type(String name) throws MetaException, NoSuchObjectException, TException
    {
      send_get_type(name);
      return recv_get_type();
    }

    public void send_get_type(String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_type", TMessageType.CALL, seqid_));
      get_type_args args = new get_type_args();
      args.name = name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Type recv_get_type() throws MetaException, NoSuchObjectException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_type_result result = new get_type_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_type failed: unknown result");
    }

    public boolean create_type(Type type) throws AlreadyExistsException, InvalidObjectException, MetaException, TException
    {
      send_create_type(type);
      return recv_create_type();
    }

    public void send_create_type(Type type) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("create_type", TMessageType.CALL, seqid_));
      create_type_args args = new create_type_args();
      args.type = type;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_create_type() throws AlreadyExistsException, InvalidObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      create_type_result result = new create_type_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "create_type failed: unknown result");
    }

    public boolean drop_type(String type) throws MetaException, NoSuchObjectException, TException
    {
      send_drop_type(type);
      return recv_drop_type();
    }

    public void send_drop_type(String type) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_type", TMessageType.CALL, seqid_));
      drop_type_args args = new drop_type_args();
      args.type = type;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_drop_type() throws MetaException, NoSuchObjectException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_type_result result = new drop_type_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_type failed: unknown result");
    }

    public Map<String,Type> get_type_all(String name) throws MetaException, TException
    {
      send_get_type_all(name);
      return recv_get_type_all();
    }

    public void send_get_type_all(String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_type_all", TMessageType.CALL, seqid_));
      get_type_all_args args = new get_type_all_args();
      args.name = name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Map<String,Type> recv_get_type_all() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_type_all_result result = new get_type_all_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_type_all failed: unknown result");
    }

    public List<FieldSchema> get_fields(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException
    {
      send_get_fields(db_name, table_name);
      return recv_get_fields();
    }

    public void send_get_fields(String db_name, String table_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_fields", TMessageType.CALL, seqid_));
      get_fields_args args = new get_fields_args();
      args.db_name = db_name;
      args.table_name = table_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<FieldSchema> recv_get_fields() throws MetaException, UnknownTableException, UnknownDBException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_fields_result result = new get_fields_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_fields failed: unknown result");
    }

    public List<FieldSchema> get_schema(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException
    {
      send_get_schema(db_name, table_name);
      return recv_get_schema();
    }

    public void send_get_schema(String db_name, String table_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_schema", TMessageType.CALL, seqid_));
      get_schema_args args = new get_schema_args();
      args.db_name = db_name;
      args.table_name = table_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<FieldSchema> recv_get_schema() throws MetaException, UnknownTableException, UnknownDBException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_schema_result result = new get_schema_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_schema failed: unknown result");
    }

    public void create_table(Table tbl) throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, TException
    {
      send_create_table(tbl);
      recv_create_table();
    }

    public void send_create_table(Table tbl) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("create_table", TMessageType.CALL, seqid_));
      create_table_args args = new create_table_args();
      args.tbl = tbl;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_create_table() throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      create_table_result result = new create_table_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      if (result.o4 != null) {
        throw result.o4;
      }
      return;
    }

    public void drop_table(String dbname, String name, boolean deleteData) throws NoSuchObjectException, MetaException, TException
    {
      send_drop_table(dbname, name, deleteData);
      recv_drop_table();
    }

    public void send_drop_table(String dbname, String name, boolean deleteData) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_table", TMessageType.CALL, seqid_));
      drop_table_args args = new drop_table_args();
      args.dbname = dbname;
      args.name = name;
      args.deleteData = deleteData;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_drop_table() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_table_result result = new drop_table_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      return;
    }

    public List<String> get_tables(String db_name, String pattern) throws MetaException, TException
    {
      send_get_tables(db_name, pattern);
      return recv_get_tables();
    }

    public void send_get_tables(String db_name, String pattern) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_tables", TMessageType.CALL, seqid_));
      get_tables_args args = new get_tables_args();
      args.db_name = db_name;
      args.pattern = pattern;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_get_tables() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_tables_result result = new get_tables_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_tables failed: unknown result");
    }

    public List<String> get_all_tables(String db_name) throws MetaException, TException
    {
      send_get_all_tables(db_name);
      return recv_get_all_tables();
    }

    public void send_get_all_tables(String db_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_all_tables", TMessageType.CALL, seqid_));
      get_all_tables_args args = new get_all_tables_args();
      args.db_name = db_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_get_all_tables() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_all_tables_result result = new get_all_tables_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_all_tables failed: unknown result");
    }

    public Table get_table(String dbname, String tbl_name) throws MetaException, NoSuchObjectException, TException
    {
      send_get_table(dbname, tbl_name);
      return recv_get_table();
    }

    public void send_get_table(String dbname, String tbl_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_table", TMessageType.CALL, seqid_));
      get_table_args args = new get_table_args();
      args.dbname = dbname;
      args.tbl_name = tbl_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Table recv_get_table() throws MetaException, NoSuchObjectException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_table_result result = new get_table_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_table failed: unknown result");
    }

    public void alter_table(String dbname, String tbl_name, Table new_tbl) throws InvalidOperationException, MetaException, TException
    {
      send_alter_table(dbname, tbl_name, new_tbl);
      recv_alter_table();
    }

    public void send_alter_table(String dbname, String tbl_name, Table new_tbl) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("alter_table", TMessageType.CALL, seqid_));
      alter_table_args args = new alter_table_args();
      args.dbname = dbname;
      args.tbl_name = tbl_name;
      args.new_tbl = new_tbl;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_alter_table() throws InvalidOperationException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      alter_table_result result = new alter_table_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      return;
    }

    public Partition add_partition(Partition new_part) throws InvalidObjectException, AlreadyExistsException, MetaException, TException
    {
      send_add_partition(new_part);
      return recv_add_partition();
    }

    public void send_add_partition(Partition new_part) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("add_partition", TMessageType.CALL, seqid_));
      add_partition_args args = new add_partition_args();
      args.new_part = new_part;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Partition recv_add_partition() throws InvalidObjectException, AlreadyExistsException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      add_partition_result result = new add_partition_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "add_partition failed: unknown result");
    }

    public Partition append_partition(String db_name, String tbl_name, List<String> part_vals) throws InvalidObjectException, AlreadyExistsException, MetaException, TException
    {
      send_append_partition(db_name, tbl_name, part_vals);
      return recv_append_partition();
    }

    public void send_append_partition(String db_name, String tbl_name, List<String> part_vals) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("append_partition", TMessageType.CALL, seqid_));
      append_partition_args args = new append_partition_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.part_vals = part_vals;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Partition recv_append_partition() throws InvalidObjectException, AlreadyExistsException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      append_partition_result result = new append_partition_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "append_partition failed: unknown result");
    }

    public Partition append_partition_by_name(String db_name, String tbl_name, String part_name) throws InvalidObjectException, AlreadyExistsException, MetaException, TException
    {
      send_append_partition_by_name(db_name, tbl_name, part_name);
      return recv_append_partition_by_name();
    }

    public void send_append_partition_by_name(String db_name, String tbl_name, String part_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("append_partition_by_name", TMessageType.CALL, seqid_));
      append_partition_by_name_args args = new append_partition_by_name_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.part_name = part_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Partition recv_append_partition_by_name() throws InvalidObjectException, AlreadyExistsException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      append_partition_by_name_result result = new append_partition_by_name_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "append_partition_by_name failed: unknown result");
    }

    public boolean drop_partition(String db_name, String tbl_name, List<String> part_vals, boolean deleteData) throws NoSuchObjectException, MetaException, TException
    {
      send_drop_partition(db_name, tbl_name, part_vals, deleteData);
      return recv_drop_partition();
    }

    public void send_drop_partition(String db_name, String tbl_name, List<String> part_vals, boolean deleteData) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_partition", TMessageType.CALL, seqid_));
      drop_partition_args args = new drop_partition_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.part_vals = part_vals;
      args.deleteData = deleteData;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_drop_partition() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_partition_result result = new drop_partition_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_partition failed: unknown result");
    }

    public boolean drop_partition_by_name(String db_name, String tbl_name, String part_name, boolean deleteData) throws NoSuchObjectException, MetaException, TException
    {
      send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData);
      return recv_drop_partition_by_name();
    }

    public void send_drop_partition_by_name(String db_name, String tbl_name, String part_name, boolean deleteData) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_partition_by_name", TMessageType.CALL, seqid_));
      drop_partition_by_name_args args = new drop_partition_by_name_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.part_name = part_name;
      args.deleteData = deleteData;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_drop_partition_by_name() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_partition_by_name_result result = new drop_partition_by_name_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_partition_by_name failed: unknown result");
    }

    public Partition get_partition(String db_name, String tbl_name, List<String> part_vals) throws MetaException, NoSuchObjectException, TException
    {
      send_get_partition(db_name, tbl_name, part_vals);
      return recv_get_partition();
    }

    public void send_get_partition(String db_name, String tbl_name, List<String> part_vals) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_partition", TMessageType.CALL, seqid_));
      get_partition_args args = new get_partition_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.part_vals = part_vals;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Partition recv_get_partition() throws MetaException, NoSuchObjectException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_partition_result result = new get_partition_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_partition failed: unknown result");
    }

    public Partition get_partition_by_name(String db_name, String tbl_name, String part_name) throws MetaException, NoSuchObjectException, TException
    {
      send_get_partition_by_name(db_name, tbl_name, part_name);
      return recv_get_partition_by_name();
    }

    public void send_get_partition_by_name(String db_name, String tbl_name, String part_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_partition_by_name", TMessageType.CALL, seqid_));
      get_partition_by_name_args args = new get_partition_by_name_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.part_name = part_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Partition recv_get_partition_by_name() throws MetaException, NoSuchObjectException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_partition_by_name_result result = new get_partition_by_name_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_partition_by_name failed: unknown result");
    }

    public List<Partition> get_partitions(String db_name, String tbl_name, short max_parts) throws NoSuchObjectException, MetaException, TException
    {
      send_get_partitions(db_name, tbl_name, max_parts);
      return recv_get_partitions();
    }

    public void send_get_partitions(String db_name, String tbl_name, short max_parts) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_partitions", TMessageType.CALL, seqid_));
      get_partitions_args args = new get_partitions_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.max_parts = max_parts;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Partition> recv_get_partitions() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_partitions_result result = new get_partitions_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_partitions failed: unknown result");
    }

    public List<String> get_partition_names(String db_name, String tbl_name, short max_parts) throws MetaException, TException
    {
      send_get_partition_names(db_name, tbl_name, max_parts);
      return recv_get_partition_names();
    }

    public void send_get_partition_names(String db_name, String tbl_name, short max_parts) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_partition_names", TMessageType.CALL, seqid_));
      get_partition_names_args args = new get_partition_names_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.max_parts = max_parts;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_get_partition_names() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_partition_names_result result = new get_partition_names_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_partition_names failed: unknown result");
    }

    public List<Partition> get_partitions_ps(String db_name, String tbl_name, List<String> part_vals, short max_parts) throws MetaException, TException
    {
      send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts);
      return recv_get_partitions_ps();
    }

    public void send_get_partitions_ps(String db_name, String tbl_name, List<String> part_vals, short max_parts) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_partitions_ps", TMessageType.CALL, seqid_));
      get_partitions_ps_args args = new get_partitions_ps_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.part_vals = part_vals;
      args.max_parts = max_parts;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Partition> recv_get_partitions_ps() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_partitions_ps_result result = new get_partitions_ps_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_partitions_ps failed: unknown result");
    }

    public List<String> get_partition_names_ps(String db_name, String tbl_name, List<String> part_vals, short max_parts) throws MetaException, TException
    {
      send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts);
      return recv_get_partition_names_ps();
    }

    public void send_get_partition_names_ps(String db_name, String tbl_name, List<String> part_vals, short max_parts) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_partition_names_ps", TMessageType.CALL, seqid_));
      get_partition_names_ps_args args = new get_partition_names_ps_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.part_vals = part_vals;
      args.max_parts = max_parts;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_get_partition_names_ps() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_partition_names_ps_result result = new get_partition_names_ps_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_partition_names_ps failed: unknown result");
    }

    public List<Partition> get_partitions_by_filter(String db_name, String tbl_name, String filter, short max_parts) throws MetaException, NoSuchObjectException, TException
    {
      send_get_partitions_by_filter(db_name, tbl_name, filter, max_parts);
      return recv_get_partitions_by_filter();
    }

    public void send_get_partitions_by_filter(String db_name, String tbl_name, String filter, short max_parts) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_partitions_by_filter", TMessageType.CALL, seqid_));
      get_partitions_by_filter_args args = new get_partitions_by_filter_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.filter = filter;
      args.max_parts = max_parts;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Partition> recv_get_partitions_by_filter() throws MetaException, NoSuchObjectException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_partitions_by_filter_result result = new get_partitions_by_filter_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_partitions_by_filter failed: unknown result");
    }

    public void alter_partition(String db_name, String tbl_name, Partition new_part) throws InvalidOperationException, MetaException, TException
    {
      send_alter_partition(db_name, tbl_name, new_part);
      recv_alter_partition();
    }

    public void send_alter_partition(String db_name, String tbl_name, Partition new_part) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("alter_partition", TMessageType.CALL, seqid_));
      alter_partition_args args = new alter_partition_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.new_part = new_part;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_alter_partition() throws InvalidOperationException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      alter_partition_result result = new alter_partition_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      return;
    }

    public String get_config_value(String name, String defaultValue) throws ConfigValSecurityException, TException
    {
      send_get_config_value(name, defaultValue);
      return recv_get_config_value();
    }

    public void send_get_config_value(String name, String defaultValue) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_config_value", TMessageType.CALL, seqid_));
      get_config_value_args args = new get_config_value_args();
      args.name = name;
      args.defaultValue = defaultValue;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_get_config_value() throws ConfigValSecurityException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_config_value_result result = new get_config_value_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_config_value failed: unknown result");
    }

    public List<String> partition_name_to_vals(String part_name) throws MetaException, TException
    {
      send_partition_name_to_vals(part_name);
      return recv_partition_name_to_vals();
    }

    public void send_partition_name_to_vals(String part_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("partition_name_to_vals", TMessageType.CALL, seqid_));
      partition_name_to_vals_args args = new partition_name_to_vals_args();
      args.part_name = part_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_partition_name_to_vals() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      partition_name_to_vals_result result = new partition_name_to_vals_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "partition_name_to_vals failed: unknown result");
    }

    public Map<String,String> partition_name_to_spec(String part_name) throws MetaException, TException
    {
      send_partition_name_to_spec(part_name);
      return recv_partition_name_to_spec();
    }

    public void send_partition_name_to_spec(String part_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("partition_name_to_spec", TMessageType.CALL, seqid_));
      partition_name_to_spec_args args = new partition_name_to_spec_args();
      args.part_name = part_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Map<String,String> recv_partition_name_to_spec() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      partition_name_to_spec_result result = new partition_name_to_spec_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "partition_name_to_spec failed: unknown result");
    }

    public Index add_index(Index new_index, Table index_table) throws InvalidObjectException, AlreadyExistsException, MetaException, TException
    {
      send_add_index(new_index, index_table);
      return recv_add_index();
    }

    public void send_add_index(Index new_index, Table index_table) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("add_index", TMessageType.CALL, seqid_));
      add_index_args args = new add_index_args();
      args.new_index = new_index;
      args.index_table = index_table;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Index recv_add_index() throws InvalidObjectException, AlreadyExistsException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      add_index_result result = new add_index_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "add_index failed: unknown result");
    }

    public boolean drop_index_by_name(String db_name, String tbl_name, String index_name, boolean deleteData) throws NoSuchObjectException, MetaException, TException
    {
      send_drop_index_by_name(db_name, tbl_name, index_name, deleteData);
      return recv_drop_index_by_name();
    }

    public void send_drop_index_by_name(String db_name, String tbl_name, String index_name, boolean deleteData) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_index_by_name", TMessageType.CALL, seqid_));
      drop_index_by_name_args args = new drop_index_by_name_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.index_name = index_name;
      args.deleteData = deleteData;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_drop_index_by_name() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_index_by_name_result result = new drop_index_by_name_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_index_by_name failed: unknown result");
    }

    public Index get_index_by_name(String db_name, String tbl_name, String index_name) throws MetaException, NoSuchObjectException, TException
    {
      send_get_index_by_name(db_name, tbl_name, index_name);
      return recv_get_index_by_name();
    }

    public void send_get_index_by_name(String db_name, String tbl_name, String index_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_index_by_name", TMessageType.CALL, seqid_));
      get_index_by_name_args args = new get_index_by_name_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.index_name = index_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Index recv_get_index_by_name() throws MetaException, NoSuchObjectException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_index_by_name_result result = new get_index_by_name_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_index_by_name failed: unknown result");
    }

    public List<Index> get_indexes(String db_name, String tbl_name, short max_indexes) throws NoSuchObjectException, MetaException, TException
    {
      send_get_indexes(db_name, tbl_name, max_indexes);
      return recv_get_indexes();
    }

    public void send_get_indexes(String db_name, String tbl_name, short max_indexes) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_indexes", TMessageType.CALL, seqid_));
      get_indexes_args args = new get_indexes_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.max_indexes = max_indexes;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Index> recv_get_indexes() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_indexes_result result = new get_indexes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_indexes failed: unknown result");
    }

    public List<String> get_index_names(String db_name, String tbl_name, short max_indexes) throws MetaException, TException
    {
      send_get_index_names(db_name, tbl_name, max_indexes);
      return recv_get_index_names();
    }

    public void send_get_index_names(String db_name, String tbl_name, short max_indexes) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_index_names", TMessageType.CALL, seqid_));
      get_index_names_args args = new get_index_names_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.max_indexes = max_indexes;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_get_index_names() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_index_names_result result = new get_index_names_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_index_names failed: unknown result");
    }

  }
  public static class Processor extends com.facebook.fb303.FacebookService.Processor implements TProcessor {
    private static final Logger LOGGER = Logger.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      super(iface);
      iface_ = iface;
      processMap_.put("create_database", new create_database());
      processMap_.put("get_database", new get_database());
      processMap_.put("drop_database", new drop_database());
      processMap_.put("get_databases", new get_databases());
      processMap_.put("get_all_databases", new get_all_databases());
      processMap_.put("get_type", new get_type());
      processMap_.put("create_type", new create_type());
      processMap_.put("drop_type", new drop_type());
      processMap_.put("get_type_all", new get_type_all());
      processMap_.put("get_fields", new get_fields());
      processMap_.put("get_schema", new get_schema());
      processMap_.put("create_table", new create_table());
      processMap_.put("drop_table", new drop_table());
      processMap_.put("get_tables", new get_tables());
      processMap_.put("get_all_tables", new get_all_tables());
      processMap_.put("get_table", new get_table());
      processMap_.put("alter_table", new alter_table());
      processMap_.put("add_partition", new add_partition());
      processMap_.put("append_partition", new append_partition());
      processMap_.put("append_partition_by_name", new append_partition_by_name());
      processMap_.put("drop_partition", new drop_partition());
      processMap_.put("drop_partition_by_name", new drop_partition_by_name());
      processMap_.put("get_partition", new get_partition());
      processMap_.put("get_partition_by_name", new get_partition_by_name());
      processMap_.put("get_partitions", new get_partitions());
      processMap_.put("get_partition_names", new get_partition_names());
      processMap_.put("get_partitions_ps", new get_partitions_ps());
      processMap_.put("get_partition_names_ps", new get_partition_names_ps());
      processMap_.put("get_partitions_by_filter", new get_partitions_by_filter());
      processMap_.put("alter_partition", new alter_partition());
      processMap_.put("get_config_value", new get_config_value());
      processMap_.put("partition_name_to_vals", new partition_name_to_vals());
      processMap_.put("partition_name_to_spec", new partition_name_to_spec());
      processMap_.put("add_index", new add_index());
      processMap_.put("drop_index_by_name", new drop_index_by_name());
      processMap_.put("get_index_by_name", new get_index_by_name());
      processMap_.put("get_indexes", new get_indexes());
      processMap_.put("get_index_names", new get_index_names());
    }

    private Iface iface_;

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class create_database implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        create_database_args args = new create_database_args();
        args.read(iprot);
        iprot.readMessageEnd();
        create_database_result result = new create_database_result();
        try {
          iface_.create_database(args.database);
        } catch (AlreadyExistsException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing create_database", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing create_database");
          oprot.writeMessageBegin(new TMessage("create_database", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("create_database", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_database implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_database_args args = new get_database_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_database_result result = new get_database_result();
        try {
          result.success = iface_.get_database(args.name);
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_database", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_database");
          oprot.writeMessageBegin(new TMessage("get_database", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_database", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_database implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_database_args args = new drop_database_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_database_result result = new drop_database_result();
        try {
          iface_.drop_database(args.name, args.deleteData);
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (InvalidOperationException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_database", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_database");
          oprot.writeMessageBegin(new TMessage("drop_database", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_database", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_databases implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_databases_args args = new get_databases_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_databases_result result = new get_databases_result();
        try {
          result.success = iface_.get_databases(args.pattern);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_databases", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_databases");
          oprot.writeMessageBegin(new TMessage("get_databases", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_databases", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_all_databases implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_all_databases_args args = new get_all_databases_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_all_databases_result result = new get_all_databases_result();
        try {
          result.success = iface_.get_all_databases();
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_all_databases", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_all_databases");
          oprot.writeMessageBegin(new TMessage("get_all_databases", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_all_databases", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_type implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_type_args args = new get_type_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_type_result result = new get_type_result();
        try {
          result.success = iface_.get_type(args.name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (NoSuchObjectException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_type", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_type");
          oprot.writeMessageBegin(new TMessage("get_type", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_type", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class create_type implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        create_type_args args = new create_type_args();
        args.read(iprot);
        iprot.readMessageEnd();
        create_type_result result = new create_type_result();
        try {
          result.success = iface_.create_type(args.type);
          result.__isset.success = true;
        } catch (AlreadyExistsException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing create_type", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing create_type");
          oprot.writeMessageBegin(new TMessage("create_type", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("create_type", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_type implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_type_args args = new drop_type_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_type_result result = new drop_type_result();
        try {
          result.success = iface_.drop_type(args.type);
          result.__isset.success = true;
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (NoSuchObjectException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_type", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_type");
          oprot.writeMessageBegin(new TMessage("drop_type", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_type", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_type_all implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_type_all_args args = new get_type_all_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_type_all_result result = new get_type_all_result();
        try {
          result.success = iface_.get_type_all(args.name);
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_type_all", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_type_all");
          oprot.writeMessageBegin(new TMessage("get_type_all", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_type_all", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_fields implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_fields_args args = new get_fields_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_fields_result result = new get_fields_result();
        try {
          result.success = iface_.get_fields(args.db_name, args.table_name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (UnknownTableException o2) {
          result.o2 = o2;
        } catch (UnknownDBException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_fields", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_fields");
          oprot.writeMessageBegin(new TMessage("get_fields", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_fields", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_schema implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_schema_args args = new get_schema_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_schema_result result = new get_schema_result();
        try {
          result.success = iface_.get_schema(args.db_name, args.table_name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (UnknownTableException o2) {
          result.o2 = o2;
        } catch (UnknownDBException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_schema", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_schema");
          oprot.writeMessageBegin(new TMessage("get_schema", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_schema", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class create_table implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        create_table_args args = new create_table_args();
        args.read(iprot);
        iprot.readMessageEnd();
        create_table_result result = new create_table_result();
        try {
          iface_.create_table(args.tbl);
        } catch (AlreadyExistsException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (NoSuchObjectException o4) {
          result.o4 = o4;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing create_table", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing create_table");
          oprot.writeMessageBegin(new TMessage("create_table", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("create_table", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_table implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_table_args args = new drop_table_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_table_result result = new drop_table_result();
        try {
          iface_.drop_table(args.dbname, args.name, args.deleteData);
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_table", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_table");
          oprot.writeMessageBegin(new TMessage("drop_table", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_table", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_tables implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_tables_args args = new get_tables_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_tables_result result = new get_tables_result();
        try {
          result.success = iface_.get_tables(args.db_name, args.pattern);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_tables", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_tables");
          oprot.writeMessageBegin(new TMessage("get_tables", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_tables", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_all_tables implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_all_tables_args args = new get_all_tables_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_all_tables_result result = new get_all_tables_result();
        try {
          result.success = iface_.get_all_tables(args.db_name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_all_tables", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_all_tables");
          oprot.writeMessageBegin(new TMessage("get_all_tables", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_all_tables", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_table implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_table_args args = new get_table_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_table_result result = new get_table_result();
        try {
          result.success = iface_.get_table(args.dbname, args.tbl_name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (NoSuchObjectException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_table", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_table");
          oprot.writeMessageBegin(new TMessage("get_table", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_table", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class alter_table implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        alter_table_args args = new alter_table_args();
        args.read(iprot);
        iprot.readMessageEnd();
        alter_table_result result = new alter_table_result();
        try {
          iface_.alter_table(args.dbname, args.tbl_name, args.new_tbl);
        } catch (InvalidOperationException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing alter_table", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing alter_table");
          oprot.writeMessageBegin(new TMessage("alter_table", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("alter_table", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class add_partition implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        add_partition_args args = new add_partition_args();
        args.read(iprot);
        iprot.readMessageEnd();
        add_partition_result result = new add_partition_result();
        try {
          result.success = iface_.add_partition(args.new_part);
        } catch (InvalidObjectException o1) {
          result.o1 = o1;
        } catch (AlreadyExistsException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing add_partition", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing add_partition");
          oprot.writeMessageBegin(new TMessage("add_partition", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("add_partition", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class append_partition implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        append_partition_args args = new append_partition_args();
        args.read(iprot);
        iprot.readMessageEnd();
        append_partition_result result = new append_partition_result();
        try {
          result.success = iface_.append_partition(args.db_name, args.tbl_name, args.part_vals);
        } catch (InvalidObjectException o1) {
          result.o1 = o1;
        } catch (AlreadyExistsException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing append_partition", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing append_partition");
          oprot.writeMessageBegin(new TMessage("append_partition", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("append_partition", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class append_partition_by_name implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        append_partition_by_name_args args = new append_partition_by_name_args();
        args.read(iprot);
        iprot.readMessageEnd();
        append_partition_by_name_result result = new append_partition_by_name_result();
        try {
          result.success = iface_.append_partition_by_name(args.db_name, args.tbl_name, args.part_name);
        } catch (InvalidObjectException o1) {
          result.o1 = o1;
        } catch (AlreadyExistsException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing append_partition_by_name", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing append_partition_by_name");
          oprot.writeMessageBegin(new TMessage("append_partition_by_name", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("append_partition_by_name", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_partition implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_partition_args args = new drop_partition_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_partition_result result = new drop_partition_result();
        try {
          result.success = iface_.drop_partition(args.db_name, args.tbl_name, args.part_vals, args.deleteData);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_partition", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_partition");
          oprot.writeMessageBegin(new TMessage("drop_partition", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_partition", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_partition_by_name implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_partition_by_name_args args = new drop_partition_by_name_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_partition_by_name_result result = new drop_partition_by_name_result();
        try {
          result.success = iface_.drop_partition_by_name(args.db_name, args.tbl_name, args.part_name, args.deleteData);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_partition_by_name", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_partition_by_name");
          oprot.writeMessageBegin(new TMessage("drop_partition_by_name", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_partition_by_name", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_partition implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_partition_args args = new get_partition_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_partition_result result = new get_partition_result();
        try {
          result.success = iface_.get_partition(args.db_name, args.tbl_name, args.part_vals);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (NoSuchObjectException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_partition", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_partition");
          oprot.writeMessageBegin(new TMessage("get_partition", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_partition", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_partition_by_name implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_partition_by_name_args args = new get_partition_by_name_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_partition_by_name_result result = new get_partition_by_name_result();
        try {
          result.success = iface_.get_partition_by_name(args.db_name, args.tbl_name, args.part_name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (NoSuchObjectException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_partition_by_name", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_partition_by_name");
          oprot.writeMessageBegin(new TMessage("get_partition_by_name", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_partition_by_name", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_partitions implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_partitions_args args = new get_partitions_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_partitions_result result = new get_partitions_result();
        try {
          result.success = iface_.get_partitions(args.db_name, args.tbl_name, args.max_parts);
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_partitions", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_partitions");
          oprot.writeMessageBegin(new TMessage("get_partitions", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_partitions", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_partition_names implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_partition_names_args args = new get_partition_names_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_partition_names_result result = new get_partition_names_result();
        try {
          result.success = iface_.get_partition_names(args.db_name, args.tbl_name, args.max_parts);
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_partition_names", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_partition_names");
          oprot.writeMessageBegin(new TMessage("get_partition_names", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_partition_names", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_partitions_ps implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_partitions_ps_args args = new get_partitions_ps_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_partitions_ps_result result = new get_partitions_ps_result();
        try {
          result.success = iface_.get_partitions_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_partitions_ps", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_partitions_ps");
          oprot.writeMessageBegin(new TMessage("get_partitions_ps", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_partitions_ps", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_partition_names_ps implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_partition_names_ps_args args = new get_partition_names_ps_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_partition_names_ps_result result = new get_partition_names_ps_result();
        try {
          result.success = iface_.get_partition_names_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_partition_names_ps", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_partition_names_ps");
          oprot.writeMessageBegin(new TMessage("get_partition_names_ps", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_partition_names_ps", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_partitions_by_filter implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_partitions_by_filter_args args = new get_partitions_by_filter_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_partitions_by_filter_result result = new get_partitions_by_filter_result();
        try {
          result.success = iface_.get_partitions_by_filter(args.db_name, args.tbl_name, args.filter, args.max_parts);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (NoSuchObjectException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_partitions_by_filter", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_partitions_by_filter");
          oprot.writeMessageBegin(new TMessage("get_partitions_by_filter", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_partitions_by_filter", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class alter_partition implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        alter_partition_args args = new alter_partition_args();
        args.read(iprot);
        iprot.readMessageEnd();
        alter_partition_result result = new alter_partition_result();
        try {
          iface_.alter_partition(args.db_name, args.tbl_name, args.new_part);
        } catch (InvalidOperationException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing alter_partition", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing alter_partition");
          oprot.writeMessageBegin(new TMessage("alter_partition", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("alter_partition", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_config_value implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_config_value_args args = new get_config_value_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_config_value_result result = new get_config_value_result();
        try {
          result.success = iface_.get_config_value(args.name, args.defaultValue);
        } catch (ConfigValSecurityException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_config_value", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_config_value");
          oprot.writeMessageBegin(new TMessage("get_config_value", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_config_value", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class partition_name_to_vals implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        partition_name_to_vals_args args = new partition_name_to_vals_args();
        args.read(iprot);
        iprot.readMessageEnd();
        partition_name_to_vals_result result = new partition_name_to_vals_result();
        try {
          result.success = iface_.partition_name_to_vals(args.part_name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing partition_name_to_vals", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing partition_name_to_vals");
          oprot.writeMessageBegin(new TMessage("partition_name_to_vals", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("partition_name_to_vals", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class partition_name_to_spec implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        partition_name_to_spec_args args = new partition_name_to_spec_args();
        args.read(iprot);
        iprot.readMessageEnd();
        partition_name_to_spec_result result = new partition_name_to_spec_result();
        try {
          result.success = iface_.partition_name_to_spec(args.part_name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing partition_name_to_spec", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing partition_name_to_spec");
          oprot.writeMessageBegin(new TMessage("partition_name_to_spec", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("partition_name_to_spec", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class add_index implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        add_index_args args = new add_index_args();
        args.read(iprot);
        iprot.readMessageEnd();
        add_index_result result = new add_index_result();
        try {
          result.success = iface_.add_index(args.new_index, args.index_table);
        } catch (InvalidObjectException o1) {
          result.o1 = o1;
        } catch (AlreadyExistsException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing add_index", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing add_index");
          oprot.writeMessageBegin(new TMessage("add_index", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("add_index", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_index_by_name implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_index_by_name_args args = new drop_index_by_name_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_index_by_name_result result = new drop_index_by_name_result();
        try {
          result.success = iface_.drop_index_by_name(args.db_name, args.tbl_name, args.index_name, args.deleteData);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_index_by_name", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_index_by_name");
          oprot.writeMessageBegin(new TMessage("drop_index_by_name", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_index_by_name", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_index_by_name implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_index_by_name_args args = new get_index_by_name_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_index_by_name_result result = new get_index_by_name_result();
        try {
          result.success = iface_.get_index_by_name(args.db_name, args.tbl_name, args.index_name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (NoSuchObjectException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_index_by_name", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_index_by_name");
          oprot.writeMessageBegin(new TMessage("get_index_by_name", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_index_by_name", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_indexes implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_indexes_args args = new get_indexes_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_indexes_result result = new get_indexes_result();
        try {
          result.success = iface_.get_indexes(args.db_name, args.tbl_name, args.max_indexes);
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_indexes", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_indexes");
          oprot.writeMessageBegin(new TMessage("get_indexes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_indexes", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_index_names implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_index_names_args args = new get_index_names_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_index_names_result result = new get_index_names_result();
        try {
          result.success = iface_.get_index_names(args.db_name, args.tbl_name, args.max_indexes);
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_index_names", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_index_names");
          oprot.writeMessageBegin(new TMessage("get_index_names", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_index_names", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class create_database_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_database_args");
    private static final TField DATABASE_FIELD_DESC = new TField("database", TType.STRUCT, (short)1);

    private Database database;
    public static final int DATABASE = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DATABASE, new FieldMetaData("database", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Database.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_database_args.class, metaDataMap);
    }

    public create_database_args() {
    }

    public create_database_args(
      Database database)
    {
      this();
      this.database = database;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_database_args(create_database_args other) {
      if (other.isSetDatabase()) {
        this.database = new Database(other.database);
      }
    }

    @Override
    public create_database_args clone() {
      return new create_database_args(this);
    }

    public Database getDatabase() {
      return this.database;
    }

    public void setDatabase(Database database) {
      this.database = database;
    }

    public void unsetDatabase() {
      this.database = null;
    }

    // Returns true if field database is set (has been asigned a value) and false otherwise
    public boolean isSetDatabase() {
      return this.database != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DATABASE:
        if (value == null) {
          unsetDatabase();
        } else {
          setDatabase((Database)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DATABASE:
        return getDatabase();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DATABASE:
        return isSetDatabase();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_database_args)
        return this.equals((create_database_args)that);
      return false;
    }

    public boolean equals(create_database_args that) {
      if (that == null)
        return false;

      boolean this_present_database = true && this.isSetDatabase();
      boolean that_present_database = true && that.isSetDatabase();
      if (this_present_database || that_present_database) {
        if (!(this_present_database && that_present_database))
          return false;
        if (!this.database.equals(that.database))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DATABASE:
            if (field.type == TType.STRUCT) {
              this.database = new Database();
              this.database.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.database != null) {
        oprot.writeFieldBegin(DATABASE_FIELD_DESC);
        this.database.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_database_args(");
      boolean first = true;

      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_database_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_database_result");
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private AlreadyExistsException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_database_result.class, metaDataMap);
    }

    public create_database_result() {
    }

    public create_database_result(
      AlreadyExistsException o1,
      InvalidObjectException o2,
      MetaException o3)
    {
      this();
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_database_result(create_database_result other) {
      if (other.isSetO1()) {
        this.o1 = new AlreadyExistsException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public create_database_result clone() {
      return new create_database_result(this);
    }

    public AlreadyExistsException getO1() {
      return this.o1;
    }

    public void setO1(AlreadyExistsException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((AlreadyExistsException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_database_result)
        return this.equals((create_database_result)that);
      return false;
    }

    public boolean equals(create_database_result that) {
      if (that == null)
        return false;

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new AlreadyExistsException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_database_result(");
      boolean first = true;

      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_database_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_database_args");
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);

    private String name;
    public static final int NAME = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_database_args.class, metaDataMap);
    }

    public get_database_args() {
    }

    public get_database_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_database_args(get_database_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public get_database_args clone() {
      return new get_database_args(this);
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case NAME:
        return getName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case NAME:
        return isSetName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_database_args)
        return this.equals((get_database_args)that);
      return false;
    }

    public boolean equals(get_database_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_database_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_database_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_database_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private Database success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Database.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_database_result.class, metaDataMap);
    }

    public get_database_result() {
    }

    public get_database_result(
      Database success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_database_result(get_database_result other) {
      if (other.isSetSuccess()) {
        this.success = new Database(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_database_result clone() {
      return new get_database_result(this);
    }

    public Database getSuccess() {
      return this.success;
    }

    public void setSuccess(Database success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Database)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_database_result)
        return this.equals((get_database_result)that);
      return false;
    }

    public boolean equals(get_database_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Database();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_database_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_database_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_database_args");
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);
    private static final TField DELETE_DATA_FIELD_DESC = new TField("deleteData", TType.BOOL, (short)2);

    private String name;
    public static final int NAME = 1;
    private boolean deleteData;
    public static final int DELETEDATA = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean deleteData = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(DELETEDATA, new FieldMetaData("deleteData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_database_args.class, metaDataMap);
    }

    public drop_database_args() {
    }

    public drop_database_args(
      String name,
      boolean deleteData)
    {
      this();
      this.name = name;
      this.deleteData = deleteData;
      this.__isset.deleteData = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_database_args(drop_database_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      __isset.deleteData = other.__isset.deleteData;
      this.deleteData = other.deleteData;
    }

    @Override
    public drop_database_args clone() {
      return new drop_database_args(this);
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public boolean isDeleteData() {
      return this.deleteData;
    }

    public void setDeleteData(boolean deleteData) {
      this.deleteData = deleteData;
      this.__isset.deleteData = true;
    }

    public void unsetDeleteData() {
      this.__isset.deleteData = false;
    }

    // Returns true if field deleteData is set (has been asigned a value) and false otherwise
    public boolean isSetDeleteData() {
      return this.__isset.deleteData;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case DELETEDATA:
        if (value == null) {
          unsetDeleteData();
        } else {
          setDeleteData((Boolean)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case NAME:
        return getName();

      case DELETEDATA:
        return new Boolean(isDeleteData());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case NAME:
        return isSetName();
      case DELETEDATA:
        return isSetDeleteData();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_database_args)
        return this.equals((drop_database_args)that);
      return false;
    }

    public boolean equals(drop_database_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_deleteData = true;
      boolean that_present_deleteData = true;
      if (this_present_deleteData || that_present_deleteData) {
        if (!(this_present_deleteData && that_present_deleteData))
          return false;
        if (this.deleteData != that.deleteData)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DELETEDATA:
            if (field.type == TType.BOOL) {
              this.deleteData = iprot.readBool();
              this.__isset.deleteData = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DELETE_DATA_FIELD_DESC);
      oprot.writeBool(this.deleteData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_database_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deleteData:");
      sb.append(this.deleteData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_database_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_database_result");
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private InvalidOperationException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_database_result.class, metaDataMap);
    }

    public drop_database_result() {
    }

    public drop_database_result(
      NoSuchObjectException o1,
      InvalidOperationException o2,
      MetaException o3)
    {
      this();
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_database_result(drop_database_result other) {
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidOperationException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public drop_database_result clone() {
      return new drop_database_result(this);
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidOperationException getO2() {
      return this.o2;
    }

    public void setO2(InvalidOperationException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidOperationException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_database_result)
        return this.equals((drop_database_result)that);
      return false;
    }

    public boolean equals(drop_database_result that) {
      if (that == null)
        return false;

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidOperationException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_database_result(");
      boolean first = true;

      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_databases_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_databases_args");
    private static final TField PATTERN_FIELD_DESC = new TField("pattern", TType.STRING, (short)1);

    private String pattern;
    public static final int PATTERN = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(PATTERN, new FieldMetaData("pattern", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_databases_args.class, metaDataMap);
    }

    public get_databases_args() {
    }

    public get_databases_args(
      String pattern)
    {
      this();
      this.pattern = pattern;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_databases_args(get_databases_args other) {
      if (other.isSetPattern()) {
        this.pattern = other.pattern;
      }
    }

    @Override
    public get_databases_args clone() {
      return new get_databases_args(this);
    }

    public String getPattern() {
      return this.pattern;
    }

    public void setPattern(String pattern) {
      this.pattern = pattern;
    }

    public void unsetPattern() {
      this.pattern = null;
    }

    // Returns true if field pattern is set (has been asigned a value) and false otherwise
    public boolean isSetPattern() {
      return this.pattern != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case PATTERN:
        if (value == null) {
          unsetPattern();
        } else {
          setPattern((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case PATTERN:
        return getPattern();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case PATTERN:
        return isSetPattern();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_databases_args)
        return this.equals((get_databases_args)that);
      return false;
    }

    public boolean equals(get_databases_args that) {
      if (that == null)
        return false;

      boolean this_present_pattern = true && this.isSetPattern();
      boolean that_present_pattern = true && that.isSetPattern();
      if (this_present_pattern || that_present_pattern) {
        if (!(this_present_pattern && that_present_pattern))
          return false;
        if (!this.pattern.equals(that.pattern))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case PATTERN:
            if (field.type == TType.STRING) {
              this.pattern = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.pattern != null) {
        oprot.writeFieldBegin(PATTERN_FIELD_DESC);
        oprot.writeString(this.pattern);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_databases_args(");
      boolean first = true;

      sb.append("pattern:");
      if (this.pattern == null) {
        sb.append("null");
      } else {
        sb.append(this.pattern);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_databases_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_databases_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<String> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_databases_result.class, metaDataMap);
    }

    public get_databases_result() {
    }

    public get_databases_result(
      List<String> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_databases_result(get_databases_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_databases_result clone() {
      return new get_databases_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_databases_result)
        return this.equals((get_databases_result)that);
      return false;
    }

    public boolean equals(get_databases_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list58 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list58.size);
                for (int _i59 = 0; _i59 < _list58.size; ++_i59)
                {
                  String _elem60;
                  _elem60 = iprot.readString();
                  this.success.add(_elem60);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter61 : this.success)          {
            oprot.writeString(_iter61);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_databases_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_all_databases_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_all_databases_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_all_databases_args.class, metaDataMap);
    }

    public get_all_databases_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_databases_args(get_all_databases_args other) {
    }

    @Override
    public get_all_databases_args clone() {
      return new get_all_databases_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_databases_args)
        return this.equals((get_all_databases_args)that);
      return false;
    }

    public boolean equals(get_all_databases_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_databases_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_all_databases_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_all_databases_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<String> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_all_databases_result.class, metaDataMap);
    }

    public get_all_databases_result() {
    }

    public get_all_databases_result(
      List<String> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_databases_result(get_all_databases_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_all_databases_result clone() {
      return new get_all_databases_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_databases_result)
        return this.equals((get_all_databases_result)that);
      return false;
    }

    public boolean equals(get_all_databases_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list62 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list62.size);
                for (int _i63 = 0; _i63 < _list62.size; ++_i63)
                {
                  String _elem64;
                  _elem64 = iprot.readString();
                  this.success.add(_elem64);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter65 : this.success)          {
            oprot.writeString(_iter65);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_databases_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_type_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_type_args");
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);

    private String name;
    public static final int NAME = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_type_args.class, metaDataMap);
    }

    public get_type_args() {
    }

    public get_type_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_type_args(get_type_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public get_type_args clone() {
      return new get_type_args(this);
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case NAME:
        return getName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case NAME:
        return isSetName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_type_args)
        return this.equals((get_type_args)that);
      return false;
    }

    public boolean equals(get_type_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_type_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_type_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_type_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private Type success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;
    private NoSuchObjectException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Type.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_type_result.class, metaDataMap);
    }

    public get_type_result() {
    }

    public get_type_result(
      Type success,
      MetaException o1,
      NoSuchObjectException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_type_result(get_type_result other) {
      if (other.isSetSuccess()) {
        this.success = new Type(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new NoSuchObjectException(other.o2);
      }
    }

    @Override
    public get_type_result clone() {
      return new get_type_result(this);
    }

    public Type getSuccess() {
      return this.success;
    }

    public void setSuccess(Type success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public NoSuchObjectException getO2() {
      return this.o2;
    }

    public void setO2(NoSuchObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Type)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((NoSuchObjectException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_type_result)
        return this.equals((get_type_result)that);
      return false;
    }

    public boolean equals(get_type_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Type();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new NoSuchObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_type_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_type_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_type_args");
    private static final TField TYPE_FIELD_DESC = new TField("type", TType.STRUCT, (short)1);

    private Type type;
    public static final int TYPE = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Type.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_type_args.class, metaDataMap);
    }

    public create_type_args() {
    }

    public create_type_args(
      Type type)
    {
      this();
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_type_args(create_type_args other) {
      if (other.isSetType()) {
        this.type = new Type(other.type);
      }
    }

    @Override
    public create_type_args clone() {
      return new create_type_args(this);
    }

    public Type getType() {
      return this.type;
    }

    public void setType(Type type) {
      this.type = type;
    }

    public void unsetType() {
      this.type = null;
    }

    // Returns true if field type is set (has been asigned a value) and false otherwise
    public boolean isSetType() {
      return this.type != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Type)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case TYPE:
        return getType();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case TYPE:
        return isSetType();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_type_args)
        return this.equals((create_type_args)that);
      return false;
    }

    public boolean equals(create_type_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case TYPE:
            if (field.type == TType.STRUCT) {
              this.type = new Type();
              this.type.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        this.type.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_type_args(");
      boolean first = true;

      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_type_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_type_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private boolean success;
    public static final int SUCCESS = 0;
    private AlreadyExistsException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_type_result.class, metaDataMap);
    }

    public create_type_result() {
    }

    public create_type_result(
      boolean success,
      AlreadyExistsException o1,
      InvalidObjectException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_type_result(create_type_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new AlreadyExistsException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public create_type_result clone() {
      return new create_type_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public AlreadyExistsException getO1() {
      return this.o1;
    }

    public void setO1(AlreadyExistsException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((AlreadyExistsException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_type_result)
        return this.equals((create_type_result)that);
      return false;
    }

    public boolean equals(create_type_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new AlreadyExistsException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_type_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_type_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_type_args");
    private static final TField TYPE_FIELD_DESC = new TField("type", TType.STRING, (short)1);

    private String type;
    public static final int TYPE = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_type_args.class, metaDataMap);
    }

    public drop_type_args() {
    }

    public drop_type_args(
      String type)
    {
      this();
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_type_args(drop_type_args other) {
      if (other.isSetType()) {
        this.type = other.type;
      }
    }

    @Override
    public drop_type_args clone() {
      return new drop_type_args(this);
    }

    public String getType() {
      return this.type;
    }

    public void setType(String type) {
      this.type = type;
    }

    public void unsetType() {
      this.type = null;
    }

    // Returns true if field type is set (has been asigned a value) and false otherwise
    public boolean isSetType() {
      return this.type != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case TYPE:
        return getType();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case TYPE:
        return isSetType();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_type_args)
        return this.equals((drop_type_args)that);
      return false;
    }

    public boolean equals(drop_type_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case TYPE:
            if (field.type == TType.STRING) {
              this.type = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(this.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_type_args(");
      boolean first = true;

      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_type_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_type_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private boolean success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;
    private NoSuchObjectException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_type_result.class, metaDataMap);
    }

    public drop_type_result() {
    }

    public drop_type_result(
      boolean success,
      MetaException o1,
      NoSuchObjectException o2)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_type_result(drop_type_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new NoSuchObjectException(other.o2);
      }
    }

    @Override
    public drop_type_result clone() {
      return new drop_type_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public NoSuchObjectException getO2() {
      return this.o2;
    }

    public void setO2(NoSuchObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((NoSuchObjectException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_type_result)
        return this.equals((drop_type_result)that);
      return false;
    }

    public boolean equals(drop_type_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new NoSuchObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_type_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_type_all_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_type_all_args");
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);

    private String name;
    public static final int NAME = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_type_all_args.class, metaDataMap);
    }

    public get_type_all_args() {
    }

    public get_type_all_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_type_all_args(get_type_all_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public get_type_all_args clone() {
      return new get_type_all_args(this);
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case NAME:
        return getName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case NAME:
        return isSetName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_type_all_args)
        return this.equals((get_type_all_args)that);
      return false;
    }

    public boolean equals(get_type_all_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_type_all_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_type_all_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_type_all_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)1);

    private Map<String,Type> success;
    public static final int SUCCESS = 0;
    private MetaException o2;
    public static final int O2 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new StructMetaData(TType.STRUCT, Type.class))));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_type_all_result.class, metaDataMap);
    }

    public get_type_all_result() {
    }

    public get_type_all_result(
      Map<String,Type> success,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_type_all_result(get_type_all_result other) {
      if (other.isSetSuccess()) {
        Map<String,Type> __this__success = new HashMap<String,Type>();
        for (Map.Entry<String, Type> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Type other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Type __this__success_copy_value = new Type(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_type_all_result clone() {
      return new get_type_all_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Type val) {
      if (this.success == null) {
        this.success = new HashMap<String,Type>();
      }
      this.success.put(key, val);
    }

    public Map<String,Type> getSuccess() {
      return this.success;
    }

    public void setSuccess(Map<String,Type> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Type>)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_type_all_result)
        return this.equals((get_type_all_result)that);
      return false;
    }

    public boolean equals(get_type_all_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.MAP) {
              {
                TMap _map66 = iprot.readMapBegin();
                this.success = new HashMap<String,Type>(2*_map66.size);
                for (int _i67 = 0; _i67 < _map66.size; ++_i67)
                {
                  String _key68;
                  Type _val69;
                  _key68 = iprot.readString();
                  _val69 = new Type();
                  _val69.read(iprot);
                  this.success.put(_key68, _val69);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.size()));
          for (Map.Entry<String, Type> _iter70 : this.success.entrySet())          {
            oprot.writeString(_iter70.getKey());
            _iter70.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_type_all_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_fields_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_fields_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("table_name", TType.STRING, (short)2);

    private String db_name;
    public static final int DB_NAME = 1;
    private String table_name;
    public static final int TABLE_NAME = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TABLE_NAME, new FieldMetaData("table_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_fields_args.class, metaDataMap);
    }

    public get_fields_args() {
    }

    public get_fields_args(
      String db_name,
      String table_name)
    {
      this();
      this.db_name = db_name;
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_fields_args(get_fields_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    @Override
    public get_fields_args clone() {
      return new get_fields_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTable_name() {
      return this.table_name;
    }

    public void setTable_name(String table_name) {
      this.table_name = table_name;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    // Returns true if field table_name is set (has been asigned a value) and false otherwise
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TABLE_NAME:
        return getTable_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TABLE_NAME:
        return isSetTable_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_fields_args)
        return this.equals((get_fields_args)that);
      return false;
    }

    public boolean equals(get_fields_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TABLE_NAME:
            if (field.type == TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_fields_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_fields_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_fields_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private List<FieldSchema> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;
    private UnknownTableException o2;
    public static final int O2 = 2;
    private UnknownDBException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, FieldSchema.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_fields_result.class, metaDataMap);
    }

    public get_fields_result() {
    }

    public get_fields_result(
      List<FieldSchema> success,
      MetaException o1,
      UnknownTableException o2,
      UnknownDBException o3)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_fields_result(get_fields_result other) {
      if (other.isSetSuccess()) {
        List<FieldSchema> __this__success = new ArrayList<FieldSchema>();
        for (FieldSchema other_element : other.success) {
          __this__success.add(new FieldSchema(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new UnknownTableException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new UnknownDBException(other.o3);
      }
    }

    @Override
    public get_fields_result clone() {
      return new get_fields_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FieldSchema> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FieldSchema elem) {
      if (this.success == null) {
        this.success = new ArrayList<FieldSchema>();
      }
      this.success.add(elem);
    }

    public List<FieldSchema> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<FieldSchema> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public UnknownTableException getO2() {
      return this.o2;
    }

    public void setO2(UnknownTableException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public UnknownDBException getO3() {
      return this.o3;
    }

    public void setO3(UnknownDBException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FieldSchema>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((UnknownTableException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((UnknownDBException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_fields_result)
        return this.equals((get_fields_result)that);
      return false;
    }

    public boolean equals(get_fields_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list71 = iprot.readListBegin();
                this.success = new ArrayList<FieldSchema>(_list71.size);
                for (int _i72 = 0; _i72 < _list71.size; ++_i72)
                {
                  FieldSchema _elem73;
                  _elem73 = new FieldSchema();
                  _elem73.read(iprot);
                  this.success.add(_elem73);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new UnknownTableException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new UnknownDBException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (FieldSchema _iter74 : this.success)          {
            _iter74.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_fields_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_schema_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_schema_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("table_name", TType.STRING, (short)2);

    private String db_name;
    public static final int DB_NAME = 1;
    private String table_name;
    public static final int TABLE_NAME = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TABLE_NAME, new FieldMetaData("table_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_schema_args.class, metaDataMap);
    }

    public get_schema_args() {
    }

    public get_schema_args(
      String db_name,
      String table_name)
    {
      this();
      this.db_name = db_name;
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_schema_args(get_schema_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    @Override
    public get_schema_args clone() {
      return new get_schema_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTable_name() {
      return this.table_name;
    }

    public void setTable_name(String table_name) {
      this.table_name = table_name;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    // Returns true if field table_name is set (has been asigned a value) and false otherwise
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TABLE_NAME:
        return getTable_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TABLE_NAME:
        return isSetTable_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_schema_args)
        return this.equals((get_schema_args)that);
      return false;
    }

    public boolean equals(get_schema_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TABLE_NAME:
            if (field.type == TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_schema_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_schema_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_schema_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private List<FieldSchema> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;
    private UnknownTableException o2;
    public static final int O2 = 2;
    private UnknownDBException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, FieldSchema.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_schema_result.class, metaDataMap);
    }

    public get_schema_result() {
    }

    public get_schema_result(
      List<FieldSchema> success,
      MetaException o1,
      UnknownTableException o2,
      UnknownDBException o3)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_schema_result(get_schema_result other) {
      if (other.isSetSuccess()) {
        List<FieldSchema> __this__success = new ArrayList<FieldSchema>();
        for (FieldSchema other_element : other.success) {
          __this__success.add(new FieldSchema(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new UnknownTableException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new UnknownDBException(other.o3);
      }
    }

    @Override
    public get_schema_result clone() {
      return new get_schema_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FieldSchema> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FieldSchema elem) {
      if (this.success == null) {
        this.success = new ArrayList<FieldSchema>();
      }
      this.success.add(elem);
    }

    public List<FieldSchema> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<FieldSchema> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public UnknownTableException getO2() {
      return this.o2;
    }

    public void setO2(UnknownTableException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public UnknownDBException getO3() {
      return this.o3;
    }

    public void setO3(UnknownDBException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FieldSchema>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((UnknownTableException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((UnknownDBException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_schema_result)
        return this.equals((get_schema_result)that);
      return false;
    }

    public boolean equals(get_schema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list75 = iprot.readListBegin();
                this.success = new ArrayList<FieldSchema>(_list75.size);
                for (int _i76 = 0; _i76 < _list75.size; ++_i76)
                {
                  FieldSchema _elem77;
                  _elem77 = new FieldSchema();
                  _elem77.read(iprot);
                  this.success.add(_elem77);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new UnknownTableException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new UnknownDBException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (FieldSchema _iter78 : this.success)          {
            _iter78.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_schema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_table_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_table_args");
    private static final TField TBL_FIELD_DESC = new TField("tbl", TType.STRUCT, (short)1);

    private Table tbl;
    public static final int TBL = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(TBL, new FieldMetaData("tbl", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Table.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_table_args.class, metaDataMap);
    }

    public create_table_args() {
    }

    public create_table_args(
      Table tbl)
    {
      this();
      this.tbl = tbl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_table_args(create_table_args other) {
      if (other.isSetTbl()) {
        this.tbl = new Table(other.tbl);
      }
    }

    @Override
    public create_table_args clone() {
      return new create_table_args(this);
    }

    public Table getTbl() {
      return this.tbl;
    }

    public void setTbl(Table tbl) {
      this.tbl = tbl;
    }

    public void unsetTbl() {
      this.tbl = null;
    }

    // Returns true if field tbl is set (has been asigned a value) and false otherwise
    public boolean isSetTbl() {
      return this.tbl != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case TBL:
        if (value == null) {
          unsetTbl();
        } else {
          setTbl((Table)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case TBL:
        return getTbl();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case TBL:
        return isSetTbl();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_table_args)
        return this.equals((create_table_args)that);
      return false;
    }

    public boolean equals(create_table_args that) {
      if (that == null)
        return false;

      boolean this_present_tbl = true && this.isSetTbl();
      boolean that_present_tbl = true && that.isSetTbl();
      if (this_present_tbl || that_present_tbl) {
        if (!(this_present_tbl && that_present_tbl))
          return false;
        if (!this.tbl.equals(that.tbl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case TBL:
            if (field.type == TType.STRUCT) {
              this.tbl = new Table();
              this.tbl.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.tbl != null) {
        oprot.writeFieldBegin(TBL_FIELD_DESC);
        this.tbl.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_table_args(");
      boolean first = true;

      sb.append("tbl:");
      if (this.tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_table_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_table_result");
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);
    private static final TField O4_FIELD_DESC = new TField("o4", TType.STRUCT, (short)4);

    private AlreadyExistsException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;
    private NoSuchObjectException o4;
    public static final int O4 = 4;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O4, new FieldMetaData("o4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_table_result.class, metaDataMap);
    }

    public create_table_result() {
    }

    public create_table_result(
      AlreadyExistsException o1,
      InvalidObjectException o2,
      MetaException o3,
      NoSuchObjectException o4)
    {
      this();
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
      this.o4 = o4;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_table_result(create_table_result other) {
      if (other.isSetO1()) {
        this.o1 = new AlreadyExistsException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
      if (other.isSetO4()) {
        this.o4 = new NoSuchObjectException(other.o4);
      }
    }

    @Override
    public create_table_result clone() {
      return new create_table_result(this);
    }

    public AlreadyExistsException getO1() {
      return this.o1;
    }

    public void setO1(AlreadyExistsException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public NoSuchObjectException getO4() {
      return this.o4;
    }

    public void setO4(NoSuchObjectException o4) {
      this.o4 = o4;
    }

    public void unsetO4() {
      this.o4 = null;
    }

    // Returns true if field o4 is set (has been asigned a value) and false otherwise
    public boolean isSetO4() {
      return this.o4 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((AlreadyExistsException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      case O4:
        if (value == null) {
          unsetO4();
        } else {
          setO4((NoSuchObjectException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      case O4:
        return getO4();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      case O4:
        return isSetO4();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_table_result)
        return this.equals((create_table_result)that);
      return false;
    }

    public boolean equals(create_table_result that) {
      if (that == null)
        return false;

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      boolean this_present_o4 = true && this.isSetO4();
      boolean that_present_o4 = true && that.isSetO4();
      if (this_present_o4 || that_present_o4) {
        if (!(this_present_o4 && that_present_o4))
          return false;
        if (!this.o4.equals(that.o4))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new AlreadyExistsException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O4:
            if (field.type == TType.STRUCT) {
              this.o4 = new NoSuchObjectException();
              this.o4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO4()) {
        oprot.writeFieldBegin(O4_FIELD_DESC);
        this.o4.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_table_result(");
      boolean first = true;

      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o4:");
      if (this.o4 == null) {
        sb.append("null");
      } else {
        sb.append(this.o4);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_table_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_table_args");
    private static final TField DBNAME_FIELD_DESC = new TField("dbname", TType.STRING, (short)1);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
    private static final TField DELETE_DATA_FIELD_DESC = new TField("deleteData", TType.BOOL, (short)3);

    private String dbname;
    public static final int DBNAME = 1;
    private String name;
    public static final int NAME = 2;
    private boolean deleteData;
    public static final int DELETEDATA = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean deleteData = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DBNAME, new FieldMetaData("dbname", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(DELETEDATA, new FieldMetaData("deleteData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_table_args.class, metaDataMap);
    }

    public drop_table_args() {
    }

    public drop_table_args(
      String dbname,
      String name,
      boolean deleteData)
    {
      this();
      this.dbname = dbname;
      this.name = name;
      this.deleteData = deleteData;
      this.__isset.deleteData = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_table_args(drop_table_args other) {
      if (other.isSetDbname()) {
        this.dbname = other.dbname;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      __isset.deleteData = other.__isset.deleteData;
      this.deleteData = other.deleteData;
    }

    @Override
    public drop_table_args clone() {
      return new drop_table_args(this);
    }

    public String getDbname() {
      return this.dbname;
    }

    public void setDbname(String dbname) {
      this.dbname = dbname;
    }

    public void unsetDbname() {
      this.dbname = null;
    }

    // Returns true if field dbname is set (has been asigned a value) and false otherwise
    public boolean isSetDbname() {
      return this.dbname != null;
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public boolean isDeleteData() {
      return this.deleteData;
    }

    public void setDeleteData(boolean deleteData) {
      this.deleteData = deleteData;
      this.__isset.deleteData = true;
    }

    public void unsetDeleteData() {
      this.__isset.deleteData = false;
    }

    // Returns true if field deleteData is set (has been asigned a value) and false otherwise
    public boolean isSetDeleteData() {
      return this.__isset.deleteData;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DBNAME:
        if (value == null) {
          unsetDbname();
        } else {
          setDbname((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case DELETEDATA:
        if (value == null) {
          unsetDeleteData();
        } else {
          setDeleteData((Boolean)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DBNAME:
        return getDbname();

      case NAME:
        return getName();

      case DELETEDATA:
        return new Boolean(isDeleteData());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DBNAME:
        return isSetDbname();
      case NAME:
        return isSetName();
      case DELETEDATA:
        return isSetDeleteData();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_table_args)
        return this.equals((drop_table_args)that);
      return false;
    }

    public boolean equals(drop_table_args that) {
      if (that == null)
        return false;

      boolean this_present_dbname = true && this.isSetDbname();
      boolean that_present_dbname = true && that.isSetDbname();
      if (this_present_dbname || that_present_dbname) {
        if (!(this_present_dbname && that_present_dbname))
          return false;
        if (!this.dbname.equals(that.dbname))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_deleteData = true;
      boolean that_present_deleteData = true;
      if (this_present_deleteData || that_present_deleteData) {
        if (!(this_present_deleteData && that_present_deleteData))
          return false;
        if (this.deleteData != that.deleteData)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DBNAME:
            if (field.type == TType.STRING) {
              this.dbname = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DELETEDATA:
            if (field.type == TType.BOOL) {
              this.deleteData = iprot.readBool();
              this.__isset.deleteData = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.dbname != null) {
        oprot.writeFieldBegin(DBNAME_FIELD_DESC);
        oprot.writeString(this.dbname);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DELETE_DATA_FIELD_DESC);
      oprot.writeBool(this.deleteData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_table_args(");
      boolean first = true;

      sb.append("dbname:");
      if (this.dbname == null) {
        sb.append("null");
      } else {
        sb.append(this.dbname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deleteData:");
      sb.append(this.deleteData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_table_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_table_result");
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)2);

    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o3;
    public static final int O3 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_table_result.class, metaDataMap);
    }

    public drop_table_result() {
    }

    public drop_table_result(
      NoSuchObjectException o1,
      MetaException o3)
    {
      this();
      this.o1 = o1;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_table_result(drop_table_result other) {
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public drop_table_result clone() {
      return new drop_table_result(this);
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case O1:
        return getO1();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case O1:
        return isSetO1();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_table_result)
        return this.equals((drop_table_result)that);
      return false;
    }

    public boolean equals(drop_table_result that) {
      if (that == null)
        return false;

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_table_result(");
      boolean first = true;

      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_tables_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_tables_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField PATTERN_FIELD_DESC = new TField("pattern", TType.STRING, (short)2);

    private String db_name;
    public static final int DB_NAME = 1;
    private String pattern;
    public static final int PATTERN = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PATTERN, new FieldMetaData("pattern", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_tables_args.class, metaDataMap);
    }

    public get_tables_args() {
    }

    public get_tables_args(
      String db_name,
      String pattern)
    {
      this();
      this.db_name = db_name;
      this.pattern = pattern;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tables_args(get_tables_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetPattern()) {
        this.pattern = other.pattern;
      }
    }

    @Override
    public get_tables_args clone() {
      return new get_tables_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getPattern() {
      return this.pattern;
    }

    public void setPattern(String pattern) {
      this.pattern = pattern;
    }

    public void unsetPattern() {
      this.pattern = null;
    }

    // Returns true if field pattern is set (has been asigned a value) and false otherwise
    public boolean isSetPattern() {
      return this.pattern != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case PATTERN:
        if (value == null) {
          unsetPattern();
        } else {
          setPattern((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case PATTERN:
        return getPattern();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case PATTERN:
        return isSetPattern();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tables_args)
        return this.equals((get_tables_args)that);
      return false;
    }

    public boolean equals(get_tables_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_pattern = true && this.isSetPattern();
      boolean that_present_pattern = true && that.isSetPattern();
      if (this_present_pattern || that_present_pattern) {
        if (!(this_present_pattern && that_present_pattern))
          return false;
        if (!this.pattern.equals(that.pattern))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PATTERN:
            if (field.type == TType.STRING) {
              this.pattern = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.pattern != null) {
        oprot.writeFieldBegin(PATTERN_FIELD_DESC);
        oprot.writeString(this.pattern);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_tables_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pattern:");
      if (this.pattern == null) {
        sb.append("null");
      } else {
        sb.append(this.pattern);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_tables_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_tables_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<String> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_tables_result.class, metaDataMap);
    }

    public get_tables_result() {
    }

    public get_tables_result(
      List<String> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tables_result(get_tables_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_tables_result clone() {
      return new get_tables_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tables_result)
        return this.equals((get_tables_result)that);
      return false;
    }

    public boolean equals(get_tables_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list79 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list79.size);
                for (int _i80 = 0; _i80 < _list79.size; ++_i80)
                {
                  String _elem81;
                  _elem81 = iprot.readString();
                  this.success.add(_elem81);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter82 : this.success)          {
            oprot.writeString(_iter82);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_tables_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_all_tables_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_all_tables_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);

    private String db_name;
    public static final int DB_NAME = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_all_tables_args.class, metaDataMap);
    }

    public get_all_tables_args() {
    }

    public get_all_tables_args(
      String db_name)
    {
      this();
      this.db_name = db_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_tables_args(get_all_tables_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
    }

    @Override
    public get_all_tables_args clone() {
      return new get_all_tables_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_tables_args)
        return this.equals((get_all_tables_args)that);
      return false;
    }

    public boolean equals(get_all_tables_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_tables_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_all_tables_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_all_tables_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<String> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_all_tables_result.class, metaDataMap);
    }

    public get_all_tables_result() {
    }

    public get_all_tables_result(
      List<String> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_tables_result(get_all_tables_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_all_tables_result clone() {
      return new get_all_tables_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_tables_result)
        return this.equals((get_all_tables_result)that);
      return false;
    }

    public boolean equals(get_all_tables_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list83 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list83.size);
                for (int _i84 = 0; _i84 < _list83.size; ++_i84)
                {
                  String _elem85;
                  _elem85 = iprot.readString();
                  this.success.add(_elem85);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter86 : this.success)          {
            oprot.writeString(_iter86);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_tables_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_table_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_table_args");
    private static final TField DBNAME_FIELD_DESC = new TField("dbname", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);

    private String dbname;
    public static final int DBNAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DBNAME, new FieldMetaData("dbname", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_table_args.class, metaDataMap);
    }

    public get_table_args() {
    }

    public get_table_args(
      String dbname,
      String tbl_name)
    {
      this();
      this.dbname = dbname;
      this.tbl_name = tbl_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_args(get_table_args other) {
      if (other.isSetDbname()) {
        this.dbname = other.dbname;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
    }

    @Override
    public get_table_args clone() {
      return new get_table_args(this);
    }

    public String getDbname() {
      return this.dbname;
    }

    public void setDbname(String dbname) {
      this.dbname = dbname;
    }

    public void unsetDbname() {
      this.dbname = null;
    }

    // Returns true if field dbname is set (has been asigned a value) and false otherwise
    public boolean isSetDbname() {
      return this.dbname != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DBNAME:
        if (value == null) {
          unsetDbname();
        } else {
          setDbname((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DBNAME:
        return getDbname();

      case TBL_NAME:
        return getTbl_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DBNAME:
        return isSetDbname();
      case TBL_NAME:
        return isSetTbl_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_args)
        return this.equals((get_table_args)that);
      return false;
    }

    public boolean equals(get_table_args that) {
      if (that == null)
        return false;

      boolean this_present_dbname = true && this.isSetDbname();
      boolean that_present_dbname = true && that.isSetDbname();
      if (this_present_dbname || that_present_dbname) {
        if (!(this_present_dbname && that_present_dbname))
          return false;
        if (!this.dbname.equals(that.dbname))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DBNAME:
            if (field.type == TType.STRING) {
              this.dbname = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.dbname != null) {
        oprot.writeFieldBegin(DBNAME_FIELD_DESC);
        oprot.writeString(this.dbname);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_args(");
      boolean first = true;

      sb.append("dbname:");
      if (this.dbname == null) {
        sb.append("null");
      } else {
        sb.append(this.dbname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_table_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_table_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private Table success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;
    private NoSuchObjectException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Table.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_table_result.class, metaDataMap);
    }

    public get_table_result() {
    }

    public get_table_result(
      Table success,
      MetaException o1,
      NoSuchObjectException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_result(get_table_result other) {
      if (other.isSetSuccess()) {
        this.success = new Table(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new NoSuchObjectException(other.o2);
      }
    }

    @Override
    public get_table_result clone() {
      return new get_table_result(this);
    }

    public Table getSuccess() {
      return this.success;
    }

    public void setSuccess(Table success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public NoSuchObjectException getO2() {
      return this.o2;
    }

    public void setO2(NoSuchObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Table)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((NoSuchObjectException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_result)
        return this.equals((get_table_result)that);
      return false;
    }

    public boolean equals(get_table_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Table();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new NoSuchObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class alter_table_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("alter_table_args");
    private static final TField DBNAME_FIELD_DESC = new TField("dbname", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField NEW_TBL_FIELD_DESC = new TField("new_tbl", TType.STRUCT, (short)3);

    private String dbname;
    public static final int DBNAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private Table new_tbl;
    public static final int NEW_TBL = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DBNAME, new FieldMetaData("dbname", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(NEW_TBL, new FieldMetaData("new_tbl", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Table.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(alter_table_args.class, metaDataMap);
    }

    public alter_table_args() {
    }

    public alter_table_args(
      String dbname,
      String tbl_name,
      Table new_tbl)
    {
      this();
      this.dbname = dbname;
      this.tbl_name = tbl_name;
      this.new_tbl = new_tbl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alter_table_args(alter_table_args other) {
      if (other.isSetDbname()) {
        this.dbname = other.dbname;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      if (other.isSetNew_tbl()) {
        this.new_tbl = new Table(other.new_tbl);
      }
    }

    @Override
    public alter_table_args clone() {
      return new alter_table_args(this);
    }

    public String getDbname() {
      return this.dbname;
    }

    public void setDbname(String dbname) {
      this.dbname = dbname;
    }

    public void unsetDbname() {
      this.dbname = null;
    }

    // Returns true if field dbname is set (has been asigned a value) and false otherwise
    public boolean isSetDbname() {
      return this.dbname != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public Table getNew_tbl() {
      return this.new_tbl;
    }

    public void setNew_tbl(Table new_tbl) {
      this.new_tbl = new_tbl;
    }

    public void unsetNew_tbl() {
      this.new_tbl = null;
    }

    // Returns true if field new_tbl is set (has been asigned a value) and false otherwise
    public boolean isSetNew_tbl() {
      return this.new_tbl != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DBNAME:
        if (value == null) {
          unsetDbname();
        } else {
          setDbname((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case NEW_TBL:
        if (value == null) {
          unsetNew_tbl();
        } else {
          setNew_tbl((Table)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DBNAME:
        return getDbname();

      case TBL_NAME:
        return getTbl_name();

      case NEW_TBL:
        return getNew_tbl();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DBNAME:
        return isSetDbname();
      case TBL_NAME:
        return isSetTbl_name();
      case NEW_TBL:
        return isSetNew_tbl();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alter_table_args)
        return this.equals((alter_table_args)that);
      return false;
    }

    public boolean equals(alter_table_args that) {
      if (that == null)
        return false;

      boolean this_present_dbname = true && this.isSetDbname();
      boolean that_present_dbname = true && that.isSetDbname();
      if (this_present_dbname || that_present_dbname) {
        if (!(this_present_dbname && that_present_dbname))
          return false;
        if (!this.dbname.equals(that.dbname))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_new_tbl = true && this.isSetNew_tbl();
      boolean that_present_new_tbl = true && that.isSetNew_tbl();
      if (this_present_new_tbl || that_present_new_tbl) {
        if (!(this_present_new_tbl && that_present_new_tbl))
          return false;
        if (!this.new_tbl.equals(that.new_tbl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DBNAME:
            if (field.type == TType.STRING) {
              this.dbname = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NEW_TBL:
            if (field.type == TType.STRUCT) {
              this.new_tbl = new Table();
              this.new_tbl.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.dbname != null) {
        oprot.writeFieldBegin(DBNAME_FIELD_DESC);
        oprot.writeString(this.dbname);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      if (this.new_tbl != null) {
        oprot.writeFieldBegin(NEW_TBL_FIELD_DESC);
        this.new_tbl.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alter_table_args(");
      boolean first = true;

      sb.append("dbname:");
      if (this.dbname == null) {
        sb.append("null");
      } else {
        sb.append(this.dbname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("new_tbl:");
      if (this.new_tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.new_tbl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class alter_table_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("alter_table_result");
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private InvalidOperationException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(alter_table_result.class, metaDataMap);
    }

    public alter_table_result() {
    }

    public alter_table_result(
      InvalidOperationException o1,
      MetaException o2)
    {
      this();
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alter_table_result(alter_table_result other) {
      if (other.isSetO1()) {
        this.o1 = new InvalidOperationException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public alter_table_result clone() {
      return new alter_table_result(this);
    }

    public InvalidOperationException getO1() {
      return this.o1;
    }

    public void setO1(InvalidOperationException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((InvalidOperationException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alter_table_result)
        return this.equals((alter_table_result)that);
      return false;
    }

    public boolean equals(alter_table_result that) {
      if (that == null)
        return false;

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new InvalidOperationException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alter_table_result(");
      boolean first = true;

      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class add_partition_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("add_partition_args");
    private static final TField NEW_PART_FIELD_DESC = new TField("new_part", TType.STRUCT, (short)1);

    private Partition new_part;
    public static final int NEW_PART = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(NEW_PART, new FieldMetaData("new_part", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Partition.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(add_partition_args.class, metaDataMap);
    }

    public add_partition_args() {
    }

    public add_partition_args(
      Partition new_part)
    {
      this();
      this.new_part = new_part;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_partition_args(add_partition_args other) {
      if (other.isSetNew_part()) {
        this.new_part = new Partition(other.new_part);
      }
    }

    @Override
    public add_partition_args clone() {
      return new add_partition_args(this);
    }

    public Partition getNew_part() {
      return this.new_part;
    }

    public void setNew_part(Partition new_part) {
      this.new_part = new_part;
    }

    public void unsetNew_part() {
      this.new_part = null;
    }

    // Returns true if field new_part is set (has been asigned a value) and false otherwise
    public boolean isSetNew_part() {
      return this.new_part != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case NEW_PART:
        if (value == null) {
          unsetNew_part();
        } else {
          setNew_part((Partition)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case NEW_PART:
        return getNew_part();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case NEW_PART:
        return isSetNew_part();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_partition_args)
        return this.equals((add_partition_args)that);
      return false;
    }

    public boolean equals(add_partition_args that) {
      if (that == null)
        return false;

      boolean this_present_new_part = true && this.isSetNew_part();
      boolean that_present_new_part = true && that.isSetNew_part();
      if (this_present_new_part || that_present_new_part) {
        if (!(this_present_new_part && that_present_new_part))
          return false;
        if (!this.new_part.equals(that.new_part))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NEW_PART:
            if (field.type == TType.STRUCT) {
              this.new_part = new Partition();
              this.new_part.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.new_part != null) {
        oprot.writeFieldBegin(NEW_PART_FIELD_DESC);
        this.new_part.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_partition_args(");
      boolean first = true;

      sb.append("new_part:");
      if (this.new_part == null) {
        sb.append("null");
      } else {
        sb.append(this.new_part);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class add_partition_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("add_partition_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private Partition success;
    public static final int SUCCESS = 0;
    private InvalidObjectException o1;
    public static final int O1 = 1;
    private AlreadyExistsException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Partition.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(add_partition_result.class, metaDataMap);
    }

    public add_partition_result() {
    }

    public add_partition_result(
      Partition success,
      InvalidObjectException o1,
      AlreadyExistsException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_partition_result(add_partition_result other) {
      if (other.isSetSuccess()) {
        this.success = new Partition(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new InvalidObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new AlreadyExistsException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public add_partition_result clone() {
      return new add_partition_result(this);
    }

    public Partition getSuccess() {
      return this.success;
    }

    public void setSuccess(Partition success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public InvalidObjectException getO1() {
      return this.o1;
    }

    public void setO1(InvalidObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public AlreadyExistsException getO2() {
      return this.o2;
    }

    public void setO2(AlreadyExistsException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Partition)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((InvalidObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((AlreadyExistsException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_partition_result)
        return this.equals((add_partition_result)that);
      return false;
    }

    public boolean equals(add_partition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Partition();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new InvalidObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new AlreadyExistsException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_partition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class append_partition_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("append_partition_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField PART_VALS_FIELD_DESC = new TField("part_vals", TType.LIST, (short)3);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private List<String> part_vals;
    public static final int PART_VALS = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PART_VALS, new FieldMetaData("part_vals", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(append_partition_args.class, metaDataMap);
    }

    public append_partition_args() {
    }

    public append_partition_args(
      String db_name,
      String tbl_name,
      List<String> part_vals)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.part_vals = part_vals;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public append_partition_args(append_partition_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      if (other.isSetPart_vals()) {
        List<String> __this__part_vals = new ArrayList<String>();
        for (String other_element : other.part_vals) {
          __this__part_vals.add(other_element);
        }
        this.part_vals = __this__part_vals;
      }
    }

    @Override
    public append_partition_args clone() {
      return new append_partition_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public int getPart_valsSize() {
      return (this.part_vals == null) ? 0 : this.part_vals.size();
    }

    public java.util.Iterator<String> getPart_valsIterator() {
      return (this.part_vals == null) ? null : this.part_vals.iterator();
    }

    public void addToPart_vals(String elem) {
      if (this.part_vals == null) {
        this.part_vals = new ArrayList<String>();
      }
      this.part_vals.add(elem);
    }

    public List<String> getPart_vals() {
      return this.part_vals;
    }

    public void setPart_vals(List<String> part_vals) {
      this.part_vals = part_vals;
    }

    public void unsetPart_vals() {
      this.part_vals = null;
    }

    // Returns true if field part_vals is set (has been asigned a value) and false otherwise
    public boolean isSetPart_vals() {
      return this.part_vals != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case PART_VALS:
        if (value == null) {
          unsetPart_vals();
        } else {
          setPart_vals((List<String>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case PART_VALS:
        return getPart_vals();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case PART_VALS:
        return isSetPart_vals();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof append_partition_args)
        return this.equals((append_partition_args)that);
      return false;
    }

    public boolean equals(append_partition_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_part_vals = true && this.isSetPart_vals();
      boolean that_present_part_vals = true && that.isSetPart_vals();
      if (this_present_part_vals || that_present_part_vals) {
        if (!(this_present_part_vals && that_present_part_vals))
          return false;
        if (!this.part_vals.equals(that.part_vals))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PART_VALS:
            if (field.type == TType.LIST) {
              {
                TList _list87 = iprot.readListBegin();
                this.part_vals = new ArrayList<String>(_list87.size);
                for (int _i88 = 0; _i88 < _list87.size; ++_i88)
                {
                  String _elem89;
                  _elem89 = iprot.readString();
                  this.part_vals.add(_elem89);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      if (this.part_vals != null) {
        oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.part_vals.size()));
          for (String _iter90 : this.part_vals)          {
            oprot.writeString(_iter90);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("append_partition_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("part_vals:");
      if (this.part_vals == null) {
        sb.append("null");
      } else {
        sb.append(this.part_vals);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class append_partition_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("append_partition_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private Partition success;
    public static final int SUCCESS = 0;
    private InvalidObjectException o1;
    public static final int O1 = 1;
    private AlreadyExistsException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Partition.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(append_partition_result.class, metaDataMap);
    }

    public append_partition_result() {
    }

    public append_partition_result(
      Partition success,
      InvalidObjectException o1,
      AlreadyExistsException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public append_partition_result(append_partition_result other) {
      if (other.isSetSuccess()) {
        this.success = new Partition(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new InvalidObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new AlreadyExistsException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public append_partition_result clone() {
      return new append_partition_result(this);
    }

    public Partition getSuccess() {
      return this.success;
    }

    public void setSuccess(Partition success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public InvalidObjectException getO1() {
      return this.o1;
    }

    public void setO1(InvalidObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public AlreadyExistsException getO2() {
      return this.o2;
    }

    public void setO2(AlreadyExistsException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Partition)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((InvalidObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((AlreadyExistsException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof append_partition_result)
        return this.equals((append_partition_result)that);
      return false;
    }

    public boolean equals(append_partition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Partition();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new InvalidObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new AlreadyExistsException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("append_partition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class append_partition_by_name_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("append_partition_by_name_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField PART_NAME_FIELD_DESC = new TField("part_name", TType.STRING, (short)3);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private String part_name;
    public static final int PART_NAME = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PART_NAME, new FieldMetaData("part_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(append_partition_by_name_args.class, metaDataMap);
    }

    public append_partition_by_name_args() {
    }

    public append_partition_by_name_args(
      String db_name,
      String tbl_name,
      String part_name)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.part_name = part_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public append_partition_by_name_args(append_partition_by_name_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      if (other.isSetPart_name()) {
        this.part_name = other.part_name;
      }
    }

    @Override
    public append_partition_by_name_args clone() {
      return new append_partition_by_name_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public String getPart_name() {
      return this.part_name;
    }

    public void setPart_name(String part_name) {
      this.part_name = part_name;
    }

    public void unsetPart_name() {
      this.part_name = null;
    }

    // Returns true if field part_name is set (has been asigned a value) and false otherwise
    public boolean isSetPart_name() {
      return this.part_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case PART_NAME:
        if (value == null) {
          unsetPart_name();
        } else {
          setPart_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case PART_NAME:
        return getPart_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case PART_NAME:
        return isSetPart_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof append_partition_by_name_args)
        return this.equals((append_partition_by_name_args)that);
      return false;
    }

    public boolean equals(append_partition_by_name_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_part_name = true && this.isSetPart_name();
      boolean that_present_part_name = true && that.isSetPart_name();
      if (this_present_part_name || that_present_part_name) {
        if (!(this_present_part_name && that_present_part_name))
          return false;
        if (!this.part_name.equals(that.part_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PART_NAME:
            if (field.type == TType.STRING) {
              this.part_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      if (this.part_name != null) {
        oprot.writeFieldBegin(PART_NAME_FIELD_DESC);
        oprot.writeString(this.part_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("append_partition_by_name_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("part_name:");
      if (this.part_name == null) {
        sb.append("null");
      } else {
        sb.append(this.part_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class append_partition_by_name_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("append_partition_by_name_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private Partition success;
    public static final int SUCCESS = 0;
    private InvalidObjectException o1;
    public static final int O1 = 1;
    private AlreadyExistsException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Partition.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(append_partition_by_name_result.class, metaDataMap);
    }

    public append_partition_by_name_result() {
    }

    public append_partition_by_name_result(
      Partition success,
      InvalidObjectException o1,
      AlreadyExistsException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public append_partition_by_name_result(append_partition_by_name_result other) {
      if (other.isSetSuccess()) {
        this.success = new Partition(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new InvalidObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new AlreadyExistsException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public append_partition_by_name_result clone() {
      return new append_partition_by_name_result(this);
    }

    public Partition getSuccess() {
      return this.success;
    }

    public void setSuccess(Partition success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public InvalidObjectException getO1() {
      return this.o1;
    }

    public void setO1(InvalidObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public AlreadyExistsException getO2() {
      return this.o2;
    }

    public void setO2(AlreadyExistsException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Partition)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((InvalidObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((AlreadyExistsException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof append_partition_by_name_result)
        return this.equals((append_partition_by_name_result)that);
      return false;
    }

    public boolean equals(append_partition_by_name_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Partition();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new InvalidObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new AlreadyExistsException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("append_partition_by_name_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_partition_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_partition_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField PART_VALS_FIELD_DESC = new TField("part_vals", TType.LIST, (short)3);
    private static final TField DELETE_DATA_FIELD_DESC = new TField("deleteData", TType.BOOL, (short)4);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private List<String> part_vals;
    public static final int PART_VALS = 3;
    private boolean deleteData;
    public static final int DELETEDATA = 4;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean deleteData = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PART_VALS, new FieldMetaData("part_vals", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(DELETEDATA, new FieldMetaData("deleteData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_partition_args.class, metaDataMap);
    }

    public drop_partition_args() {
    }

    public drop_partition_args(
      String db_name,
      String tbl_name,
      List<String> part_vals,
      boolean deleteData)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.part_vals = part_vals;
      this.deleteData = deleteData;
      this.__isset.deleteData = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_partition_args(drop_partition_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      if (other.isSetPart_vals()) {
        List<String> __this__part_vals = new ArrayList<String>();
        for (String other_element : other.part_vals) {
          __this__part_vals.add(other_element);
        }
        this.part_vals = __this__part_vals;
      }
      __isset.deleteData = other.__isset.deleteData;
      this.deleteData = other.deleteData;
    }

    @Override
    public drop_partition_args clone() {
      return new drop_partition_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public int getPart_valsSize() {
      return (this.part_vals == null) ? 0 : this.part_vals.size();
    }

    public java.util.Iterator<String> getPart_valsIterator() {
      return (this.part_vals == null) ? null : this.part_vals.iterator();
    }

    public void addToPart_vals(String elem) {
      if (this.part_vals == null) {
        this.part_vals = new ArrayList<String>();
      }
      this.part_vals.add(elem);
    }

    public List<String> getPart_vals() {
      return this.part_vals;
    }

    public void setPart_vals(List<String> part_vals) {
      this.part_vals = part_vals;
    }

    public void unsetPart_vals() {
      this.part_vals = null;
    }

    // Returns true if field part_vals is set (has been asigned a value) and false otherwise
    public boolean isSetPart_vals() {
      return this.part_vals != null;
    }

    public boolean isDeleteData() {
      return this.deleteData;
    }

    public void setDeleteData(boolean deleteData) {
      this.deleteData = deleteData;
      this.__isset.deleteData = true;
    }

    public void unsetDeleteData() {
      this.__isset.deleteData = false;
    }

    // Returns true if field deleteData is set (has been asigned a value) and false otherwise
    public boolean isSetDeleteData() {
      return this.__isset.deleteData;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case PART_VALS:
        if (value == null) {
          unsetPart_vals();
        } else {
          setPart_vals((List<String>)value);
        }
        break;

      case DELETEDATA:
        if (value == null) {
          unsetDeleteData();
        } else {
          setDeleteData((Boolean)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case PART_VALS:
        return getPart_vals();

      case DELETEDATA:
        return new Boolean(isDeleteData());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case PART_VALS:
        return isSetPart_vals();
      case DELETEDATA:
        return isSetDeleteData();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_partition_args)
        return this.equals((drop_partition_args)that);
      return false;
    }

    public boolean equals(drop_partition_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_part_vals = true && this.isSetPart_vals();
      boolean that_present_part_vals = true && that.isSetPart_vals();
      if (this_present_part_vals || that_present_part_vals) {
        if (!(this_present_part_vals && that_present_part_vals))
          return false;
        if (!this.part_vals.equals(that.part_vals))
          return false;
      }

      boolean this_present_deleteData = true;
      boolean that_present_deleteData = true;
      if (this_present_deleteData || that_present_deleteData) {
        if (!(this_present_deleteData && that_present_deleteData))
          return false;
        if (this.deleteData != that.deleteData)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PART_VALS:
            if (field.type == TType.LIST) {
              {
                TList _list91 = iprot.readListBegin();
                this.part_vals = new ArrayList<String>(_list91.size);
                for (int _i92 = 0; _i92 < _list91.size; ++_i92)
                {
                  String _elem93;
                  _elem93 = iprot.readString();
                  this.part_vals.add(_elem93);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DELETEDATA:
            if (field.type == TType.BOOL) {
              this.deleteData = iprot.readBool();
              this.__isset.deleteData = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      if (this.part_vals != null) {
        oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.part_vals.size()));
          for (String _iter94 : this.part_vals)          {
            oprot.writeString(_iter94);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DELETE_DATA_FIELD_DESC);
      oprot.writeBool(this.deleteData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_partition_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("part_vals:");
      if (this.part_vals == null) {
        sb.append("null");
      } else {
        sb.append(this.part_vals);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deleteData:");
      sb.append(this.deleteData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_partition_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_partition_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_partition_result.class, metaDataMap);
    }

    public drop_partition_result() {
    }

    public drop_partition_result(
      boolean success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_partition_result(drop_partition_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public drop_partition_result clone() {
      return new drop_partition_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_partition_result)
        return this.equals((drop_partition_result)that);
      return false;
    }

    public boolean equals(drop_partition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_partition_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_partition_by_name_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_partition_by_name_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField PART_NAME_FIELD_DESC = new TField("part_name", TType.STRING, (short)3);
    private static final TField DELETE_DATA_FIELD_DESC = new TField("deleteData", TType.BOOL, (short)4);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private String part_name;
    public static final int PART_NAME = 3;
    private boolean deleteData;
    public static final int DELETEDATA = 4;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean deleteData = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PART_NAME, new FieldMetaData("part_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(DELETEDATA, new FieldMetaData("deleteData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_partition_by_name_args.class, metaDataMap);
    }

    public drop_partition_by_name_args() {
    }

    public drop_partition_by_name_args(
      String db_name,
      String tbl_name,
      String part_name,
      boolean deleteData)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.part_name = part_name;
      this.deleteData = deleteData;
      this.__isset.deleteData = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_partition_by_name_args(drop_partition_by_name_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      if (other.isSetPart_name()) {
        this.part_name = other.part_name;
      }
      __isset.deleteData = other.__isset.deleteData;
      this.deleteData = other.deleteData;
    }

    @Override
    public drop_partition_by_name_args clone() {
      return new drop_partition_by_name_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public String getPart_name() {
      return this.part_name;
    }

    public void setPart_name(String part_name) {
      this.part_name = part_name;
    }

    public void unsetPart_name() {
      this.part_name = null;
    }

    // Returns true if field part_name is set (has been asigned a value) and false otherwise
    public boolean isSetPart_name() {
      return this.part_name != null;
    }

    public boolean isDeleteData() {
      return this.deleteData;
    }

    public void setDeleteData(boolean deleteData) {
      this.deleteData = deleteData;
      this.__isset.deleteData = true;
    }

    public void unsetDeleteData() {
      this.__isset.deleteData = false;
    }

    // Returns true if field deleteData is set (has been asigned a value) and false otherwise
    public boolean isSetDeleteData() {
      return this.__isset.deleteData;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case PART_NAME:
        if (value == null) {
          unsetPart_name();
        } else {
          setPart_name((String)value);
        }
        break;

      case DELETEDATA:
        if (value == null) {
          unsetDeleteData();
        } else {
          setDeleteData((Boolean)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case PART_NAME:
        return getPart_name();

      case DELETEDATA:
        return new Boolean(isDeleteData());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case PART_NAME:
        return isSetPart_name();
      case DELETEDATA:
        return isSetDeleteData();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_partition_by_name_args)
        return this.equals((drop_partition_by_name_args)that);
      return false;
    }

    public boolean equals(drop_partition_by_name_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_part_name = true && this.isSetPart_name();
      boolean that_present_part_name = true && that.isSetPart_name();
      if (this_present_part_name || that_present_part_name) {
        if (!(this_present_part_name && that_present_part_name))
          return false;
        if (!this.part_name.equals(that.part_name))
          return false;
      }

      boolean this_present_deleteData = true;
      boolean that_present_deleteData = true;
      if (this_present_deleteData || that_present_deleteData) {
        if (!(this_present_deleteData && that_present_deleteData))
          return false;
        if (this.deleteData != that.deleteData)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PART_NAME:
            if (field.type == TType.STRING) {
              this.part_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DELETEDATA:
            if (field.type == TType.BOOL) {
              this.deleteData = iprot.readBool();
              this.__isset.deleteData = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      if (this.part_name != null) {
        oprot.writeFieldBegin(PART_NAME_FIELD_DESC);
        oprot.writeString(this.part_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DELETE_DATA_FIELD_DESC);
      oprot.writeBool(this.deleteData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_partition_by_name_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("part_name:");
      if (this.part_name == null) {
        sb.append("null");
      } else {
        sb.append(this.part_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deleteData:");
      sb.append(this.deleteData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_partition_by_name_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_partition_by_name_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_partition_by_name_result.class, metaDataMap);
    }

    public drop_partition_by_name_result() {
    }

    public drop_partition_by_name_result(
      boolean success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_partition_by_name_result(drop_partition_by_name_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public drop_partition_by_name_result clone() {
      return new drop_partition_by_name_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_partition_by_name_result)
        return this.equals((drop_partition_by_name_result)that);
      return false;
    }

    public boolean equals(drop_partition_by_name_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_partition_by_name_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partition_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partition_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField PART_VALS_FIELD_DESC = new TField("part_vals", TType.LIST, (short)3);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private List<String> part_vals;
    public static final int PART_VALS = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PART_VALS, new FieldMetaData("part_vals", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partition_args.class, metaDataMap);
    }

    public get_partition_args() {
    }

    public get_partition_args(
      String db_name,
      String tbl_name,
      List<String> part_vals)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.part_vals = part_vals;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partition_args(get_partition_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      if (other.isSetPart_vals()) {
        List<String> __this__part_vals = new ArrayList<String>();
        for (String other_element : other.part_vals) {
          __this__part_vals.add(other_element);
        }
        this.part_vals = __this__part_vals;
      }
    }

    @Override
    public get_partition_args clone() {
      return new get_partition_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public int getPart_valsSize() {
      return (this.part_vals == null) ? 0 : this.part_vals.size();
    }

    public java.util.Iterator<String> getPart_valsIterator() {
      return (this.part_vals == null) ? null : this.part_vals.iterator();
    }

    public void addToPart_vals(String elem) {
      if (this.part_vals == null) {
        this.part_vals = new ArrayList<String>();
      }
      this.part_vals.add(elem);
    }

    public List<String> getPart_vals() {
      return this.part_vals;
    }

    public void setPart_vals(List<String> part_vals) {
      this.part_vals = part_vals;
    }

    public void unsetPart_vals() {
      this.part_vals = null;
    }

    // Returns true if field part_vals is set (has been asigned a value) and false otherwise
    public boolean isSetPart_vals() {
      return this.part_vals != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case PART_VALS:
        if (value == null) {
          unsetPart_vals();
        } else {
          setPart_vals((List<String>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case PART_VALS:
        return getPart_vals();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case PART_VALS:
        return isSetPart_vals();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partition_args)
        return this.equals((get_partition_args)that);
      return false;
    }

    public boolean equals(get_partition_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_part_vals = true && this.isSetPart_vals();
      boolean that_present_part_vals = true && that.isSetPart_vals();
      if (this_present_part_vals || that_present_part_vals) {
        if (!(this_present_part_vals && that_present_part_vals))
          return false;
        if (!this.part_vals.equals(that.part_vals))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PART_VALS:
            if (field.type == TType.LIST) {
              {
                TList _list95 = iprot.readListBegin();
                this.part_vals = new ArrayList<String>(_list95.size);
                for (int _i96 = 0; _i96 < _list95.size; ++_i96)
                {
                  String _elem97;
                  _elem97 = iprot.readString();
                  this.part_vals.add(_elem97);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      if (this.part_vals != null) {
        oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.part_vals.size()));
          for (String _iter98 : this.part_vals)          {
            oprot.writeString(_iter98);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partition_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("part_vals:");
      if (this.part_vals == null) {
        sb.append("null");
      } else {
        sb.append(this.part_vals);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partition_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partition_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private Partition success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;
    private NoSuchObjectException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Partition.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partition_result.class, metaDataMap);
    }

    public get_partition_result() {
    }

    public get_partition_result(
      Partition success,
      MetaException o1,
      NoSuchObjectException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partition_result(get_partition_result other) {
      if (other.isSetSuccess()) {
        this.success = new Partition(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new NoSuchObjectException(other.o2);
      }
    }

    @Override
    public get_partition_result clone() {
      return new get_partition_result(this);
    }

    public Partition getSuccess() {
      return this.success;
    }

    public void setSuccess(Partition success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public NoSuchObjectException getO2() {
      return this.o2;
    }

    public void setO2(NoSuchObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Partition)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((NoSuchObjectException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partition_result)
        return this.equals((get_partition_result)that);
      return false;
    }

    public boolean equals(get_partition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Partition();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new NoSuchObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partition_by_name_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partition_by_name_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField PART_NAME_FIELD_DESC = new TField("part_name", TType.STRING, (short)3);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private String part_name;
    public static final int PART_NAME = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PART_NAME, new FieldMetaData("part_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partition_by_name_args.class, metaDataMap);
    }

    public get_partition_by_name_args() {
    }

    public get_partition_by_name_args(
      String db_name,
      String tbl_name,
      String part_name)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.part_name = part_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partition_by_name_args(get_partition_by_name_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      if (other.isSetPart_name()) {
        this.part_name = other.part_name;
      }
    }

    @Override
    public get_partition_by_name_args clone() {
      return new get_partition_by_name_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public String getPart_name() {
      return this.part_name;
    }

    public void setPart_name(String part_name) {
      this.part_name = part_name;
    }

    public void unsetPart_name() {
      this.part_name = null;
    }

    // Returns true if field part_name is set (has been asigned a value) and false otherwise
    public boolean isSetPart_name() {
      return this.part_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case PART_NAME:
        if (value == null) {
          unsetPart_name();
        } else {
          setPart_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case PART_NAME:
        return getPart_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case PART_NAME:
        return isSetPart_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partition_by_name_args)
        return this.equals((get_partition_by_name_args)that);
      return false;
    }

    public boolean equals(get_partition_by_name_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_part_name = true && this.isSetPart_name();
      boolean that_present_part_name = true && that.isSetPart_name();
      if (this_present_part_name || that_present_part_name) {
        if (!(this_present_part_name && that_present_part_name))
          return false;
        if (!this.part_name.equals(that.part_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PART_NAME:
            if (field.type == TType.STRING) {
              this.part_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      if (this.part_name != null) {
        oprot.writeFieldBegin(PART_NAME_FIELD_DESC);
        oprot.writeString(this.part_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partition_by_name_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("part_name:");
      if (this.part_name == null) {
        sb.append("null");
      } else {
        sb.append(this.part_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partition_by_name_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partition_by_name_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private Partition success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;
    private NoSuchObjectException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Partition.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partition_by_name_result.class, metaDataMap);
    }

    public get_partition_by_name_result() {
    }

    public get_partition_by_name_result(
      Partition success,
      MetaException o1,
      NoSuchObjectException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partition_by_name_result(get_partition_by_name_result other) {
      if (other.isSetSuccess()) {
        this.success = new Partition(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new NoSuchObjectException(other.o2);
      }
    }

    @Override
    public get_partition_by_name_result clone() {
      return new get_partition_by_name_result(this);
    }

    public Partition getSuccess() {
      return this.success;
    }

    public void setSuccess(Partition success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public NoSuchObjectException getO2() {
      return this.o2;
    }

    public void setO2(NoSuchObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Partition)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((NoSuchObjectException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partition_by_name_result)
        return this.equals((get_partition_by_name_result)that);
      return false;
    }

    public boolean equals(get_partition_by_name_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Partition();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new NoSuchObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partition_by_name_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partitions_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partitions_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField MAX_PARTS_FIELD_DESC = new TField("max_parts", TType.I16, (short)3);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private short max_parts;
    public static final int MAX_PARTS = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean max_parts = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(MAX_PARTS, new FieldMetaData("max_parts", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partitions_args.class, metaDataMap);
    }

    public get_partitions_args() {
      this.max_parts = (short)-1;

    }

    public get_partitions_args(
      String db_name,
      String tbl_name,
      short max_parts)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partitions_args(get_partitions_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      __isset.max_parts = other.__isset.max_parts;
      this.max_parts = other.max_parts;
    }

    @Override
    public get_partitions_args clone() {
      return new get_partitions_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public short getMax_parts() {
      return this.max_parts;
    }

    public void setMax_parts(short max_parts) {
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    public void unsetMax_parts() {
      this.__isset.max_parts = false;
    }

    // Returns true if field max_parts is set (has been asigned a value) and false otherwise
    public boolean isSetMax_parts() {
      return this.__isset.max_parts;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case MAX_PARTS:
        if (value == null) {
          unsetMax_parts();
        } else {
          setMax_parts((Short)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case MAX_PARTS:
        return new Short(getMax_parts());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case MAX_PARTS:
        return isSetMax_parts();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partitions_args)
        return this.equals((get_partitions_args)that);
      return false;
    }

    public boolean equals(get_partitions_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_max_parts = true;
      boolean that_present_max_parts = true;
      if (this_present_max_parts || that_present_max_parts) {
        if (!(this_present_max_parts && that_present_max_parts))
          return false;
        if (this.max_parts != that.max_parts)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MAX_PARTS:
            if (field.type == TType.I16) {
              this.max_parts = iprot.readI16();
              this.__isset.max_parts = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_PARTS_FIELD_DESC);
      oprot.writeI16(this.max_parts);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partitions_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_parts:");
      sb.append(this.max_parts);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partitions_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partitions_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private List<Partition> success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Partition.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partitions_result.class, metaDataMap);
    }

    public get_partitions_result() {
    }

    public get_partitions_result(
      List<Partition> success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partitions_result(get_partitions_result other) {
      if (other.isSetSuccess()) {
        List<Partition> __this__success = new ArrayList<Partition>();
        for (Partition other_element : other.success) {
          __this__success.add(new Partition(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_partitions_result clone() {
      return new get_partitions_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Partition> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Partition elem) {
      if (this.success == null) {
        this.success = new ArrayList<Partition>();
      }
      this.success.add(elem);
    }

    public List<Partition> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Partition> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Partition>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partitions_result)
        return this.equals((get_partitions_result)that);
      return false;
    }

    public boolean equals(get_partitions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list99 = iprot.readListBegin();
                this.success = new ArrayList<Partition>(_list99.size);
                for (int _i100 = 0; _i100 < _list99.size; ++_i100)
                {
                  Partition _elem101;
                  _elem101 = new Partition();
                  _elem101.read(iprot);
                  this.success.add(_elem101);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Partition _iter102 : this.success)          {
            _iter102.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partitions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partition_names_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partition_names_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField MAX_PARTS_FIELD_DESC = new TField("max_parts", TType.I16, (short)3);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private short max_parts;
    public static final int MAX_PARTS = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean max_parts = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(MAX_PARTS, new FieldMetaData("max_parts", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partition_names_args.class, metaDataMap);
    }

    public get_partition_names_args() {
      this.max_parts = (short)-1;

    }

    public get_partition_names_args(
      String db_name,
      String tbl_name,
      short max_parts)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partition_names_args(get_partition_names_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      __isset.max_parts = other.__isset.max_parts;
      this.max_parts = other.max_parts;
    }

    @Override
    public get_partition_names_args clone() {
      return new get_partition_names_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public short getMax_parts() {
      return this.max_parts;
    }

    public void setMax_parts(short max_parts) {
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    public void unsetMax_parts() {
      this.__isset.max_parts = false;
    }

    // Returns true if field max_parts is set (has been asigned a value) and false otherwise
    public boolean isSetMax_parts() {
      return this.__isset.max_parts;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case MAX_PARTS:
        if (value == null) {
          unsetMax_parts();
        } else {
          setMax_parts((Short)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case MAX_PARTS:
        return new Short(getMax_parts());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case MAX_PARTS:
        return isSetMax_parts();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partition_names_args)
        return this.equals((get_partition_names_args)that);
      return false;
    }

    public boolean equals(get_partition_names_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_max_parts = true;
      boolean that_present_max_parts = true;
      if (this_present_max_parts || that_present_max_parts) {
        if (!(this_present_max_parts && that_present_max_parts))
          return false;
        if (this.max_parts != that.max_parts)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MAX_PARTS:
            if (field.type == TType.I16) {
              this.max_parts = iprot.readI16();
              this.__isset.max_parts = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_PARTS_FIELD_DESC);
      oprot.writeI16(this.max_parts);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partition_names_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_parts:");
      sb.append(this.max_parts);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partition_names_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partition_names_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)1);

    private List<String> success;
    public static final int SUCCESS = 0;
    private MetaException o2;
    public static final int O2 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partition_names_result.class, metaDataMap);
    }

    public get_partition_names_result() {
    }

    public get_partition_names_result(
      List<String> success,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partition_names_result(get_partition_names_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_partition_names_result clone() {
      return new get_partition_names_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partition_names_result)
        return this.equals((get_partition_names_result)that);
      return false;
    }

    public boolean equals(get_partition_names_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list103 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list103.size);
                for (int _i104 = 0; _i104 < _list103.size; ++_i104)
                {
                  String _elem105;
                  _elem105 = iprot.readString();
                  this.success.add(_elem105);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter106 : this.success)          {
            oprot.writeString(_iter106);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partition_names_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partitions_ps_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partitions_ps_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField PART_VALS_FIELD_DESC = new TField("part_vals", TType.LIST, (short)3);
    private static final TField MAX_PARTS_FIELD_DESC = new TField("max_parts", TType.I16, (short)4);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private List<String> part_vals;
    public static final int PART_VALS = 3;
    private short max_parts;
    public static final int MAX_PARTS = 4;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean max_parts = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PART_VALS, new FieldMetaData("part_vals", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(MAX_PARTS, new FieldMetaData("max_parts", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partitions_ps_args.class, metaDataMap);
    }

    public get_partitions_ps_args() {
      this.max_parts = (short)-1;

    }

    public get_partitions_ps_args(
      String db_name,
      String tbl_name,
      List<String> part_vals,
      short max_parts)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.part_vals = part_vals;
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partitions_ps_args(get_partitions_ps_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      if (other.isSetPart_vals()) {
        List<String> __this__part_vals = new ArrayList<String>();
        for (String other_element : other.part_vals) {
          __this__part_vals.add(other_element);
        }
        this.part_vals = __this__part_vals;
      }
      __isset.max_parts = other.__isset.max_parts;
      this.max_parts = other.max_parts;
    }

    @Override
    public get_partitions_ps_args clone() {
      return new get_partitions_ps_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public int getPart_valsSize() {
      return (this.part_vals == null) ? 0 : this.part_vals.size();
    }

    public java.util.Iterator<String> getPart_valsIterator() {
      return (this.part_vals == null) ? null : this.part_vals.iterator();
    }

    public void addToPart_vals(String elem) {
      if (this.part_vals == null) {
        this.part_vals = new ArrayList<String>();
      }
      this.part_vals.add(elem);
    }

    public List<String> getPart_vals() {
      return this.part_vals;
    }

    public void setPart_vals(List<String> part_vals) {
      this.part_vals = part_vals;
    }

    public void unsetPart_vals() {
      this.part_vals = null;
    }

    // Returns true if field part_vals is set (has been asigned a value) and false otherwise
    public boolean isSetPart_vals() {
      return this.part_vals != null;
    }

    public short getMax_parts() {
      return this.max_parts;
    }

    public void setMax_parts(short max_parts) {
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    public void unsetMax_parts() {
      this.__isset.max_parts = false;
    }

    // Returns true if field max_parts is set (has been asigned a value) and false otherwise
    public boolean isSetMax_parts() {
      return this.__isset.max_parts;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case PART_VALS:
        if (value == null) {
          unsetPart_vals();
        } else {
          setPart_vals((List<String>)value);
        }
        break;

      case MAX_PARTS:
        if (value == null) {
          unsetMax_parts();
        } else {
          setMax_parts((Short)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case PART_VALS:
        return getPart_vals();

      case MAX_PARTS:
        return new Short(getMax_parts());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case PART_VALS:
        return isSetPart_vals();
      case MAX_PARTS:
        return isSetMax_parts();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partitions_ps_args)
        return this.equals((get_partitions_ps_args)that);
      return false;
    }

    public boolean equals(get_partitions_ps_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_part_vals = true && this.isSetPart_vals();
      boolean that_present_part_vals = true && that.isSetPart_vals();
      if (this_present_part_vals || that_present_part_vals) {
        if (!(this_present_part_vals && that_present_part_vals))
          return false;
        if (!this.part_vals.equals(that.part_vals))
          return false;
      }

      boolean this_present_max_parts = true;
      boolean that_present_max_parts = true;
      if (this_present_max_parts || that_present_max_parts) {
        if (!(this_present_max_parts && that_present_max_parts))
          return false;
        if (this.max_parts != that.max_parts)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PART_VALS:
            if (field.type == TType.LIST) {
              {
                TList _list107 = iprot.readListBegin();
                this.part_vals = new ArrayList<String>(_list107.size);
                for (int _i108 = 0; _i108 < _list107.size; ++_i108)
                {
                  String _elem109;
                  _elem109 = iprot.readString();
                  this.part_vals.add(_elem109);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MAX_PARTS:
            if (field.type == TType.I16) {
              this.max_parts = iprot.readI16();
              this.__isset.max_parts = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      if (this.part_vals != null) {
        oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.part_vals.size()));
          for (String _iter110 : this.part_vals)          {
            oprot.writeString(_iter110);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_PARTS_FIELD_DESC);
      oprot.writeI16(this.max_parts);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partitions_ps_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("part_vals:");
      if (this.part_vals == null) {
        sb.append("null");
      } else {
        sb.append(this.part_vals);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_parts:");
      sb.append(this.max_parts);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partitions_ps_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partitions_ps_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<Partition> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Partition.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partitions_ps_result.class, metaDataMap);
    }

    public get_partitions_ps_result() {
    }

    public get_partitions_ps_result(
      List<Partition> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partitions_ps_result(get_partitions_ps_result other) {
      if (other.isSetSuccess()) {
        List<Partition> __this__success = new ArrayList<Partition>();
        for (Partition other_element : other.success) {
          __this__success.add(new Partition(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_partitions_ps_result clone() {
      return new get_partitions_ps_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Partition> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Partition elem) {
      if (this.success == null) {
        this.success = new ArrayList<Partition>();
      }
      this.success.add(elem);
    }

    public List<Partition> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Partition> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Partition>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partitions_ps_result)
        return this.equals((get_partitions_ps_result)that);
      return false;
    }

    public boolean equals(get_partitions_ps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list111 = iprot.readListBegin();
                this.success = new ArrayList<Partition>(_list111.size);
                for (int _i112 = 0; _i112 < _list111.size; ++_i112)
                {
                  Partition _elem113;
                  _elem113 = new Partition();
                  _elem113.read(iprot);
                  this.success.add(_elem113);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Partition _iter114 : this.success)          {
            _iter114.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partitions_ps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partition_names_ps_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partition_names_ps_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField PART_VALS_FIELD_DESC = new TField("part_vals", TType.LIST, (short)3);
    private static final TField MAX_PARTS_FIELD_DESC = new TField("max_parts", TType.I16, (short)4);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private List<String> part_vals;
    public static final int PART_VALS = 3;
    private short max_parts;
    public static final int MAX_PARTS = 4;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean max_parts = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PART_VALS, new FieldMetaData("part_vals", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(MAX_PARTS, new FieldMetaData("max_parts", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partition_names_ps_args.class, metaDataMap);
    }

    public get_partition_names_ps_args() {
      this.max_parts = (short)-1;

    }

    public get_partition_names_ps_args(
      String db_name,
      String tbl_name,
      List<String> part_vals,
      short max_parts)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.part_vals = part_vals;
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partition_names_ps_args(get_partition_names_ps_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      if (other.isSetPart_vals()) {
        List<String> __this__part_vals = new ArrayList<String>();
        for (String other_element : other.part_vals) {
          __this__part_vals.add(other_element);
        }
        this.part_vals = __this__part_vals;
      }
      __isset.max_parts = other.__isset.max_parts;
      this.max_parts = other.max_parts;
    }

    @Override
    public get_partition_names_ps_args clone() {
      return new get_partition_names_ps_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public int getPart_valsSize() {
      return (this.part_vals == null) ? 0 : this.part_vals.size();
    }

    public java.util.Iterator<String> getPart_valsIterator() {
      return (this.part_vals == null) ? null : this.part_vals.iterator();
    }

    public void addToPart_vals(String elem) {
      if (this.part_vals == null) {
        this.part_vals = new ArrayList<String>();
      }
      this.part_vals.add(elem);
    }

    public List<String> getPart_vals() {
      return this.part_vals;
    }

    public void setPart_vals(List<String> part_vals) {
      this.part_vals = part_vals;
    }

    public void unsetPart_vals() {
      this.part_vals = null;
    }

    // Returns true if field part_vals is set (has been asigned a value) and false otherwise
    public boolean isSetPart_vals() {
      return this.part_vals != null;
    }

    public short getMax_parts() {
      return this.max_parts;
    }

    public void setMax_parts(short max_parts) {
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    public void unsetMax_parts() {
      this.__isset.max_parts = false;
    }

    // Returns true if field max_parts is set (has been asigned a value) and false otherwise
    public boolean isSetMax_parts() {
      return this.__isset.max_parts;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case PART_VALS:
        if (value == null) {
          unsetPart_vals();
        } else {
          setPart_vals((List<String>)value);
        }
        break;

      case MAX_PARTS:
        if (value == null) {
          unsetMax_parts();
        } else {
          setMax_parts((Short)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case PART_VALS:
        return getPart_vals();

      case MAX_PARTS:
        return new Short(getMax_parts());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case PART_VALS:
        return isSetPart_vals();
      case MAX_PARTS:
        return isSetMax_parts();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partition_names_ps_args)
        return this.equals((get_partition_names_ps_args)that);
      return false;
    }

    public boolean equals(get_partition_names_ps_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_part_vals = true && this.isSetPart_vals();
      boolean that_present_part_vals = true && that.isSetPart_vals();
      if (this_present_part_vals || that_present_part_vals) {
        if (!(this_present_part_vals && that_present_part_vals))
          return false;
        if (!this.part_vals.equals(that.part_vals))
          return false;
      }

      boolean this_present_max_parts = true;
      boolean that_present_max_parts = true;
      if (this_present_max_parts || that_present_max_parts) {
        if (!(this_present_max_parts && that_present_max_parts))
          return false;
        if (this.max_parts != that.max_parts)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PART_VALS:
            if (field.type == TType.LIST) {
              {
                TList _list115 = iprot.readListBegin();
                this.part_vals = new ArrayList<String>(_list115.size);
                for (int _i116 = 0; _i116 < _list115.size; ++_i116)
                {
                  String _elem117;
                  _elem117 = iprot.readString();
                  this.part_vals.add(_elem117);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MAX_PARTS:
            if (field.type == TType.I16) {
              this.max_parts = iprot.readI16();
              this.__isset.max_parts = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      if (this.part_vals != null) {
        oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.part_vals.size()));
          for (String _iter118 : this.part_vals)          {
            oprot.writeString(_iter118);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_PARTS_FIELD_DESC);
      oprot.writeI16(this.max_parts);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partition_names_ps_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("part_vals:");
      if (this.part_vals == null) {
        sb.append("null");
      } else {
        sb.append(this.part_vals);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_parts:");
      sb.append(this.max_parts);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partition_names_ps_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partition_names_ps_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<String> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partition_names_ps_result.class, metaDataMap);
    }

    public get_partition_names_ps_result() {
    }

    public get_partition_names_ps_result(
      List<String> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partition_names_ps_result(get_partition_names_ps_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_partition_names_ps_result clone() {
      return new get_partition_names_ps_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partition_names_ps_result)
        return this.equals((get_partition_names_ps_result)that);
      return false;
    }

    public boolean equals(get_partition_names_ps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list119 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list119.size);
                for (int _i120 = 0; _i120 < _list119.size; ++_i120)
                {
                  String _elem121;
                  _elem121 = iprot.readString();
                  this.success.add(_elem121);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter122 : this.success)          {
            oprot.writeString(_iter122);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partition_names_ps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partitions_by_filter_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partitions_by_filter_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField FILTER_FIELD_DESC = new TField("filter", TType.STRING, (short)3);
    private static final TField MAX_PARTS_FIELD_DESC = new TField("max_parts", TType.I16, (short)4);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private String filter;
    public static final int FILTER = 3;
    private short max_parts;
    public static final int MAX_PARTS = 4;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean max_parts = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(FILTER, new FieldMetaData("filter", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(MAX_PARTS, new FieldMetaData("max_parts", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partitions_by_filter_args.class, metaDataMap);
    }

    public get_partitions_by_filter_args() {
      this.max_parts = (short)-1;

    }

    public get_partitions_by_filter_args(
      String db_name,
      String tbl_name,
      String filter,
      short max_parts)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.filter = filter;
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partitions_by_filter_args(get_partitions_by_filter_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      if (other.isSetFilter()) {
        this.filter = other.filter;
      }
      __isset.max_parts = other.__isset.max_parts;
      this.max_parts = other.max_parts;
    }

    @Override
    public get_partitions_by_filter_args clone() {
      return new get_partitions_by_filter_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public String getFilter() {
      return this.filter;
    }

    public void setFilter(String filter) {
      this.filter = filter;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    // Returns true if field filter is set (has been asigned a value) and false otherwise
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public short getMax_parts() {
      return this.max_parts;
    }

    public void setMax_parts(short max_parts) {
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    public void unsetMax_parts() {
      this.__isset.max_parts = false;
    }

    // Returns true if field max_parts is set (has been asigned a value) and false otherwise
    public boolean isSetMax_parts() {
      return this.__isset.max_parts;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((String)value);
        }
        break;

      case MAX_PARTS:
        if (value == null) {
          unsetMax_parts();
        } else {
          setMax_parts((Short)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case FILTER:
        return getFilter();

      case MAX_PARTS:
        return new Short(getMax_parts());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case FILTER:
        return isSetFilter();
      case MAX_PARTS:
        return isSetMax_parts();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partitions_by_filter_args)
        return this.equals((get_partitions_by_filter_args)that);
      return false;
    }

    public boolean equals(get_partitions_by_filter_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      boolean this_present_max_parts = true;
      boolean that_present_max_parts = true;
      if (this_present_max_parts || that_present_max_parts) {
        if (!(this_present_max_parts && that_present_max_parts))
          return false;
        if (this.max_parts != that.max_parts)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FILTER:
            if (field.type == TType.STRING) {
              this.filter = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MAX_PARTS:
            if (field.type == TType.I16) {
              this.max_parts = iprot.readI16();
              this.__isset.max_parts = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        oprot.writeString(this.filter);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_PARTS_FIELD_DESC);
      oprot.writeI16(this.max_parts);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partitions_by_filter_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_parts:");
      sb.append(this.max_parts);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partitions_by_filter_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partitions_by_filter_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private List<Partition> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;
    private NoSuchObjectException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Partition.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partitions_by_filter_result.class, metaDataMap);
    }

    public get_partitions_by_filter_result() {
    }

    public get_partitions_by_filter_result(
      List<Partition> success,
      MetaException o1,
      NoSuchObjectException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partitions_by_filter_result(get_partitions_by_filter_result other) {
      if (other.isSetSuccess()) {
        List<Partition> __this__success = new ArrayList<Partition>();
        for (Partition other_element : other.success) {
          __this__success.add(new Partition(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new NoSuchObjectException(other.o2);
      }
    }

    @Override
    public get_partitions_by_filter_result clone() {
      return new get_partitions_by_filter_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Partition> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Partition elem) {
      if (this.success == null) {
        this.success = new ArrayList<Partition>();
      }
      this.success.add(elem);
    }

    public List<Partition> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Partition> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public NoSuchObjectException getO2() {
      return this.o2;
    }

    public void setO2(NoSuchObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Partition>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((NoSuchObjectException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partitions_by_filter_result)
        return this.equals((get_partitions_by_filter_result)that);
      return false;
    }

    public boolean equals(get_partitions_by_filter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list123 = iprot.readListBegin();
                this.success = new ArrayList<Partition>(_list123.size);
                for (int _i124 = 0; _i124 < _list123.size; ++_i124)
                {
                  Partition _elem125;
                  _elem125 = new Partition();
                  _elem125.read(iprot);
                  this.success.add(_elem125);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new NoSuchObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Partition _iter126 : this.success)          {
            _iter126.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partitions_by_filter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class alter_partition_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("alter_partition_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField NEW_PART_FIELD_DESC = new TField("new_part", TType.STRUCT, (short)3);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private Partition new_part;
    public static final int NEW_PART = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(NEW_PART, new FieldMetaData("new_part", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Partition.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(alter_partition_args.class, metaDataMap);
    }

    public alter_partition_args() {
    }

    public alter_partition_args(
      String db_name,
      String tbl_name,
      Partition new_part)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.new_part = new_part;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alter_partition_args(alter_partition_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      if (other.isSetNew_part()) {
        this.new_part = new Partition(other.new_part);
      }
    }

    @Override
    public alter_partition_args clone() {
      return new alter_partition_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public Partition getNew_part() {
      return this.new_part;
    }

    public void setNew_part(Partition new_part) {
      this.new_part = new_part;
    }

    public void unsetNew_part() {
      this.new_part = null;
    }

    // Returns true if field new_part is set (has been asigned a value) and false otherwise
    public boolean isSetNew_part() {
      return this.new_part != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case NEW_PART:
        if (value == null) {
          unsetNew_part();
        } else {
          setNew_part((Partition)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case NEW_PART:
        return getNew_part();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case NEW_PART:
        return isSetNew_part();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alter_partition_args)
        return this.equals((alter_partition_args)that);
      return false;
    }

    public boolean equals(alter_partition_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_new_part = true && this.isSetNew_part();
      boolean that_present_new_part = true && that.isSetNew_part();
      if (this_present_new_part || that_present_new_part) {
        if (!(this_present_new_part && that_present_new_part))
          return false;
        if (!this.new_part.equals(that.new_part))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NEW_PART:
            if (field.type == TType.STRUCT) {
              this.new_part = new Partition();
              this.new_part.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      if (this.new_part != null) {
        oprot.writeFieldBegin(NEW_PART_FIELD_DESC);
        this.new_part.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alter_partition_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("new_part:");
      if (this.new_part == null) {
        sb.append("null");
      } else {
        sb.append(this.new_part);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class alter_partition_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("alter_partition_result");
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private InvalidOperationException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(alter_partition_result.class, metaDataMap);
    }

    public alter_partition_result() {
    }

    public alter_partition_result(
      InvalidOperationException o1,
      MetaException o2)
    {
      this();
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alter_partition_result(alter_partition_result other) {
      if (other.isSetO1()) {
        this.o1 = new InvalidOperationException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public alter_partition_result clone() {
      return new alter_partition_result(this);
    }

    public InvalidOperationException getO1() {
      return this.o1;
    }

    public void setO1(InvalidOperationException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((InvalidOperationException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alter_partition_result)
        return this.equals((alter_partition_result)that);
      return false;
    }

    public boolean equals(alter_partition_result that) {
      if (that == null)
        return false;

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new InvalidOperationException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alter_partition_result(");
      boolean first = true;

      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_config_value_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_config_value_args");
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);
    private static final TField DEFAULT_VALUE_FIELD_DESC = new TField("defaultValue", TType.STRING, (short)2);

    private String name;
    public static final int NAME = 1;
    private String defaultValue;
    public static final int DEFAULTVALUE = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(DEFAULTVALUE, new FieldMetaData("defaultValue", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_config_value_args.class, metaDataMap);
    }

    public get_config_value_args() {
    }

    public get_config_value_args(
      String name,
      String defaultValue)
    {
      this();
      this.name = name;
      this.defaultValue = defaultValue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_config_value_args(get_config_value_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetDefaultValue()) {
        this.defaultValue = other.defaultValue;
      }
    }

    @Override
    public get_config_value_args clone() {
      return new get_config_value_args(this);
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public String getDefaultValue() {
      return this.defaultValue;
    }

    public void setDefaultValue(String defaultValue) {
      this.defaultValue = defaultValue;
    }

    public void unsetDefaultValue() {
      this.defaultValue = null;
    }

    // Returns true if field defaultValue is set (has been asigned a value) and false otherwise
    public boolean isSetDefaultValue() {
      return this.defaultValue != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case DEFAULTVALUE:
        if (value == null) {
          unsetDefaultValue();
        } else {
          setDefaultValue((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case NAME:
        return getName();

      case DEFAULTVALUE:
        return getDefaultValue();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case NAME:
        return isSetName();
      case DEFAULTVALUE:
        return isSetDefaultValue();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_config_value_args)
        return this.equals((get_config_value_args)that);
      return false;
    }

    public boolean equals(get_config_value_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_defaultValue = true && this.isSetDefaultValue();
      boolean that_present_defaultValue = true && that.isSetDefaultValue();
      if (this_present_defaultValue || that_present_defaultValue) {
        if (!(this_present_defaultValue && that_present_defaultValue))
          return false;
        if (!this.defaultValue.equals(that.defaultValue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DEFAULTVALUE:
            if (field.type == TType.STRING) {
              this.defaultValue = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.defaultValue != null) {
        oprot.writeFieldBegin(DEFAULT_VALUE_FIELD_DESC);
        oprot.writeString(this.defaultValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_config_value_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("defaultValue:");
      if (this.defaultValue == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultValue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_config_value_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_config_value_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private String success;
    public static final int SUCCESS = 0;
    private ConfigValSecurityException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_config_value_result.class, metaDataMap);
    }

    public get_config_value_result() {
    }

    public get_config_value_result(
      String success,
      ConfigValSecurityException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_config_value_result(get_config_value_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetO1()) {
        this.o1 = new ConfigValSecurityException(other.o1);
      }
    }

    @Override
    public get_config_value_result clone() {
      return new get_config_value_result(this);
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public ConfigValSecurityException getO1() {
      return this.o1;
    }

    public void setO1(ConfigValSecurityException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((ConfigValSecurityException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_config_value_result)
        return this.equals((get_config_value_result)that);
      return false;
    }

    public boolean equals(get_config_value_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new ConfigValSecurityException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_config_value_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class partition_name_to_vals_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("partition_name_to_vals_args");
    private static final TField PART_NAME_FIELD_DESC = new TField("part_name", TType.STRING, (short)1);

    private String part_name;
    public static final int PART_NAME = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(PART_NAME, new FieldMetaData("part_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(partition_name_to_vals_args.class, metaDataMap);
    }

    public partition_name_to_vals_args() {
    }

    public partition_name_to_vals_args(
      String part_name)
    {
      this();
      this.part_name = part_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partition_name_to_vals_args(partition_name_to_vals_args other) {
      if (other.isSetPart_name()) {
        this.part_name = other.part_name;
      }
    }

    @Override
    public partition_name_to_vals_args clone() {
      return new partition_name_to_vals_args(this);
    }

    public String getPart_name() {
      return this.part_name;
    }

    public void setPart_name(String part_name) {
      this.part_name = part_name;
    }

    public void unsetPart_name() {
      this.part_name = null;
    }

    // Returns true if field part_name is set (has been asigned a value) and false otherwise
    public boolean isSetPart_name() {
      return this.part_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case PART_NAME:
        if (value == null) {
          unsetPart_name();
        } else {
          setPart_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case PART_NAME:
        return getPart_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case PART_NAME:
        return isSetPart_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partition_name_to_vals_args)
        return this.equals((partition_name_to_vals_args)that);
      return false;
    }

    public boolean equals(partition_name_to_vals_args that) {
      if (that == null)
        return false;

      boolean this_present_part_name = true && this.isSetPart_name();
      boolean that_present_part_name = true && that.isSetPart_name();
      if (this_present_part_name || that_present_part_name) {
        if (!(this_present_part_name && that_present_part_name))
          return false;
        if (!this.part_name.equals(that.part_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case PART_NAME:
            if (field.type == TType.STRING) {
              this.part_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.part_name != null) {
        oprot.writeFieldBegin(PART_NAME_FIELD_DESC);
        oprot.writeString(this.part_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partition_name_to_vals_args(");
      boolean first = true;

      sb.append("part_name:");
      if (this.part_name == null) {
        sb.append("null");
      } else {
        sb.append(this.part_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class partition_name_to_vals_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("partition_name_to_vals_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<String> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(partition_name_to_vals_result.class, metaDataMap);
    }

    public partition_name_to_vals_result() {
    }

    public partition_name_to_vals_result(
      List<String> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partition_name_to_vals_result(partition_name_to_vals_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public partition_name_to_vals_result clone() {
      return new partition_name_to_vals_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partition_name_to_vals_result)
        return this.equals((partition_name_to_vals_result)that);
      return false;
    }

    public boolean equals(partition_name_to_vals_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list127 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list127.size);
                for (int _i128 = 0; _i128 < _list127.size; ++_i128)
                {
                  String _elem129;
                  _elem129 = iprot.readString();
                  this.success.add(_elem129);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter130 : this.success)          {
            oprot.writeString(_iter130);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partition_name_to_vals_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class partition_name_to_spec_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("partition_name_to_spec_args");
    private static final TField PART_NAME_FIELD_DESC = new TField("part_name", TType.STRING, (short)1);

    private String part_name;
    public static final int PART_NAME = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(PART_NAME, new FieldMetaData("part_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(partition_name_to_spec_args.class, metaDataMap);
    }

    public partition_name_to_spec_args() {
    }

    public partition_name_to_spec_args(
      String part_name)
    {
      this();
      this.part_name = part_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partition_name_to_spec_args(partition_name_to_spec_args other) {
      if (other.isSetPart_name()) {
        this.part_name = other.part_name;
      }
    }

    @Override
    public partition_name_to_spec_args clone() {
      return new partition_name_to_spec_args(this);
    }

    public String getPart_name() {
      return this.part_name;
    }

    public void setPart_name(String part_name) {
      this.part_name = part_name;
    }

    public void unsetPart_name() {
      this.part_name = null;
    }

    // Returns true if field part_name is set (has been asigned a value) and false otherwise
    public boolean isSetPart_name() {
      return this.part_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case PART_NAME:
        if (value == null) {
          unsetPart_name();
        } else {
          setPart_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case PART_NAME:
        return getPart_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case PART_NAME:
        return isSetPart_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partition_name_to_spec_args)
        return this.equals((partition_name_to_spec_args)that);
      return false;
    }

    public boolean equals(partition_name_to_spec_args that) {
      if (that == null)
        return false;

      boolean this_present_part_name = true && this.isSetPart_name();
      boolean that_present_part_name = true && that.isSetPart_name();
      if (this_present_part_name || that_present_part_name) {
        if (!(this_present_part_name && that_present_part_name))
          return false;
        if (!this.part_name.equals(that.part_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case PART_NAME:
            if (field.type == TType.STRING) {
              this.part_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.part_name != null) {
        oprot.writeFieldBegin(PART_NAME_FIELD_DESC);
        oprot.writeString(this.part_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partition_name_to_spec_args(");
      boolean first = true;

      sb.append("part_name:");
      if (this.part_name == null) {
        sb.append("null");
      } else {
        sb.append(this.part_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class partition_name_to_spec_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("partition_name_to_spec_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private Map<String,String> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new FieldValueMetaData(TType.STRING))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(partition_name_to_spec_result.class, metaDataMap);
    }

    public partition_name_to_spec_result() {
    }

    public partition_name_to_spec_result(
      Map<String,String> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partition_name_to_spec_result(partition_name_to_spec_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public partition_name_to_spec_result clone() {
      return new partition_name_to_spec_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public void setSuccess(Map<String,String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partition_name_to_spec_result)
        return this.equals((partition_name_to_spec_result)that);
      return false;
    }

    public boolean equals(partition_name_to_spec_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.MAP) {
              {
                TMap _map131 = iprot.readMapBegin();
                this.success = new HashMap<String,String>(2*_map131.size);
                for (int _i132 = 0; _i132 < _map131.size; ++_i132)
                {
                  String _key133;
                  String _val134;
                  _key133 = iprot.readString();
                  _val134 = iprot.readString();
                  this.success.put(_key133, _val134);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.success.size()));
          for (Map.Entry<String, String> _iter135 : this.success.entrySet())          {
            oprot.writeString(_iter135.getKey());
            oprot.writeString(_iter135.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partition_name_to_spec_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class add_index_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("add_index_args");
    private static final TField NEW_INDEX_FIELD_DESC = new TField("new_index", TType.STRUCT, (short)1);
    private static final TField INDEX_TABLE_FIELD_DESC = new TField("index_table", TType.STRUCT, (short)2);

    private Index new_index;
    public static final int NEW_INDEX = 1;
    private Table index_table;
    public static final int INDEX_TABLE = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(NEW_INDEX, new FieldMetaData("new_index", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Index.class)));
      put(INDEX_TABLE, new FieldMetaData("index_table", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Table.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(add_index_args.class, metaDataMap);
    }

    public add_index_args() {
    }

    public add_index_args(
      Index new_index,
      Table index_table)
    {
      this();
      this.new_index = new_index;
      this.index_table = index_table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_index_args(add_index_args other) {
      if (other.isSetNew_index()) {
        this.new_index = new Index(other.new_index);
      }
      if (other.isSetIndex_table()) {
        this.index_table = new Table(other.index_table);
      }
    }

    @Override
    public add_index_args clone() {
      return new add_index_args(this);
    }

    public Index getNew_index() {
      return this.new_index;
    }

    public void setNew_index(Index new_index) {
      this.new_index = new_index;
    }

    public void unsetNew_index() {
      this.new_index = null;
    }

    // Returns true if field new_index is set (has been asigned a value) and false otherwise
    public boolean isSetNew_index() {
      return this.new_index != null;
    }

    public Table getIndex_table() {
      return this.index_table;
    }

    public void setIndex_table(Table index_table) {
      this.index_table = index_table;
    }

    public void unsetIndex_table() {
      this.index_table = null;
    }

    // Returns true if field index_table is set (has been asigned a value) and false otherwise
    public boolean isSetIndex_table() {
      return this.index_table != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case NEW_INDEX:
        if (value == null) {
          unsetNew_index();
        } else {
          setNew_index((Index)value);
        }
        break;

      case INDEX_TABLE:
        if (value == null) {
          unsetIndex_table();
        } else {
          setIndex_table((Table)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case NEW_INDEX:
        return getNew_index();

      case INDEX_TABLE:
        return getIndex_table();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case NEW_INDEX:
        return isSetNew_index();
      case INDEX_TABLE:
        return isSetIndex_table();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_index_args)
        return this.equals((add_index_args)that);
      return false;
    }

    public boolean equals(add_index_args that) {
      if (that == null)
        return false;

      boolean this_present_new_index = true && this.isSetNew_index();
      boolean that_present_new_index = true && that.isSetNew_index();
      if (this_present_new_index || that_present_new_index) {
        if (!(this_present_new_index && that_present_new_index))
          return false;
        if (!this.new_index.equals(that.new_index))
          return false;
      }

      boolean this_present_index_table = true && this.isSetIndex_table();
      boolean that_present_index_table = true && that.isSetIndex_table();
      if (this_present_index_table || that_present_index_table) {
        if (!(this_present_index_table && that_present_index_table))
          return false;
        if (!this.index_table.equals(that.index_table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NEW_INDEX:
            if (field.type == TType.STRUCT) {
              this.new_index = new Index();
              this.new_index.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INDEX_TABLE:
            if (field.type == TType.STRUCT) {
              this.index_table = new Table();
              this.index_table.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.new_index != null) {
        oprot.writeFieldBegin(NEW_INDEX_FIELD_DESC);
        this.new_index.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.index_table != null) {
        oprot.writeFieldBegin(INDEX_TABLE_FIELD_DESC);
        this.index_table.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_index_args(");
      boolean first = true;

      sb.append("new_index:");
      if (this.new_index == null) {
        sb.append("null");
      } else {
        sb.append(this.new_index);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("index_table:");
      if (this.index_table == null) {
        sb.append("null");
      } else {
        sb.append(this.index_table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class add_index_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("add_index_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private Index success;
    public static final int SUCCESS = 0;
    private InvalidObjectException o1;
    public static final int O1 = 1;
    private AlreadyExistsException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Index.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(add_index_result.class, metaDataMap);
    }

    public add_index_result() {
    }

    public add_index_result(
      Index success,
      InvalidObjectException o1,
      AlreadyExistsException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_index_result(add_index_result other) {
      if (other.isSetSuccess()) {
        this.success = new Index(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new InvalidObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new AlreadyExistsException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public add_index_result clone() {
      return new add_index_result(this);
    }

    public Index getSuccess() {
      return this.success;
    }

    public void setSuccess(Index success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public InvalidObjectException getO1() {
      return this.o1;
    }

    public void setO1(InvalidObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public AlreadyExistsException getO2() {
      return this.o2;
    }

    public void setO2(AlreadyExistsException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Index)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((InvalidObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((AlreadyExistsException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_index_result)
        return this.equals((add_index_result)that);
      return false;
    }

    public boolean equals(add_index_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Index();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new InvalidObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new AlreadyExistsException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_index_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_index_by_name_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_index_by_name_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField INDEX_NAME_FIELD_DESC = new TField("index_name", TType.STRING, (short)3);
    private static final TField DELETE_DATA_FIELD_DESC = new TField("deleteData", TType.BOOL, (short)4);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private String index_name;
    public static final int INDEX_NAME = 3;
    private boolean deleteData;
    public static final int DELETEDATA = 4;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean deleteData = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(INDEX_NAME, new FieldMetaData("index_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(DELETEDATA, new FieldMetaData("deleteData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_index_by_name_args.class, metaDataMap);
    }

    public drop_index_by_name_args() {
    }

    public drop_index_by_name_args(
      String db_name,
      String tbl_name,
      String index_name,
      boolean deleteData)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.index_name = index_name;
      this.deleteData = deleteData;
      this.__isset.deleteData = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_index_by_name_args(drop_index_by_name_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      if (other.isSetIndex_name()) {
        this.index_name = other.index_name;
      }
      __isset.deleteData = other.__isset.deleteData;
      this.deleteData = other.deleteData;
    }

    @Override
    public drop_index_by_name_args clone() {
      return new drop_index_by_name_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public String getIndex_name() {
      return this.index_name;
    }

    public void setIndex_name(String index_name) {
      this.index_name = index_name;
    }

    public void unsetIndex_name() {
      this.index_name = null;
    }

    // Returns true if field index_name is set (has been asigned a value) and false otherwise
    public boolean isSetIndex_name() {
      return this.index_name != null;
    }

    public boolean isDeleteData() {
      return this.deleteData;
    }

    public void setDeleteData(boolean deleteData) {
      this.deleteData = deleteData;
      this.__isset.deleteData = true;
    }

    public void unsetDeleteData() {
      this.__isset.deleteData = false;
    }

    // Returns true if field deleteData is set (has been asigned a value) and false otherwise
    public boolean isSetDeleteData() {
      return this.__isset.deleteData;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case INDEX_NAME:
        if (value == null) {
          unsetIndex_name();
        } else {
          setIndex_name((String)value);
        }
        break;

      case DELETEDATA:
        if (value == null) {
          unsetDeleteData();
        } else {
          setDeleteData((Boolean)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case INDEX_NAME:
        return getIndex_name();

      case DELETEDATA:
        return new Boolean(isDeleteData());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case INDEX_NAME:
        return isSetIndex_name();
      case DELETEDATA:
        return isSetDeleteData();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_index_by_name_args)
        return this.equals((drop_index_by_name_args)that);
      return false;
    }

    public boolean equals(drop_index_by_name_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_index_name = true && this.isSetIndex_name();
      boolean that_present_index_name = true && that.isSetIndex_name();
      if (this_present_index_name || that_present_index_name) {
        if (!(this_present_index_name && that_present_index_name))
          return false;
        if (!this.index_name.equals(that.index_name))
          return false;
      }

      boolean this_present_deleteData = true;
      boolean that_present_deleteData = true;
      if (this_present_deleteData || that_present_deleteData) {
        if (!(this_present_deleteData && that_present_deleteData))
          return false;
        if (this.deleteData != that.deleteData)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INDEX_NAME:
            if (field.type == TType.STRING) {
              this.index_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DELETEDATA:
            if (field.type == TType.BOOL) {
              this.deleteData = iprot.readBool();
              this.__isset.deleteData = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      if (this.index_name != null) {
        oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
        oprot.writeString(this.index_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DELETE_DATA_FIELD_DESC);
      oprot.writeBool(this.deleteData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_index_by_name_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("index_name:");
      if (this.index_name == null) {
        sb.append("null");
      } else {
        sb.append(this.index_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deleteData:");
      sb.append(this.deleteData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_index_by_name_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_index_by_name_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_index_by_name_result.class, metaDataMap);
    }

    public drop_index_by_name_result() {
    }

    public drop_index_by_name_result(
      boolean success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_index_by_name_result(drop_index_by_name_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public drop_index_by_name_result clone() {
      return new drop_index_by_name_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_index_by_name_result)
        return this.equals((drop_index_by_name_result)that);
      return false;
    }

    public boolean equals(drop_index_by_name_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_index_by_name_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_index_by_name_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_index_by_name_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField INDEX_NAME_FIELD_DESC = new TField("index_name", TType.STRING, (short)3);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private String index_name;
    public static final int INDEX_NAME = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(INDEX_NAME, new FieldMetaData("index_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_index_by_name_args.class, metaDataMap);
    }

    public get_index_by_name_args() {
    }

    public get_index_by_name_args(
      String db_name,
      String tbl_name,
      String index_name)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.index_name = index_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_index_by_name_args(get_index_by_name_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      if (other.isSetIndex_name()) {
        this.index_name = other.index_name;
      }
    }

    @Override
    public get_index_by_name_args clone() {
      return new get_index_by_name_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public String getIndex_name() {
      return this.index_name;
    }

    public void setIndex_name(String index_name) {
      this.index_name = index_name;
    }

    public void unsetIndex_name() {
      this.index_name = null;
    }

    // Returns true if field index_name is set (has been asigned a value) and false otherwise
    public boolean isSetIndex_name() {
      return this.index_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case INDEX_NAME:
        if (value == null) {
          unsetIndex_name();
        } else {
          setIndex_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case INDEX_NAME:
        return getIndex_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case INDEX_NAME:
        return isSetIndex_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_index_by_name_args)
        return this.equals((get_index_by_name_args)that);
      return false;
    }

    public boolean equals(get_index_by_name_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_index_name = true && this.isSetIndex_name();
      boolean that_present_index_name = true && that.isSetIndex_name();
      if (this_present_index_name || that_present_index_name) {
        if (!(this_present_index_name && that_present_index_name))
          return false;
        if (!this.index_name.equals(that.index_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INDEX_NAME:
            if (field.type == TType.STRING) {
              this.index_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      if (this.index_name != null) {
        oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
        oprot.writeString(this.index_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_index_by_name_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("index_name:");
      if (this.index_name == null) {
        sb.append("null");
      } else {
        sb.append(this.index_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_index_by_name_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_index_by_name_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private Index success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;
    private NoSuchObjectException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Index.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_index_by_name_result.class, metaDataMap);
    }

    public get_index_by_name_result() {
    }

    public get_index_by_name_result(
      Index success,
      MetaException o1,
      NoSuchObjectException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_index_by_name_result(get_index_by_name_result other) {
      if (other.isSetSuccess()) {
        this.success = new Index(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new NoSuchObjectException(other.o2);
      }
    }

    @Override
    public get_index_by_name_result clone() {
      return new get_index_by_name_result(this);
    }

    public Index getSuccess() {
      return this.success;
    }

    public void setSuccess(Index success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public NoSuchObjectException getO2() {
      return this.o2;
    }

    public void setO2(NoSuchObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Index)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((NoSuchObjectException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_index_by_name_result)
        return this.equals((get_index_by_name_result)that);
      return false;
    }

    public boolean equals(get_index_by_name_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Index();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new NoSuchObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_index_by_name_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_indexes_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_indexes_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField MAX_INDEXES_FIELD_DESC = new TField("max_indexes", TType.I16, (short)3);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private short max_indexes;
    public static final int MAX_INDEXES = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean max_indexes = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(MAX_INDEXES, new FieldMetaData("max_indexes", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_indexes_args.class, metaDataMap);
    }

    public get_indexes_args() {
      this.max_indexes = (short)-1;

    }

    public get_indexes_args(
      String db_name,
      String tbl_name,
      short max_indexes)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.max_indexes = max_indexes;
      this.__isset.max_indexes = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_indexes_args(get_indexes_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      __isset.max_indexes = other.__isset.max_indexes;
      this.max_indexes = other.max_indexes;
    }

    @Override
    public get_indexes_args clone() {
      return new get_indexes_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public short getMax_indexes() {
      return this.max_indexes;
    }

    public void setMax_indexes(short max_indexes) {
      this.max_indexes = max_indexes;
      this.__isset.max_indexes = true;
    }

    public void unsetMax_indexes() {
      this.__isset.max_indexes = false;
    }

    // Returns true if field max_indexes is set (has been asigned a value) and false otherwise
    public boolean isSetMax_indexes() {
      return this.__isset.max_indexes;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case MAX_INDEXES:
        if (value == null) {
          unsetMax_indexes();
        } else {
          setMax_indexes((Short)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case MAX_INDEXES:
        return new Short(getMax_indexes());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case MAX_INDEXES:
        return isSetMax_indexes();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_indexes_args)
        return this.equals((get_indexes_args)that);
      return false;
    }

    public boolean equals(get_indexes_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_max_indexes = true;
      boolean that_present_max_indexes = true;
      if (this_present_max_indexes || that_present_max_indexes) {
        if (!(this_present_max_indexes && that_present_max_indexes))
          return false;
        if (this.max_indexes != that.max_indexes)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MAX_INDEXES:
            if (field.type == TType.I16) {
              this.max_indexes = iprot.readI16();
              this.__isset.max_indexes = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_INDEXES_FIELD_DESC);
      oprot.writeI16(this.max_indexes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_indexes_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_indexes:");
      sb.append(this.max_indexes);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_indexes_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_indexes_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private List<Index> success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Index.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_indexes_result.class, metaDataMap);
    }

    public get_indexes_result() {
    }

    public get_indexes_result(
      List<Index> success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_indexes_result(get_indexes_result other) {
      if (other.isSetSuccess()) {
        List<Index> __this__success = new ArrayList<Index>();
        for (Index other_element : other.success) {
          __this__success.add(new Index(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_indexes_result clone() {
      return new get_indexes_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Index> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Index elem) {
      if (this.success == null) {
        this.success = new ArrayList<Index>();
      }
      this.success.add(elem);
    }

    public List<Index> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Index> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Index>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_indexes_result)
        return this.equals((get_indexes_result)that);
      return false;
    }

    public boolean equals(get_indexes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list136 = iprot.readListBegin();
                this.success = new ArrayList<Index>(_list136.size);
                for (int _i137 = 0; _i137 < _list136.size; ++_i137)
                {
                  Index _elem138;
                  _elem138 = new Index();
                  _elem138.read(iprot);
                  this.success.add(_elem138);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Index _iter139 : this.success)          {
            _iter139.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_indexes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_index_names_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_index_names_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField MAX_INDEXES_FIELD_DESC = new TField("max_indexes", TType.I16, (short)3);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private short max_indexes;
    public static final int MAX_INDEXES = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean max_indexes = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(MAX_INDEXES, new FieldMetaData("max_indexes", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_index_names_args.class, metaDataMap);
    }

    public get_index_names_args() {
      this.max_indexes = (short)-1;

    }

    public get_index_names_args(
      String db_name,
      String tbl_name,
      short max_indexes)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.max_indexes = max_indexes;
      this.__isset.max_indexes = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_index_names_args(get_index_names_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      __isset.max_indexes = other.__isset.max_indexes;
      this.max_indexes = other.max_indexes;
    }

    @Override
    public get_index_names_args clone() {
      return new get_index_names_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public short getMax_indexes() {
      return this.max_indexes;
    }

    public void setMax_indexes(short max_indexes) {
      this.max_indexes = max_indexes;
      this.__isset.max_indexes = true;
    }

    public void unsetMax_indexes() {
      this.__isset.max_indexes = false;
    }

    // Returns true if field max_indexes is set (has been asigned a value) and false otherwise
    public boolean isSetMax_indexes() {
      return this.__isset.max_indexes;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case MAX_INDEXES:
        if (value == null) {
          unsetMax_indexes();
        } else {
          setMax_indexes((Short)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case MAX_INDEXES:
        return new Short(getMax_indexes());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case MAX_INDEXES:
        return isSetMax_indexes();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_index_names_args)
        return this.equals((get_index_names_args)that);
      return false;
    }

    public boolean equals(get_index_names_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_max_indexes = true;
      boolean that_present_max_indexes = true;
      if (this_present_max_indexes || that_present_max_indexes) {
        if (!(this_present_max_indexes && that_present_max_indexes))
          return false;
        if (this.max_indexes != that.max_indexes)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MAX_INDEXES:
            if (field.type == TType.I16) {
              this.max_indexes = iprot.readI16();
              this.__isset.max_indexes = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_INDEXES_FIELD_DESC);
      oprot.writeI16(this.max_indexes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_index_names_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_indexes:");
      sb.append(this.max_indexes);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_index_names_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_index_names_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)1);

    private List<String> success;
    public static final int SUCCESS = 0;
    private MetaException o2;
    public static final int O2 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_index_names_result.class, metaDataMap);
    }

    public get_index_names_result() {
    }

    public get_index_names_result(
      List<String> success,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_index_names_result(get_index_names_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_index_names_result clone() {
      return new get_index_names_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_index_names_result)
        return this.equals((get_index_names_result)that);
      return false;
    }

    public boolean equals(get_index_names_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list140 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list140.size);
                for (int _i141 = 0; _i141 < _list140.size; ++_i141)
                {
                  String _elem142;
                  _elem142 = iprot.readString();
                  this.success.add(_elem142);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter143 : this.success)          {
            oprot.writeString(_iter143);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_index_names_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
